{
  "address": "0x2ca987b761a45F9c66Fc54b4eC77B82e8ABdC3FD",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ENS",
          "name": "_ensRegistry",
          "type": "address"
        },
        {
          "internalType": "contract INameWrapper",
          "name": "_ensNameWrapper",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "reverseRecordOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_url",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidOperation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "urls",
          "type": "string[]"
        },
        {
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        },
        {
          "internalType": "bytes4",
          "name": "callbackFunction",
          "type": "bytes4"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "OffchainLookup",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RecordTypeNotSupported",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "contentType",
          "type": "uint256"
        }
      ],
      "name": "ABIChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "a",
          "type": "address"
        }
      ],
      "name": "AddrChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "coinType",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "newAddress",
          "type": "bytes"
        }
      ],
      "name": "AddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "hash",
          "type": "bytes"
        }
      ],
      "name": "ContenthashChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "resource",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "record",
          "type": "bytes"
        }
      ],
      "name": "DNSRecordChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "resource",
          "type": "uint16"
        }
      ],
      "name": "DNSRecordDeleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "lastzonehash",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "zonehash",
          "type": "bytes"
        }
      ],
      "name": "DNSZonehashChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "implementer",
          "type": "address"
        }
      ],
      "name": "InterfaceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "NameChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "x",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "y",
          "type": "bytes32"
        }
      ],
      "name": "PubkeyChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "indexedKey",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        }
      ],
      "name": "TextChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "newVersion",
          "type": "uint64"
        }
      ],
      "name": "VersionChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "contentTypes",
          "type": "uint256"
        }
      ],
      "name": "ABI",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "a",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "b",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RESOLVER_SIGNATURE__ADDR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RESOLVER_SIGNATURE__ADDR_WITH_COINTYPE",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RESOLVER_SIGNATURE__TEXT",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "addr",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "result",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "coinType",
          "type": "uint256"
        }
      ],
      "name": "addr",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "clearRecords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "contenthash",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "digidaigakuContract",
      "outputs": [
        {
          "internalType": "contract IERC721",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "internalType": "uint16",
          "name": "resource",
          "type": "uint16"
        }
      ],
      "name": "dnsRecord",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ensNameWrapper",
      "outputs": [
        {
          "internalType": "contract INameWrapper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ensRegistry",
      "outputs": [
        {
          "internalType": "contract ENS",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "getPassthroughTarget",
      "outputs": [
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "interfaceImplementer",
      "outputs": [
        {
          "internalType": "address",
          "name": "result",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "result",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "pubkey",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "x",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "y",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "recordVersions",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "dnsEncodedName",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "resolverCalldata",
          "type": "bytes"
        }
      ],
      "name": "resolve",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "resolveByNameCallback",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "resolveCallback",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "resolveTextByNameCallback",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "contentType",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "setABI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "coinType",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "a",
          "type": "bytes"
        }
      ],
      "name": "setAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "a",
          "type": "address"
        }
      ],
      "name": "setAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "hash",
          "type": "bytes"
        }
      ],
      "name": "setContenthash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "setDNSRecords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        },
        {
          "internalType": "address",
          "name": "implementer",
          "type": "address"
        }
      ],
      "name": "setInterface",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "newName",
          "type": "string"
        }
      ],
      "name": "setName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "x",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "y",
          "type": "bytes32"
        }
      ],
      "name": "setPubkey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "value",
          "type": "string"
        }
      ],
      "name": "setText",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newUrl",
          "type": "string"
        }
      ],
      "name": "setUrl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "hash",
          "type": "bytes"
        }
      ],
      "name": "setZonehash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "key",
          "type": "string"
        }
      ],
      "name": "text",
      "outputs": [
        {
          "internalType": "string",
          "name": "result",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "url",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "zonehash",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x751fdc1c756bda8292f358796af97719cfdcad025df09aeceb837bfe9f263278",
  "receipt": {
    "to": null,
    "from": "0xB6a6c32CCe5B5E963277A66019309EBf13f59F12",
    "contractAddress": "0x2ca987b761a45F9c66Fc54b4eC77B82e8ABdC3FD",
    "transactionIndex": 147,
    "gasUsed": "3399462",
    "logsBloom": "0x
    "blockHash": "0x5a47fd403c5e6c54cf6fd4a37358e2cdf63778d45fe6d4cd2deee21a85c1ac06",
    "transactionHash": "0x751fdc1c756bda8292f358796af97719cfdcad025df09aeceb837bfe9f263278",
    "logs": [
      {
        "transactionIndex": 147,
        "blockNumber": 17939483,
        "transactionHash": "0x751fdc1c756bda8292f358796af97719cfdcad025df09aeceb837bfe9f263278",
        "address": "0xa58E81fe9b61B5c3fE2AFD33CF304c454AbFc7Cb",
        "topics": [
          "0x6ada868dd3058cf77a48a74489fd7963688e5464b2b0fa957ace976243270e92",
          "0x0000000000000000000000002ca987b761a45f9c66fc54b4ec77b82e8abdc3fd",
          "0xe66db024f5a862044df13bf112196156629b5de67e1c09dd67139ed05b49257a"
        ],
        "data": "0x",
        "logIndex": 383,
        "blockHash": "0x5a47fd403c5e6c54cf6fd4a37358e2cdf63778d45fe6d4cd2deee21a85c1ac06"
      },
      {
        "transactionIndex": 147,
        "blockNumber": 17939483,
        "transactionHash": "0x751fdc1c756bda8292f358796af97719cfdcad025df09aeceb837bfe9f263278",
        "address": "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
        "topics": [
          "0xce0457fe73731f824cc272376169235128c118b49d344817417c6d108d155e82",
          "0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2",
          "0x17709f54fe0f492011d270003b21f6a45fa2c5fbf4d9335632aae98a7adeb74f"
        ],
        "data": "0x000000000000000000000000c17cb209d5abdb2d00f566a1e48f558debc264e1",
        "logIndex": 384,
        "blockHash": "0x5a47fd403c5e6c54cf6fd4a37358e2cdf63778d45fe6d4cd2deee21a85c1ac06"
      },
      {
        "transactionIndex": 147,
        "blockNumber": 17939483,
        "transactionHash": "0x751fdc1c756bda8292f358796af97719cfdcad025df09aeceb837bfe9f263278",
        "address": "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
        "topics": [
          "0x335721b01866dc23fbee8b6b2c7b1e14d6f05c28cd35a2c934239f94095602a0",
          "0xe66db024f5a862044df13bf112196156629b5de67e1c09dd67139ed05b49257a"
        ],
        "data": "0x000000000000000000000000231b0ee14048e9dccd1d247744d114a4eb5e8e63",
        "logIndex": 385,
        "blockHash": "0x5a47fd403c5e6c54cf6fd4a37358e2cdf63778d45fe6d4cd2deee21a85c1ac06"
      },
      {
        "transactionIndex": 147,
        "blockNumber": 17939483,
        "transactionHash": "0x751fdc1c756bda8292f358796af97719cfdcad025df09aeceb837bfe9f263278",
        "address": "0x2ca987b761a45F9c66Fc54b4eC77B82e8ABdC3FD",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b6a6c32cce5b5e963277a66019309ebf13f59f12"
        ],
        "data": "0x",
        "logIndex": 386,
        "blockHash": "0x5a47fd403c5e6c54cf6fd4a37358e2cdf63778d45fe6d4cd2deee21a85c1ac06"
      }
    ],
    "blockNumber": 17939483,
    "cumulativeGasUsed": "18632364",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
    "0xD4416b13d2b3a9aBae7AcD5D6C2BbDBE25686401",
    "0xc17cB209D5aBdb2d00f566a1E48F558DEBC264E1",
    "0xd1258DB6Ac08eB0e625B75b371C023dA478E94A9",
    "https://storage.googleapis.com/digidagiaku-by-name/{data}.json"
  ],
  "numDeployments": 1,
  "solcInputHash": "7331d540f29a35a261d4daf89b5d421d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ENS\",\"name\":\"_ensRegistry\",\"type\":\"address\"},{\"internalType\":\"contract INameWrapper\",\"name\":\"_ensNameWrapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reverseRecordOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_url\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidOperation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"urls\",\"type\":\"string[]\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes4\",\"name\":\"callbackFunction\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"OffchainLookup\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RecordTypeNotSupported\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"contentType\",\"type\":\"uint256\"}],\"name\":\"ABIChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"AddrChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"newAddress\",\"type\":\"bytes\"}],\"name\":\"AddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"}],\"name\":\"ContenthashChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"resource\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"record\",\"type\":\"bytes\"}],\"name\":\"DNSRecordChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"resource\",\"type\":\"uint16\"}],\"name\":\"DNSRecordDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"lastzonehash\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"zonehash\",\"type\":\"bytes\"}],\"name\":\"DNSZonehashChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"implementer\",\"type\":\"address\"}],\"name\":\"InterfaceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"NameChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"y\",\"type\":\"bytes32\"}],\"name\":\"PubkeyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"indexedKey\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"TextChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"newVersion\",\"type\":\"uint64\"}],\"name\":\"VersionChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"contentTypes\",\"type\":\"uint256\"}],\"name\":\"ABI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"b\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RESOLVER_SIGNATURE__ADDR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RESOLVER_SIGNATURE__ADDR_WITH_COINTYPE\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RESOLVER_SIGNATURE__TEXT\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"addr\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"result\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"}],\"name\":\"addr\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"clearRecords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"contenthash\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"digidaigakuContract\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"resource\",\"type\":\"uint16\"}],\"name\":\"dnsRecord\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ensNameWrapper\",\"outputs\":[{\"internalType\":\"contract INameWrapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ensRegistry\",\"outputs\":[{\"internalType\":\"contract ENS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"getPassthroughTarget\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"interfaceImplementer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"result\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"result\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"pubkey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"y\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"recordVersions\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"dnsEncodedName\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"resolverCalldata\",\"type\":\"bytes\"}],\"name\":\"resolve\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"resolveByNameCallback\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"resolveCallback\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"resolveTextByNameCallback\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"contentType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"setABI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"a\",\"type\":\"bytes\"}],\"name\":\"setAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"}],\"name\":\"setContenthash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"setDNSRecords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"implementer\",\"type\":\"address\"}],\"name\":\"setInterface\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"y\",\"type\":\"bytes32\"}],\"name\":\"setPubkey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"setText\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newUrl\",\"type\":\"string\"}],\"name\":\"setUrl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"}],\"name\":\"setZonehash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"text\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"result\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"url\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"zonehash\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"ABI(bytes32,uint256)\":{\"params\":{\"contentTypes\":\"A bitwise OR of the ABI formats accepted by the caller.\",\"node\":\"The ENS node to query\"},\"returns\":{\"a\":\"contentType The content type of the return value\",\"b\":\"data The ABI data\"}},\"addr(bytes32)\":{\"params\":{\"node\":\"The ENS node to query.\"},\"returns\":{\"result\":\"The associated address.\"}},\"clearRecords(bytes32)\":{\"params\":{\"node\":\"The node to update.\"}},\"contenthash(bytes32)\":{\"params\":{\"node\":\"The ENS node to query.\"},\"returns\":{\"result\":\"The associated contenthash.\"}},\"dnsRecord(bytes32,bytes32,uint16)\":{\"params\":{\"name\":\"the keccak-256 hash of the fully-qualified name for which to fetch the record\",\"node\":\"the namehash of the node for which to fetch the record\",\"resource\":\"the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\"},\"returns\":{\"result\":\"the DNS record in wire format if present, otherwise empty\"}},\"interfaceImplementer(bytes32,bytes4)\":{\"params\":{\"interfaceID\":\"The EIP 165 interface ID to check for.\",\"node\":\"The ENS node to query.\"},\"returns\":{\"result\":\"The address that implements this interface, or 0 if the interface is unsupported.\"}},\"name(bytes32)\":{\"params\":{\"node\":\"The ENS node to query.\"},\"returns\":{\"result\":\"The associated name.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pubkey(bytes32)\":{\"params\":{\"node\":\"The ENS node to query\"},\"returns\":{\"x\":\"The X coordinate of the curve point for the public key.\",\"y\":\"The Y coordinate of the curve point for the public key.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"text(bytes32,string)\":{\"params\":{\"key\":\"The text data key to query.\",\"node\":\"The ENS node to query.\"},\"returns\":{\"result\":\"The associated text data.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"zonehash(bytes32)\":{\"params\":{\"node\":\"The ENS node to query.\"},\"returns\":{\"result\":\"The associated contenthash.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ABI(bytes32,uint256)\":{\"notice\":\"Returns the ABI associated with an ENS node. Defined in EIP205.\"},\"addr(bytes32)\":{\"notice\":\"Returns the address associated with an ENS node.\"},\"clearRecords(bytes32)\":{\"notice\":\"Increments the record version associated with an ENS node. May only be called by the owner of that node in the ENS registry.\"},\"contenthash(bytes32)\":{\"notice\":\"Returns the contenthash associated with an ENS node.\"},\"dnsRecord(bytes32,bytes32,uint16)\":{\"notice\":\"Obtain a DNS record.\"},\"interfaceImplementer(bytes32,bytes4)\":{\"notice\":\"Returns the address of a contract that implements the specified interface for this name. If an implementer has not been set for this interfaceID and name, the resolver will query the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that contract implements EIP165 and returns `true` for the specified interfaceID, its address will be returned.\"},\"name(bytes32)\":{\"notice\":\"Returns the name associated with an ENS node, for reverse records. Defined in EIP181.\"},\"pubkey(bytes32)\":{\"notice\":\"Returns the SECP256k1 public key associated with an ENS node. Defined in EIP 619.\"},\"text(bytes32,string)\":{\"notice\":\"Returns the text data associated with an ENS node and key.\"},\"zonehash(bytes32)\":{\"notice\":\"zonehash obtains the hash for the zone.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ensWildcardResolvers/DigidaigakuResolver.sol\":\"DigidaigakuResolver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@ensdomains/ens-contracts/contracts/ethregistrar/IBaseRegistrar.sol\":{\"content\":\"import \\\"../registry/ENS.sol\\\";\\nimport \\\"./IBaseRegistrar.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IBaseRegistrar is IERC721 {\\n    event ControllerAdded(address indexed controller);\\n    event ControllerRemoved(address indexed controller);\\n    event NameMigrated(\\n        uint256 indexed id,\\n        address indexed owner,\\n        uint256 expires\\n    );\\n    event NameRegistered(\\n        uint256 indexed id,\\n        address indexed owner,\\n        uint256 expires\\n    );\\n    event NameRenewed(uint256 indexed id, uint256 expires);\\n\\n    // Authorises a controller, who can register and renew domains.\\n    function addController(address controller) external;\\n\\n    // Revoke controller permission for an address.\\n    function removeController(address controller) external;\\n\\n    // Set the resolver for the TLD this registrar manages.\\n    function setResolver(address resolver) external;\\n\\n    // Returns the expiration timestamp of the specified label hash.\\n    function nameExpires(uint256 id) external view returns (uint256);\\n\\n    // Returns true if the specified name is available for registration.\\n    function available(uint256 id) external view returns (bool);\\n\\n    /**\\n     * @dev Register a name.\\n     */\\n    function register(\\n        uint256 id,\\n        address owner,\\n        uint256 duration\\n    ) external returns (uint256);\\n\\n    function renew(uint256 id, uint256 duration) external returns (uint256);\\n\\n    /**\\n     * @dev Reclaim ownership of a name in ENS, if you own it in the registrar.\\n     */\\n    function reclaim(uint256 id, address owner) external;\\n}\\n\",\"keccak256\":\"0x15f7b1dfa7cd34444daf79ec9b4d40437caa9257893ce0639d706fcc2ba69e52\"},\"@ensdomains/ens-contracts/contracts/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface ENS {\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner\\n    ) external returns (bytes32);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setOwner(bytes32 node, address owner) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function owner(bytes32 node) external view returns (address);\\n\\n    function resolver(bytes32 node) external view returns (address);\\n\\n    function ttl(bytes32 node) external view returns (uint64);\\n\\n    function recordExists(bytes32 node) external view returns (bool);\\n\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7cb1158c7d268b63de1468e28e2711b28d686e2628ddb22da2149cd93ddeafda\"},\"@ensdomains/ens-contracts/contracts/resolvers/ResolverBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"./profiles/IVersionableResolver.sol\\\";\\n\\nabstract contract ResolverBase is ERC165, IVersionableResolver {\\n    mapping(bytes32 => uint64) public recordVersions;\\n\\n    function isAuthorised(bytes32 node) internal view virtual returns (bool);\\n\\n    modifier authorised(bytes32 node) {\\n        require(isAuthorised(node));\\n        _;\\n    }\\n\\n    /**\\n     * Increments the record version associated with an ENS node.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * @param node The node to update.\\n     */\\n    function clearRecords(bytes32 node) public virtual authorised(node) {\\n        recordVersions[node]++;\\n        emit VersionChanged(node, recordVersions[node]);\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) public view virtual override returns (bool) {\\n        return\\n            interfaceID == type(IVersionableResolver).interfaceId ||\\n            super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0x893049fffd6feee06d7acef1680f6e26505bedff62a9f7a17e921c0ba2f66307\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IABIResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IABIResolver {\\n    event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\\n\\n    /**\\n     * Returns the ABI associated with an ENS node.\\n     * Defined in EIP205.\\n     * @param node The ENS node to query\\n     * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\\n     * @return contentType The content type of the return value\\n     * @return data The ABI data\\n     */\\n    function ABI(\\n        bytes32 node,\\n        uint256 contentTypes\\n    ) external view returns (uint256, bytes memory);\\n}\\n\",\"keccak256\":\"0x85b373d02d19374fe570af407f459768285704bf7f30ab17c30eabfb5a10e4c3\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddrResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the legacy (ETH-only) addr function.\\n */\\ninterface IAddrResolver {\\n    event AddrChanged(bytes32 indexed node, address a);\\n\\n    /**\\n     * Returns the address associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated address.\\n     */\\n    function addr(bytes32 node) external view returns (address payable);\\n}\\n\",\"keccak256\":\"0x2ad7f2fc60ebe0f93745fe70247f6a854f66af732483fda2a3c5e055614445e8\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the new (multicoin) addr function.\\n */\\ninterface IAddressResolver {\\n    event AddressChanged(\\n        bytes32 indexed node,\\n        uint256 coinType,\\n        bytes newAddress\\n    );\\n\\n    function addr(\\n        bytes32 node,\\n        uint256 coinType\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x411447c1e90c51e09702815a85ec725ffbbe37cf96e8cc4d2a8bd4ad8a59d73e\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IContentHashResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IContentHashResolver {\\n    event ContenthashChanged(bytes32 indexed node, bytes hash);\\n\\n    /**\\n     * Returns the contenthash associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated contenthash.\\n     */\\n    function contenthash(bytes32 node) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xd95cd77684ba5752c428d7dceb4ecc6506ac94f4fbb910489637eb68dcd8e366\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IDNSRecordResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IDNSRecordResolver {\\n    // DNSRecordChanged is emitted whenever a given node/name/resource's RRSET is updated.\\n    event DNSRecordChanged(\\n        bytes32 indexed node,\\n        bytes name,\\n        uint16 resource,\\n        bytes record\\n    );\\n    // DNSRecordDeleted is emitted whenever a given node/name/resource's RRSET is deleted.\\n    event DNSRecordDeleted(bytes32 indexed node, bytes name, uint16 resource);\\n\\n    /**\\n     * Obtain a DNS record.\\n     * @param node the namehash of the node for which to fetch the record\\n     * @param name the keccak-256 hash of the fully-qualified name for which to fetch the record\\n     * @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\\n     * @return the DNS record in wire format if present, otherwise empty\\n     */\\n    function dnsRecord(\\n        bytes32 node,\\n        bytes32 name,\\n        uint16 resource\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xcfa52200edd337f2c6c5bf402352600584da033b21323603e53de33051a3e25d\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IDNSZoneResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IDNSZoneResolver {\\n    // DNSZonehashChanged is emitted whenever a given node's zone hash is updated.\\n    event DNSZonehashChanged(\\n        bytes32 indexed node,\\n        bytes lastzonehash,\\n        bytes zonehash\\n    );\\n\\n    /**\\n     * zonehash obtains the hash for the zone.\\n     * @param node The ENS node to query.\\n     * @return The associated contenthash.\\n     */\\n    function zonehash(bytes32 node) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xca1b3a16e7005533f2800a3e66fcdccf7c574deac7913d8c810f40aec1d58dc0\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IExtendedResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IExtendedResolver {\\n    function resolve(\\n        bytes memory name,\\n        bytes memory data\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x5d81521cfae7d9a4475d27533cd8ed0d3475d369eb0674fd90ffbdbdf292faa3\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IInterfaceResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IInterfaceResolver {\\n    event InterfaceChanged(\\n        bytes32 indexed node,\\n        bytes4 indexed interfaceID,\\n        address implementer\\n    );\\n\\n    /**\\n     * Returns the address of a contract that implements the specified interface for this name.\\n     * If an implementer has not been set for this interfaceID and name, the resolver will query\\n     * the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that\\n     * contract implements EIP165 and returns `true` for the specified interfaceID, its address\\n     * will be returned.\\n     * @param node The ENS node to query.\\n     * @param interfaceID The EIP 165 interface ID to check for.\\n     * @return The address that implements this interface, or 0 if the interface is unsupported.\\n     */\\n    function interfaceImplementer(\\n        bytes32 node,\\n        bytes4 interfaceID\\n    ) external view returns (address);\\n}\\n\",\"keccak256\":\"0x390321fb58f7b927df9562450981e74b4be3907e7c09df321fd3b7409b63ae28\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/INameResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface INameResolver {\\n    event NameChanged(bytes32 indexed node, string name);\\n\\n    /**\\n     * Returns the name associated with an ENS node, for reverse records.\\n     * Defined in EIP181.\\n     * @param node The ENS node to query.\\n     * @return The associated name.\\n     */\\n    function name(bytes32 node) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x9ec392b612447b1acbdc01114f2da2837a658d3f3157f60a99c5269f0b623346\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IPubkeyResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IPubkeyResolver {\\n    event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\\n\\n    /**\\n     * Returns the SECP256k1 public key associated with an ENS node.\\n     * Defined in EIP 619.\\n     * @param node The ENS node to query\\n     * @return x The X coordinate of the curve point for the public key.\\n     * @return y The Y coordinate of the curve point for the public key.\\n     */\\n    function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y);\\n}\\n\",\"keccak256\":\"0x69748947093dd2fda9ddcebd0adf19a6d1e7600df1d4b1462a0417156caddca7\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/ITextResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface ITextResolver {\\n    event TextChanged(\\n        bytes32 indexed node,\\n        string indexed indexedKey,\\n        string key,\\n        string value\\n    );\\n\\n    /**\\n     * Returns the text data associated with an ENS node and key.\\n     * @param node The ENS node to query.\\n     * @param key The text data key to query.\\n     * @return The associated text data.\\n     */\\n    function text(\\n        bytes32 node,\\n        string calldata key\\n    ) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x7c5debb3c42cd9f5de2274ea7aa053f238608314b62db441c40e31cea2543fd5\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IVersionableResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IVersionableResolver {\\n    event VersionChanged(bytes32 indexed node, uint64 newVersion);\\n\\n    function recordVersions(bytes32 node) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xd0d09596f20c57bafb2ffa8521a8c57120e9af6c6b194f9c689d4da56f91a57c\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/reverseRegistrar/IReverseRegistrar.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface IReverseRegistrar {\\n    function setDefaultResolver(address resolver) external;\\n\\n    function claim(address owner) external returns (bytes32);\\n\\n    function claimForAddr(\\n        address addr,\\n        address owner,\\n        address resolver\\n    ) external returns (bytes32);\\n\\n    function claimWithResolver(\\n        address owner,\\n        address resolver\\n    ) external returns (bytes32);\\n\\n    function setName(string memory name) external returns (bytes32);\\n\\n    function setNameForAddr(\\n        address addr,\\n        address owner,\\n        address resolver,\\n        string memory name\\n    ) external returns (bytes32);\\n\\n    function node(address addr) external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0x83adfcf6da72b1bcd1e3ac387afe5fc7fdf7f2ac28b7601544d2ca4b9d45d159\"},\"@ensdomains/ens-contracts/contracts/reverseRegistrar/ReverseClaimer.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.17 <0.9.0;\\n\\nimport {ENS} from \\\"../registry/ENS.sol\\\";\\nimport {IReverseRegistrar} from \\\"../reverseRegistrar/IReverseRegistrar.sol\\\";\\n\\ncontract ReverseClaimer {\\n    bytes32 constant ADDR_REVERSE_NODE =\\n        0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\\n\\n    constructor(ENS ens, address claimant) {\\n        IReverseRegistrar reverseRegistrar = IReverseRegistrar(\\n            ens.owner(ADDR_REVERSE_NODE)\\n        );\\n        reverseRegistrar.claim(claimant);\\n    }\\n}\\n\",\"keccak256\":\"0x78a28627241535b595f6fff476a1fa7acc90c80684fe7784734920fc8af6fc22\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/utils/NameEncoder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport {BytesUtils} from \\\"../wrapper/BytesUtils.sol\\\";\\n\\nlibrary NameEncoder {\\n    using BytesUtils for bytes;\\n\\n    function dnsEncodeName(\\n        string memory name\\n    ) internal pure returns (bytes memory dnsName, bytes32 node) {\\n        uint8 labelLength = 0;\\n        bytes memory bytesName = bytes(name);\\n        uint256 length = bytesName.length;\\n        dnsName = new bytes(length + 2);\\n        node = 0;\\n        if (length == 0) {\\n            dnsName[0] = 0;\\n            return (dnsName, node);\\n        }\\n\\n        // use unchecked to save gas since we check for an underflow\\n        // and we check for the length before the loop\\n        unchecked {\\n            for (uint256 i = length - 1; i >= 0; i--) {\\n                if (bytesName[i] == \\\".\\\") {\\n                    dnsName[i + 1] = bytes1(labelLength);\\n                    node = keccak256(\\n                        abi.encodePacked(\\n                            node,\\n                            bytesName.keccak(i + 1, labelLength)\\n                        )\\n                    );\\n                    labelLength = 0;\\n                } else {\\n                    labelLength += 1;\\n                    dnsName[i + 1] = bytesName[i];\\n                }\\n                if (i == 0) {\\n                    break;\\n                }\\n            }\\n        }\\n\\n        node = keccak256(\\n            abi.encodePacked(node, bytesName.keccak(0, labelLength))\\n        );\\n\\n        dnsName[0] = bytes1(labelLength);\\n        return (dnsName, node);\\n    }\\n}\\n\",\"keccak256\":\"0x63fd5f360cef8c9b8b8cfdff20d3f0e955b4c8ac7dfac758788223c61678aad1\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/wrapper/BytesUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\nlibrary BytesUtils {\\n    /*\\n     * @dev Returns the keccak-256 hash of a byte range.\\n     * @param self The byte string to hash.\\n     * @param offset The position to start hashing at.\\n     * @param len The number of bytes to hash.\\n     * @return The hash of the byte range.\\n     */\\n    function keccak(\\n        bytes memory self,\\n        uint256 offset,\\n        uint256 len\\n    ) internal pure returns (bytes32 ret) {\\n        require(offset + len <= self.length);\\n        assembly {\\n            ret := keccak256(add(add(self, 32), offset), len)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the ENS namehash of a DNS-encoded name.\\n     * @param self The DNS-encoded name to hash.\\n     * @param offset The offset at which to start hashing.\\n     * @return The namehash of the name.\\n     */\\n    function namehash(\\n        bytes memory self,\\n        uint256 offset\\n    ) internal pure returns (bytes32) {\\n        (bytes32 labelhash, uint256 newOffset) = readLabel(self, offset);\\n        if (labelhash == bytes32(0)) {\\n            require(offset == self.length - 1, \\\"namehash: Junk at end of name\\\");\\n            return bytes32(0);\\n        }\\n        return\\n            keccak256(abi.encodePacked(namehash(self, newOffset), labelhash));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak-256 hash of a DNS-encoded label, and the offset to the start of the next label.\\n     * @param self The byte string to read a label from.\\n     * @param idx The index to read a label at.\\n     * @return labelhash The hash of the label at the specified index, or 0 if it is the last label.\\n     * @return newIdx The index of the start of the next label.\\n     */\\n    function readLabel(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (bytes32 labelhash, uint256 newIdx) {\\n        require(idx < self.length, \\\"readLabel: Index out of bounds\\\");\\n        uint256 len = uint256(uint8(self[idx]));\\n        if (len > 0) {\\n            labelhash = keccak(self, idx + 1, len);\\n        } else {\\n            labelhash = bytes32(0);\\n        }\\n        newIdx = idx + len + 1;\\n    }\\n}\\n\",\"keccak256\":\"0xf862cd86d749158a554e3cb517efa9097331ec0cf7225117f21e96fb50c67edb\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/wrapper/IMetadataService.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\ninterface IMetadataService {\\n    function uri(uint256) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb3f1cf6df01ed7b15e5f2318f6823afbdb586ca38c2124c67955c645647ae9a2\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/wrapper/INameWrapper.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\nimport \\\"../registry/ENS.sol\\\";\\nimport \\\"../ethregistrar/IBaseRegistrar.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"./IMetadataService.sol\\\";\\nimport \\\"./INameWrapperUpgrade.sol\\\";\\n\\nuint32 constant CANNOT_UNWRAP = 1;\\nuint32 constant CANNOT_BURN_FUSES = 2;\\nuint32 constant CANNOT_TRANSFER = 4;\\nuint32 constant CANNOT_SET_RESOLVER = 8;\\nuint32 constant CANNOT_SET_TTL = 16;\\nuint32 constant CANNOT_CREATE_SUBDOMAIN = 32;\\nuint32 constant CANNOT_APPROVE = 64;\\n//uint16 reserved for parent controlled fuses from bit 17 to bit 32\\nuint32 constant PARENT_CANNOT_CONTROL = 1 << 16;\\nuint32 constant IS_DOT_ETH = 1 << 17;\\nuint32 constant CAN_EXTEND_EXPIRY = 1 << 18;\\nuint32 constant CAN_DO_EVERYTHING = 0;\\nuint32 constant PARENT_CONTROLLED_FUSES = 0xFFFF0000;\\n// all fuses apart from IS_DOT_ETH\\nuint32 constant USER_SETTABLE_FUSES = 0xFFFDFFFF;\\n\\ninterface INameWrapper is IERC1155 {\\n    event NameWrapped(\\n        bytes32 indexed node,\\n        bytes name,\\n        address owner,\\n        uint32 fuses,\\n        uint64 expiry\\n    );\\n\\n    event NameUnwrapped(bytes32 indexed node, address owner);\\n\\n    event FusesSet(bytes32 indexed node, uint32 fuses);\\n    event ExpiryExtended(bytes32 indexed node, uint64 expiry);\\n\\n    function ens() external view returns (ENS);\\n\\n    function registrar() external view returns (IBaseRegistrar);\\n\\n    function metadataService() external view returns (IMetadataService);\\n\\n    function names(bytes32) external view returns (bytes memory);\\n\\n    function name() external view returns (string memory);\\n\\n    function upgradeContract() external view returns (INameWrapperUpgrade);\\n\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n\\n    function wrap(\\n        bytes calldata name,\\n        address wrappedOwner,\\n        address resolver\\n    ) external;\\n\\n    function wrapETH2LD(\\n        string calldata label,\\n        address wrappedOwner,\\n        uint16 ownerControlledFuses,\\n        address resolver\\n    ) external returns (uint64 expires);\\n\\n    function registerAndWrapETH2LD(\\n        string calldata label,\\n        address wrappedOwner,\\n        uint256 duration,\\n        address resolver,\\n        uint16 ownerControlledFuses\\n    ) external returns (uint256 registrarExpiry);\\n\\n    function renew(\\n        uint256 labelHash,\\n        uint256 duration\\n    ) external returns (uint256 expires);\\n\\n    function unwrap(bytes32 node, bytes32 label, address owner) external;\\n\\n    function unwrapETH2LD(\\n        bytes32 label,\\n        address newRegistrant,\\n        address newController\\n    ) external;\\n\\n    function upgrade(bytes calldata name, bytes calldata extraData) external;\\n\\n    function setFuses(\\n        bytes32 node,\\n        uint16 ownerControlledFuses\\n    ) external returns (uint32 newFuses);\\n\\n    function setChildFuses(\\n        bytes32 parentNode,\\n        bytes32 labelhash,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        string calldata label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external returns (bytes32);\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        string calldata label,\\n        address newOwner,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external returns (bytes32);\\n\\n    function extendExpiry(\\n        bytes32 node,\\n        bytes32 labelhash,\\n        uint64 expiry\\n    ) external returns (uint64);\\n\\n    function canModifyName(\\n        bytes32 node,\\n        address addr\\n    ) external view returns (bool);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function ownerOf(uint256 id) external view returns (address owner);\\n\\n    function approve(address to, uint256 tokenId) external;\\n\\n    function getApproved(uint256 tokenId) external view returns (address);\\n\\n    function getData(\\n        uint256 id\\n    ) external view returns (address, uint32, uint64);\\n\\n    function setMetadataService(IMetadataService _metadataService) external;\\n\\n    function uri(uint256 tokenId) external view returns (string memory);\\n\\n    function setUpgradeContract(INameWrapperUpgrade _upgradeAddress) external;\\n\\n    function allFusesBurned(\\n        bytes32 node,\\n        uint32 fuseMask\\n    ) external view returns (bool);\\n\\n    function isWrapped(bytes32) external view returns (bool);\\n\\n    function isWrapped(bytes32, bytes32) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x70310eb67146d7290731c31841399640ac3b6a949eadc6598bc150123d185c57\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/wrapper/INameWrapperUpgrade.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\ninterface INameWrapperUpgrade {\\n    function wrapFromUpgrade(\\n        bytes calldata name,\\n        address wrappedOwner,\\n        uint32 fuses,\\n        uint64 expiry,\\n        address approved,\\n        bytes calldata extraData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x42e0cec6cd9d1a62d51d45b678f69d3e4ad5555e659b197e41257b308346bb8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) internal view returns (bool[] memory) {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     *\\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\\n     * should be exercised when using this function.\\n     *\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x5a08ad61f4e82b8a3323562661a86fb10b10190848073fdc13d4ac43710ffba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/ensGuilds/GuildsResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport { NameEncoder } from \\\"@ensdomains/ens-contracts/contracts/utils/NameEncoder.sol\\\";\\nimport { ReverseClaimer } from \\\"@ensdomains/ens-contracts/contracts/reverseRegistrar/ReverseClaimer.sol\\\";\\nimport { ENS } from \\\"@ensdomains/ens-contracts/contracts/registry/ENS.sol\\\";\\nimport { INameWrapper } from \\\"@ensdomains/ens-contracts/contracts/wrapper/INameWrapper.sol\\\";\\n\\nimport { WildcardResolverBase } from \\\"../ensWildcardResolvers/WildcardResolverBase.sol\\\";\\nimport { IENSGuilds } from \\\"./interfaces/IENSGuilds.sol\\\";\\n\\ncontract GuildsResolver is WildcardResolverBase, ReverseClaimer {\\n    using NameEncoder for string;\\n\\n    IENSGuilds public ensGuilds;\\n\\n    // guildEnsNode => recordVersion => keccak256(tag) => tagOwner\\n    mapping(bytes32 => mapping(uint256 => mapping(bytes32 => address))) private _guildRecords;\\n\\n    // used to clear all of a Guild's ENS records\\n    mapping(bytes32 => uint256) private _guildRecordVersions;\\n\\n    modifier onlyEnsGuildsContract() {\\n        // solhint-disable-next-line reason-string, custom-errors\\n        require(_msgSender() == address(ensGuilds));\\n        _;\\n    }\\n\\n    constructor(\\n        ENS _ensRegistry,\\n        INameWrapper _ensNameWrapper,\\n        address reverseRecordOwner\\n    ) WildcardResolverBase(_ensRegistry, _ensNameWrapper) ReverseClaimer(_ensRegistry, reverseRecordOwner) {\\n        return;\\n    }\\n\\n    function initialize(IENSGuilds _ensGuilds) external {\\n        // solhint-disable reason-string, custom-errors\\n        require(address(ensGuilds) == address(0));\\n        require(_ensGuilds.supportsInterface(type(IENSGuilds).interfaceId));\\n        // solhint-enable reason-string, custom-errors\\n\\n        ensGuilds = _ensGuilds;\\n    }\\n\\n    function onGuildRegistered(string calldata guildName) external onlyEnsGuildsContract {\\n        // need to keep track of the mapping from the DNS-encoded version\\n        // of the guild name to its namehash-encoded version\\n        (bytes memory dnsEncodedName, bytes32 ensNode) = guildName.dnsEncodeName();\\n        parentEnsNodes[dnsEncodedName] = ensNode;\\n    }\\n\\n    /**\\n     * Sets the address associated with a guild tag.\\n     * May only be called by descendants of this contract\\n     */\\n    function setEnsForwardRecord(\\n        bytes32 guildEnsNode,\\n        string memory tag,\\n        address _addr\\n    ) external onlyEnsGuildsContract {\\n        uint256 version = _guildRecordVersions[guildEnsNode];\\n        bytes32 tagHash = keccak256(bytes(tag));\\n        _guildRecords[guildEnsNode][version][tagHash] = _addr;\\n    }\\n\\n    function clearEnsRecordsForGuild(bytes32 guildEnsNode) external onlyEnsGuildsContract {\\n        _guildRecordVersions[guildEnsNode]++;\\n    }\\n\\n    function setPassthroughTarget(bytes32 guildEnsNode, address resolver) external onlyEnsGuildsContract {\\n        _setPassthroughTarget(guildEnsNode, resolver);\\n    }\\n\\n    function getTagOwner(bytes32 guildEnsNode, bytes32 tagHash) public view returns (address) {\\n        uint256 version = _guildRecordVersions[guildEnsNode];\\n        return _guildRecords[guildEnsNode][version][tagHash];\\n    }\\n\\n    function _resolveWildcardEthAddr(\\n        bytes calldata childUtf8Encoded,\\n        bytes calldata parentDnsEncoded\\n    ) internal view override returns (address) {\\n        bytes32 guildEnsNode = parentEnsNodes[parentDnsEncoded];\\n        bytes32 tagHash = keccak256(childUtf8Encoded);\\n        return getTagOwner(guildEnsNode, tagHash);\\n    }\\n\\n    function _resolveWildcardTextRecord(\\n        bytes calldata,\\n        bytes calldata,\\n        string calldata\\n    ) internal pure override returns (string memory) {\\n        // ENSGuilds doesn't set text records for Guild tags\\n        return \\\"\\\";\\n    }\\n\\n    function isAuthorised(bytes32 node) internal view override returns (bool) {\\n        return _msgSender() == _nodeOwner(node);\\n    }\\n}\\n\",\"keccak256\":\"0x8b4c8143c6bce25f15b5e86cc647850ac37611b0e963b84783920baaa354cb50\",\"license\":\"MIT\"},\"contracts/ensGuilds/interfaces/IENSGuilds.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport { IERC1155MetadataURI } from \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\n\\ninterface IENSGuilds is IERC1155MetadataURI {\\n    /** Events */\\n    event Registered(bytes32 indexed guildEnsNode);\\n    event Deregistered(bytes32 indexed guildEnsNode);\\n    event TagClaimed(bytes32 indexed guildEnsNode, bytes32 indexed tagHash, address recipient);\\n    event TagTransferred(bytes32 indexed guildEnsNode, bytes32 indexed tagHash, address from, address to);\\n    event TagRevoked(bytes32 indexed guildEnsNode, bytes32 indexed tagHash);\\n    event FeePolicyUpdated(bytes32 indexed guildEnsNode, address feePolicy);\\n    event TagsAuthPolicyUpdated(bytes32 indexed guildEnsNode, address tagsAuthPolicy);\\n    event AdminTransferred(bytes32 indexed guildEnsNode, address newAdmin);\\n    event SetActive(bytes32 indexed guildEnsNode, bool active);\\n    event TokenUriSet(bytes32 indexed guildEnsNode, string uri);\\n\\n    /* Functions */\\n\\n    /**\\n     * @notice Registers a new guild from an existing ENS domain.\\n     * Caller must be the ENS node's owner and ENSGuilds must have been designated an \\\"operator\\\" for the caller.\\n     * @param ensName The guild's full ENS name (e.g. 'my-guild.eth')\\n     * @param guildAdmin The address that will administrate this guild\\n     * @param feePolicy The address of an implementation of FeePolicy to use for minting new tags within this guild\\n     * @param tagsAuthPolicy The address of an implementation of TagsAuthPolicy to use for minting new tags\\n     * within this guild\\n     */\\n    function registerGuild(\\n        string calldata ensName,\\n        address guildAdmin,\\n        address feePolicy,\\n        address tagsAuthPolicy\\n    ) external;\\n\\n    /**\\n     * @notice De-registers a registered guild.\\n     * Designates guild as inactive and marks all tags previously minted for that guild as eligible for revocation.\\n     * @param guildEnsNode The ENS namehash of the guild's domain\\n     */\\n    function deregisterGuild(bytes32 guildEnsNode) external;\\n\\n    /**\\n     * @notice Claims a guild tag\\n     * @param guildEnsNode The namehash of the guild for which the tag should be claimed (e.g. namehash('my-guild.eth'))\\n     * @param tag The tag name to claim (e.g. 'foo' for foo.my-guild.eth). Assumes `tag` is already normalized per\\n     * ENS Name Processing rules\\n     * @param recipient The address that will receive this guild tag (usually same as the caller)\\n     * @param extraClaimArgs [Optional] Any additional arguments necessary for guild-specific logic,\\n     *  such as authorization\\n     */\\n    function claimGuildTag(\\n        bytes32 guildEnsNode,\\n        string calldata tag,\\n        address recipient,\\n        bytes calldata extraClaimArgs\\n    ) external payable;\\n\\n    /**\\n     * @notice Transfers an existing guild tag\\n     * @param guildEnsNode The namehash of the guild for which the tag should be transferred\\n     * (e.g. namehash('my-guild.eth'))\\n     * @param tag The tag name to transfer (e.g. 'foo' for foo.my-guild.eth). Assumes `tag` is already normalized per\\n     * ENS Name Processing rules\\n     * @param recipient The address that will receive this guild tag\\n     * @param extraTransferArgs [Optional] Any additional arguments necessary for guild-specific logic,\\n     *  such as authorization\\n     */\\n    function transferGuildTag(\\n        bytes32 guildEnsNode,\\n        string calldata tag,\\n        address recipient,\\n        bytes calldata extraTransferArgs\\n    ) external;\\n\\n    /**\\n     * @notice Claims multiple tags for a guild at once\\n     * @param guildEnsNode The ENS namehash of the guild's domain\\n     * @param tags Tags to be claimed\\n     * @param recipients Recipients of each tag to be claimed\\n     * @param extraClaimArgs Per-tag extra arguments required for guild-specific logic, such as authorization.\\n     * Must have same length as array of tagHashes, even if each array element is itself empty bytes\\n     */\\n    function claimGuildTagsBatch(\\n        bytes32 guildEnsNode,\\n        string[] calldata tags,\\n        address[] calldata recipients,\\n        bytes[] calldata extraClaimArgs\\n    ) external payable;\\n\\n    /**\\n     * @notice Returns the current owner of the given guild tag.\\n     * Returns address(0) if no such guild or tag exists, or if the guild has been deregistered.\\n     * @param guildEnsNode The ENS namehash of the guild's domain\\n     * @param tagHash The ENS namehash of the tag (e.g. keccak256('foo') for foo.my-guild.eth)\\n     */\\n    function tagOwner(bytes32 guildEnsNode, bytes32 tagHash) external view returns (address);\\n\\n    /**\\n     * @notice Attempts to revoke an existing guild tag, if authorized by the guild's AuthPolicy.\\n     * Deregistered guilds will bypass auth checks for revocation of all tags.\\n     * @param guildEnsNode The ENS namehash of the guild's domain\\n     * @param tag The tag to revoke\\n     * @param extraData [Optional] Any additional arguments necessary for assessing whether a tag may be revoked\\n     */\\n    function revokeGuildTag(bytes32 guildEnsNode, string calldata tag, bytes calldata extraData) external;\\n\\n    /**\\n     * @notice Attempts to revoke multiple guild tags\\n     * @param guildEnsNode The ENS namehash of the guild's domain\\n     * @param tags tags to revoke\\n     * @param extraData Additional arguments necessary for assessing whether a tag may be revoked\\n     */\\n    function revokeGuildTagsBatch(bytes32 guildEnsNode, string[] calldata tags, bytes[] calldata extraData) external;\\n\\n    /**\\n     * @notice Updates the FeePolicy for an existing guild. May only be called by the guild's registered admin.\\n     * @param guildEnsNode The ENS namehash of the guild's domain\\n     * @param feePolicy The address of an implementation of FeePolicy to use for minting new tags within this guild\\n     */\\n    function updateGuildFeePolicy(bytes32 guildEnsNode, address feePolicy) external;\\n\\n    /**\\n     * @notice Updates the TagsAuthPolicy for an existing guild. May only be called by the guild's registered admin.\\n     * @param guildEnsNode The ENS namehash of the guild's domain\\n     * @param tagsAuthPolicy The address of an implementation of TagsAuthPolicy to use for\\n     * minting new tags within this guild\\n     */\\n    function updateGuildTagsAuthPolicy(bytes32 guildEnsNode, address tagsAuthPolicy) external;\\n\\n    /**\\n     * @notice Sets the metadata URI string for fetching metadata for a guild's tag NFTs.\\n     * May only be called by the guild's registered admin.\\n     * @param guildEnsNode The ENS namehash of the guild's domain\\n     * @param uri The ERC1155 metadata URL template\\n     */\\n    function setGuildTokenUri(bytes32 guildEnsNode, string calldata uri) external;\\n\\n    /**\\n     * @notice Sets a guild as active or inactive. May only be called by the guild's registered admin.\\n     * @param guildEnsNode The ENS namehash of the guild's domain\\n     * @param active The new status\\n     */\\n    function setGuildActive(bytes32 guildEnsNode, bool active) external;\\n\\n    /**\\n     * @notice Returns the current admin registered for the given guild.\\n     * @param guildEnsNode The ENS namehash of the guild's domain\\n     */\\n    function guildAdmin(bytes32 guildEnsNode) external view returns (address);\\n\\n    /**\\n     * @notice Transfers the role of guild admin to the given address.\\n     * May only be called by the guild's registered admin.\\n     * @param guildEnsNode The ENS namehash of the guild's domain\\n     * @param newAdmin The new admin\\n     */\\n    function transferGuildAdmin(bytes32 guildEnsNode, address newAdmin) external;\\n\\n    /**\\n     * @notice Registers a resolver for the guild's root ENS name that will\\n     * answer queries about the parent name itself, or any child names that are\\n     * not Guild tags\\n     * @param guildEnsNode The ENS namehash of the guild's domain\\n     * @param fallbackResolver The fallback resolver\\n     */\\n    function setFallbackResolver(bytes32 guildEnsNode, address fallbackResolver) external;\\n}\\n\",\"keccak256\":\"0xdd1351df064ede50cdf43fa12e52be847dda264f534acf845096ad4e43343e84\",\"license\":\"MIT\"},\"contracts/ensWildcardResolvers/DigidaigakuResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport { WildcardResolverBase } from \\\"./WildcardResolverBase.sol\\\";\\nimport { StringParsing } from \\\"../libraries/StringParsing.sol\\\";\\nimport { INameWrapper } from \\\"../ensGuilds/GuildsResolver.sol\\\";\\nimport { ReverseClaimer } from \\\"@ensdomains/ens-contracts/contracts/reverseRegistrar/ReverseClaimer.sol\\\";\\nimport { IERC721 } from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport { IERC721Metadata } from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport { ENS } from \\\"@ensdomains/ens-contracts/contracts/registry/ENS.sol\\\";\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract DigidaigakuResolver is WildcardResolverBase, ReverseClaimer, Ownable {\\n    using StringParsing for bytes;\\n    using Strings for string;\\n    using Strings for address;\\n    using Strings for uint256;\\n\\n    string public url;\\n    IERC721 public digidaigakuContract;\\n\\n    constructor(\\n        ENS _ensRegistry,\\n        INameWrapper _ensNameWrapper,\\n        address reverseRecordOwner,\\n        address tokenContract,\\n        string memory _url\\n    ) WildcardResolverBase(_ensRegistry, _ensNameWrapper) ReverseClaimer(_ensRegistry, reverseRecordOwner) {\\n        digidaigakuContract = IERC721(tokenContract);\\n        url = _url;\\n        return;\\n    }\\n\\n    function setUrl(string memory newUrl) public onlyOwner {\\n        url = newUrl;\\n    }\\n\\n    function _resolveWildcardEthAddr(\\n        bytes calldata childUtf8Encoded,\\n        bytes calldata parentDnsEncoded // solhint-disable-line no-unused-vars\\n    ) internal view virtual override returns (address) {\\n        // Extract tokenId from child name\\n        (bool valid, uint256 tokenId) = childUtf8Encoded.parseUint256();\\n        // No token, try resolving using name\\n        if (!valid) {\\n            string[] memory urls = new string[](1);\\n            urls[0] = url;\\n\\n            revert OffchainLookup(address(this), urls, childUtf8Encoded, this.resolveByNameCallback.selector, \\\"\\\");\\n        }\\n\\n        return resolveOwnerAddress(tokenId);\\n    }\\n\\n    function resolveByNameCallback(\\n        bytes calldata response,\\n        bytes calldata extraData // solhint-disable-line no-unused-vars\\n    ) public view returns (bytes memory) {\\n        // Get tokenId from offchain response\\n        uint256 tokenId = abi.decode(response, (uint256));\\n        return abi.encode(resolveOwnerAddress(tokenId));\\n    }\\n\\n    function resolveOwnerAddress(uint256 tokenId) internal view returns (address) {\\n        // Lookup token owner\\n        address tokenOwner;\\n        try digidaigakuContract.ownerOf(tokenId) returns (address _tokenOwner) {\\n            tokenOwner = _tokenOwner;\\n        } catch {\\n            tokenOwner = address(0);\\n        }\\n        return tokenOwner;\\n    }\\n\\n    function _resolveWildcardTextRecord(\\n        bytes calldata childUtf8Encoded,\\n        bytes calldata parentDnsEncoded, // solhint-disable-line no-unused-vars\\n        string calldata key\\n    ) internal view virtual override returns (string memory) {\\n        // Extract tokenId from child name\\n        (bool valid, uint256 tokenId) = childUtf8Encoded.parseUint256();\\n        // No token, try resolving using name\\n        if (!valid) {\\n            string[] memory urls = new string[](1);\\n            urls[0] = url;\\n\\n            revert OffchainLookup(\\n                address(this),\\n                urls,\\n                childUtf8Encoded,\\n                this.resolveTextByNameCallback.selector,\\n                abi.encode(key)\\n            );\\n        }\\n\\n        return resolveTextRecord(key, tokenId);\\n    }\\n\\n    function resolveTextByNameCallback(\\n        bytes calldata response,\\n        bytes calldata extraData\\n    ) public view returns (bytes memory) {\\n        // Get tokenId from offchain response\\n        uint256 tokenId = abi.decode(response, (uint256));\\n        // Get text key from extraData\\n        string memory key = abi.decode(extraData, (string));\\n        return abi.encode(resolveTextRecord(key, tokenId));\\n    }\\n\\n    function resolveTextRecord(string memory key, uint256 tokenId) internal view returns (string memory) {\\n        // Don't bother returning anything if this tokenId has never been minted\\n        // solhint-disable-next-line no-empty-blocks\\n        try digidaigakuContract.ownerOf(tokenId) {} catch {\\n            return \\\"\\\";\\n        }\\n\\n        if (key.equal(\\\"avatar\\\")) {\\n            // Standard described here:\\n            // https://docs.ens.domains/ens-improvement-proposals/ensip-12-avatar-text-records\\n            return\\n                string.concat(\\\"eip155:1/erc721:\\\", address(digidaigakuContract).toHexString(), \\\"/\\\", tokenId.toString());\\n        } else if (key.equal(\\\"url\\\")) {\\n            string memory url;\\n            try IERC721Metadata(address(digidaigakuContract)).tokenURI(tokenId) returns (string memory _url) {\\n                url = _url;\\n            } catch {\\n                url = \\\"\\\";\\n            }\\n            return url;\\n        }\\n\\n        // unsupported key\\n        return \\\"\\\";\\n    }\\n\\n    function isAuthorised(bytes32 node) internal view virtual override returns (bool) {\\n        address owner = _nodeOwner(node);\\n        address sender = _msgSender();\\n        return sender == owner;\\n    }\\n}\\n\",\"keccak256\":\"0x1fd278785a1048fae225f161bdbfba17b574d1dbc7a85867fc5fb419b6ab1ff3\",\"license\":\"MIT\"},\"contracts/ensWildcardResolvers/IPublicResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport { IABIResolver } from \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IABIResolver.sol\\\";\\nimport { IAddrResolver } from \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddrResolver.sol\\\";\\nimport { IAddressResolver } from \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddressResolver.sol\\\";\\nimport { IContentHashResolver } from \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IContentHashResolver.sol\\\";\\nimport { IDNSRecordResolver } from \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IDNSRecordResolver.sol\\\";\\nimport { IDNSZoneResolver } from \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IDNSZoneResolver.sol\\\";\\nimport { IInterfaceResolver } from \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IInterfaceResolver.sol\\\";\\nimport { INameResolver } from \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/INameResolver.sol\\\";\\nimport { IPubkeyResolver } from \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IPubkeyResolver.sol\\\";\\nimport { ITextResolver } from \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/ITextResolver.sol\\\";\\n\\ninterface IPublicResolver is\\n    IABIResolver,\\n    IAddrResolver,\\n    IAddressResolver,\\n    IContentHashResolver,\\n    IDNSRecordResolver,\\n    IDNSZoneResolver,\\n    IInterfaceResolver,\\n    INameResolver,\\n    IPubkeyResolver,\\n    ITextResolver\\n{\\n    function setABI(bytes32 node, uint256 contentType, bytes calldata data) external;\\n\\n    function setAddr(bytes32 node, address a) external;\\n\\n    function setAddr(bytes32 node, uint256 coinType, bytes memory a) external;\\n\\n    function setContenthash(bytes32 node, bytes calldata hash) external;\\n\\n    function setDNSRecords(bytes32 node, bytes calldata data) external;\\n\\n    function setZonehash(bytes32 node, bytes calldata hash) external;\\n\\n    function setInterface(bytes32 node, bytes4 interfaceID, address implementer) external;\\n\\n    function setName(bytes32 node, string calldata newName) external;\\n\\n    function setPubkey(bytes32 node, bytes32 x, bytes32 y) external;\\n\\n    function setText(bytes32 node, string calldata key, string calldata value) external;\\n}\\n\",\"keccak256\":\"0x17d58433488978ca1b71af036f5f8fb9a382e1f57ae1f58191610e13595b3b88\",\"license\":\"MIT\"},\"contracts/ensWildcardResolvers/PassthroughResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport { ResolverBase } from \\\"@ensdomains/ens-contracts/contracts/resolvers/ResolverBase.sol\\\";\\nimport { ERC165Checker } from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport {\\n    IPublicResolver,\\n    IABIResolver,\\n    IAddrResolver,\\n    IAddressResolver,\\n    IContentHashResolver,\\n    IDNSRecordResolver,\\n    IDNSZoneResolver,\\n    IInterfaceResolver,\\n    INameResolver,\\n    IPubkeyResolver,\\n    ITextResolver\\n} from \\\"./IPublicResolver.sol\\\";\\n\\n/**\\n * @dev PassthroughResolver is an ENS Resolver that forwards all calls to a\\n * fallback Resolver. A custom resolver may inherit this contract\\n * to selectively implement specific record types, deferring all others to the\\n * fallback Resolver (usually whatever public Resolver the ENS app set on behalf\\n * of the user when a name was registered).\\n *\\n * The owner of the ENS name must first configure their PublicResolver to approve\\n * this contract as an authorized manager on the owner's behalf for the setter\\n * methods of PassthroughResolver to work. Note that this delegation is separate\\n * from approvals set with the ENS Registry. ENS's public Registry and its public\\n * Resolvers each have their own, independent concepts of approved managers.\\n */\\nabstract contract PassthroughResolver is IPublicResolver, ResolverBase {\\n    using ERC165Checker for address;\\n\\n    mapping(bytes32 => address) private _passthroughTargets;\\n\\n    function isAuthorised(bytes32) internal view virtual override returns (bool);\\n\\n    function supportsInterface(bytes4 interfaceID) public view virtual override returns (bool) {\\n        return\\n            interfaceID == type(IABIResolver).interfaceId ||\\n            interfaceID == type(IAddrResolver).interfaceId ||\\n            interfaceID == type(IAddressResolver).interfaceId ||\\n            interfaceID == type(IContentHashResolver).interfaceId ||\\n            interfaceID == type(IDNSRecordResolver).interfaceId ||\\n            interfaceID == type(IDNSZoneResolver).interfaceId ||\\n            interfaceID == type(IInterfaceResolver).interfaceId ||\\n            interfaceID == type(INameResolver).interfaceId ||\\n            interfaceID == type(IPubkeyResolver).interfaceId ||\\n            interfaceID == type(ITextResolver).interfaceId ||\\n            super.supportsInterface(interfaceID);\\n    }\\n\\n    function getPassthroughTarget(bytes32 node) public view virtual returns (address resolver) {\\n        return _passthroughTargets[node];\\n    }\\n\\n    function _setPassthroughTarget(bytes32 node, address target) internal {\\n        _passthroughTargets[node] = target;\\n    }\\n\\n    function setABI(bytes32 node, uint256 contentType, bytes calldata data) external virtual authorised(node) {\\n        IPublicResolver(getPassthroughTarget(node)).setABI(node, contentType, data);\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function ABI(\\n        bytes32 node,\\n        uint256 contentTypes\\n    ) external view virtual override returns (uint256 a, bytes memory b) {\\n        address target = getPassthroughTarget(node);\\n        if (target.supportsInterface(type(IABIResolver).interfaceId)) {\\n            return IABIResolver(target).ABI(node, contentTypes);\\n        }\\n    }\\n\\n    function setAddr(bytes32 node, address a) external virtual authorised(node) {\\n        IPublicResolver(getPassthroughTarget(node)).setAddr(node, a);\\n    }\\n\\n    function addr(bytes32 node) public view virtual override returns (address payable result) {\\n        address target = getPassthroughTarget(node);\\n        if (target.supportsInterface(type(IAddrResolver).interfaceId)) {\\n            return IAddrResolver(target).addr(node);\\n        }\\n    }\\n\\n    function setAddr(bytes32 node, uint256 coinType, bytes memory a) public virtual authorised(node) {\\n        IPublicResolver(getPassthroughTarget(node)).setAddr(node, coinType, a);\\n    }\\n\\n    function addr(bytes32 node, uint256 coinType) public view virtual override returns (bytes memory result) {\\n        address target = getPassthroughTarget(node);\\n        if (target.supportsInterface(type(IAddressResolver).interfaceId)) {\\n            return IAddressResolver(target).addr(node, coinType);\\n        }\\n    }\\n\\n    function setContenthash(bytes32 node, bytes calldata hash) external virtual authorised(node) {\\n        IPublicResolver(getPassthroughTarget(node)).setContenthash(node, hash);\\n    }\\n\\n    function contenthash(bytes32 node) external view virtual override returns (bytes memory result) {\\n        address target = getPassthroughTarget(node);\\n        if (target.supportsInterface(type(IContentHashResolver).interfaceId)) {\\n            return IContentHashResolver(target).contenthash(node);\\n        }\\n    }\\n\\n    function setDNSRecords(bytes32 node, bytes calldata data) external virtual authorised(node) {\\n        IPublicResolver(getPassthroughTarget(node)).setDNSRecords(node, data);\\n    }\\n\\n    function dnsRecord(\\n        bytes32 node,\\n        bytes32 name, // solhint-disable-line\\n        uint16 resource\\n    ) public view virtual override returns (bytes memory result) {\\n        address target = getPassthroughTarget(node);\\n        if (target.supportsInterface(type(IDNSRecordResolver).interfaceId)) {\\n            return IDNSRecordResolver(target).dnsRecord(node, name, resource);\\n        }\\n    }\\n\\n    function setZonehash(bytes32 node, bytes calldata hash) external virtual authorised(node) {\\n        IPublicResolver(getPassthroughTarget(node)).setZonehash(node, hash);\\n    }\\n\\n    function zonehash(bytes32 node) external view virtual override returns (bytes memory result) {\\n        address target = getPassthroughTarget(node);\\n        if (target.supportsInterface(type(IDNSZoneResolver).interfaceId)) {\\n            return IDNSZoneResolver(target).zonehash(node);\\n        }\\n    }\\n\\n    function setInterface(bytes32 node, bytes4 interfaceID, address implementer) external virtual authorised(node) {\\n        IPublicResolver(getPassthroughTarget(node)).setInterface(node, interfaceID, implementer);\\n    }\\n\\n    function interfaceImplementer(\\n        bytes32 node,\\n        bytes4 interfaceID\\n    ) external view virtual override returns (address result) {\\n        address target = getPassthroughTarget(node);\\n        if (target.supportsInterface(type(IInterfaceResolver).interfaceId)) {\\n            return IInterfaceResolver(target).interfaceImplementer(node, interfaceID);\\n        }\\n    }\\n\\n    function setName(bytes32 node, string calldata newName) external virtual authorised(node) {\\n        IPublicResolver(getPassthroughTarget(node)).setName(node, newName);\\n    }\\n\\n    function name(bytes32 node) external view virtual override returns (string memory result) {\\n        address target = getPassthroughTarget(node);\\n        if (target.supportsInterface(type(INameResolver).interfaceId)) {\\n            return INameResolver(target).name(node);\\n        }\\n    }\\n\\n    function setPubkey(bytes32 node, bytes32 x, bytes32 y) external virtual authorised(node) {\\n        IPublicResolver(getPassthroughTarget(node)).setPubkey(node, x, y);\\n    }\\n\\n    function pubkey(bytes32 node) external view virtual override returns (bytes32 x, bytes32 y) {\\n        address target = getPassthroughTarget(node);\\n        if (target.supportsInterface(type(IPubkeyResolver).interfaceId)) {\\n            return IPubkeyResolver(target).pubkey(node);\\n        }\\n    }\\n\\n    function setText(bytes32 node, string calldata key, string calldata value) external virtual authorised(node) {\\n        IPublicResolver(getPassthroughTarget(node)).setText(node, key, value);\\n    }\\n\\n    function text(bytes32 node, string calldata key) public view virtual override returns (string memory result) {\\n        address target = getPassthroughTarget(node);\\n        if (target.supportsInterface(type(ITextResolver).interfaceId)) {\\n            return ITextResolver(target).text(node, key);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe6d7da7d9dcd5d6fae157e45d73357de9c9d44ffc7b1bf2d9c44ce6eb59cdc56\",\"license\":\"MIT\"},\"contracts/ensWildcardResolvers/WildcardResolverBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport { ENS } from \\\"@ensdomains/ens-contracts/contracts/registry/ENS.sol\\\";\\nimport { INameWrapper } from \\\"@ensdomains/ens-contracts/contracts/wrapper/INameWrapper.sol\\\";\\nimport { IExtendedResolver } from \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IExtendedResolver.sol\\\";\\nimport { ERC165Checker } from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport { Context } from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport { ENSParentName } from \\\"../libraries/ENSParentName.sol\\\";\\nimport { ENSByteUtils } from \\\"../libraries/ENSByteUtils.sol\\\";\\nimport { BytesLib } from \\\"../libraries/BytesLib.sol\\\";\\n\\nimport { PassthroughResolver } from \\\"./PassthroughResolver.sol\\\";\\n\\nabstract contract WildcardResolverBase is IExtendedResolver, Context, PassthroughResolver {\\n    using ENSByteUtils for address;\\n    using ENSByteUtils for bytes;\\n    using ENSParentName for bytes;\\n    using ERC165Checker for address;\\n\\n    error RecordTypeNotSupported();\\n    error InvalidOperation();\\n    error OffchainLookup(address sender, string[] urls, bytes callData, bytes4 callbackFunction, bytes extraData);\\n\\n    bytes4 public constant RESOLVER_SIGNATURE__ADDR = bytes4(keccak256(bytes(\\\"addr(bytes32)\\\")));\\n    bytes4 public constant RESOLVER_SIGNATURE__ADDR_WITH_COINTYPE = bytes4(keccak256(bytes(\\\"addr(bytes32,uint256)\\\")));\\n    bytes4 public constant RESOLVER_SIGNATURE__TEXT = bytes4(keccak256(bytes(\\\"text(bytes32,string)\\\")));\\n    uint256 private constant COIN_TYPE_ETH = 60;\\n\\n    ENS public immutable ensRegistry;\\n    INameWrapper public immutable ensNameWrapper;\\n\\n    // dnsEncode(parentName) -> namehash(parentName)\\n    // ex: \\\"test.eth\\\" would be mapped as\\n    // 0x04746573740365746800 -> 0xeb4f647bea6caa36333c816d7b46fdcb05f9466ecacc140ea8c66faf15b3d9f1\\n    mapping(bytes => bytes32) internal parentEnsNodes;\\n\\n    constructor(ENS _ensRegistry, INameWrapper _ensNameWrapper) {\\n        ensRegistry = _ensRegistry;\\n        ensNameWrapper = _ensNameWrapper;\\n    }\\n\\n    function resolve(\\n        bytes calldata dnsEncodedName,\\n        bytes calldata resolverCalldata\\n    ) public view virtual override returns (bytes memory) {\\n        bytes4 resolverSignature = bytes4(resolverCalldata[:4]);\\n\\n        if (resolverSignature == RESOLVER_SIGNATURE__ADDR) {\\n            address ethAddr = _resolveEthAddr(dnsEncodedName, resolverCalldata);\\n            return abi.encode(ethAddr);\\n        } else if (resolverSignature == RESOLVER_SIGNATURE__ADDR_WITH_COINTYPE) {\\n            (, uint256 coinType) = abi.decode(resolverCalldata[4:], (bytes32, uint256));\\n            if (coinType == COIN_TYPE_ETH) {\\n                address ethAddr = _resolveEthAddr(dnsEncodedName, resolverCalldata);\\n                return abi.encode(ethAddr.toBytes());\\n            } else {\\n                // Unsupported COIN_TYPE\\n                bytes memory emptyBytes;\\n                return abi.encode(emptyBytes);\\n            }\\n        } else if (resolverSignature == RESOLVER_SIGNATURE__TEXT) {\\n            string calldata key = _parseKeyFromCalldata(resolverCalldata);\\n            string memory result = _resolveTextRecord(dnsEncodedName, key, resolverCalldata);\\n            return abi.encode(result);\\n        }\\n\\n        revert RecordTypeNotSupported();\\n    }\\n\\n    function supportsInterface(bytes4 interfaceID) public view virtual override(PassthroughResolver) returns (bool) {\\n        return interfaceID == type(IExtendedResolver).interfaceId || PassthroughResolver.supportsInterface(interfaceID);\\n    }\\n\\n    function _resolveWildcardEthAddr(\\n        bytes calldata childUtf8Encoded,\\n        bytes calldata parentDnsEncoded\\n    ) internal view virtual returns (address);\\n\\n    function _resolveWildcardTextRecord(\\n        bytes calldata childUtf8Encoded,\\n        bytes calldata parentDnsEncoded,\\n        string calldata key\\n    ) internal view virtual returns (string memory);\\n\\n    function _resolveEthAddr(\\n        bytes calldata dnsEncodedName,\\n        bytes calldata resolverCalldata\\n    ) private view returns (address result) {\\n        // Check if the caller is asking for a record on the parent name itself (non-wildcard query)\\n        (bool isParentName, bytes32 ensNode) = _isParentName(dnsEncodedName);\\n\\n        if (isParentName) {\\n            // Try to resolve the parent name using the two `addr()` resolver variants\\n            result = addr(ensNode);\\n            if (result == address(0)) {\\n                bytes memory addrBytes = addr(ensNode, COIN_TYPE_ETH);\\n                if (addrBytes.length != 0) {\\n                    result = addrBytes.toAddress();\\n                }\\n            }\\n        } else {\\n            // Caller has issued a wildcard query. Defer to the concrete implementation of this contract\\n            (bytes calldata childUtf8Encoded, bytes calldata parentDnsEncoded) = dnsEncodedName.splitParentChildNames();\\n            ensNode = parentEnsNodes[parentDnsEncoded];\\n            result = _resolveWildcardEthAddr(childUtf8Encoded, parentDnsEncoded);\\n        }\\n\\n        // No luck. If our fallback resolver also happens to implement the `resolve()` wildcard standard then we can try\\n        // that as a final option\\n        address passthrough = getPassthroughTarget(ensNode);\\n        if (result == address(0) && passthrough.supportsInterface(type(IExtendedResolver).interfaceId)) {\\n            try IExtendedResolver(passthrough).resolve(dnsEncodedName, resolverCalldata) returns (\\n                bytes memory encodedResult\\n            ) {\\n                (result) = abi.decode(encodedResult, (address));\\n                // Catch OffchainLookup and override sender param\\n            } catch (bytes memory err) {\\n                // The first 4 bytes of the ABI encoded error represent the error's signature\\n                // Slice those 4 bytes and get the data from the OffchainLookup error\\n                (\\n                    address sender,\\n                    string[] memory urls,\\n                    bytes memory callData,\\n                    bytes4 callbackFunction,\\n                    bytes memory extraData\\n                ) = abi.decode(BytesLib.slice(err, 4, err.length - 4), (address, string[], bytes, bytes4, bytes));\\n                revert OffchainLookup(\\n                    address(this),\\n                    urls,\\n                    callData,\\n                    this.resolveCallback.selector,\\n                    abi.encode(sender, callbackFunction, extraData)\\n                );\\n            }\\n        }\\n    }\\n\\n    // Callback to contract that initially reverted OffchainLookup\\n    function resolveCallback(bytes calldata response, bytes calldata extraData) public returns (bytes memory) {\\n        (address inner, bytes4 innerCallbackFunction, bytes memory innerExtraData) = abi.decode(\\n            extraData,\\n            (address, bytes4, bytes)\\n        );\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory data) = inner.call(\\n            abi.encodeWithSelector(innerCallbackFunction, response, innerExtraData)\\n        );\\n        if (success) {\\n            return abi.decode(data, (bytes));\\n        }\\n        revert InvalidOperation();\\n    }\\n\\n    function _resolveTextRecord(\\n        bytes calldata dnsEncodedName,\\n        string calldata key,\\n        bytes calldata resolverCalldata\\n    ) private view returns (string memory result) {\\n        // Check if the caller is asking for a record on the parent name itself (non-wildcard query)\\n        (bool isParentName, bytes32 ensNode) = _isParentName(dnsEncodedName);\\n        if (isParentName) {\\n            result = text(ensNode, key);\\n        } else {\\n            // Caller has issued a wildcard query. Defer to the concrete implementation of this contract\\n            (bytes calldata childUtf8Encoded, bytes calldata parentDnsEncoded) = dnsEncodedName.splitParentChildNames();\\n            ensNode = parentEnsNodes[parentDnsEncoded];\\n            result = _resolveWildcardTextRecord(childUtf8Encoded, parentDnsEncoded, key);\\n        }\\n\\n        // No luck. If our fallback resolver also happens to implement the `resolve()` wildcard standard then we can try\\n        // that as a final option\\n        address passthrough = getPassthroughTarget(ensNode);\\n        if (bytes(result).length == 0 && passthrough.supportsInterface(type(IExtendedResolver).interfaceId)) {\\n            try IExtendedResolver(passthrough).resolve(dnsEncodedName, resolverCalldata) returns (\\n                bytes memory encodedResult\\n            ) {\\n                (result) = abi.decode(encodedResult, (string));\\n                // Catch OffchainLookup and override sender param\\n            } catch (bytes memory err) {\\n                // The first 4 bytes of the ABI encoded error represent the error's signature\\n                // Slice those 4 bytes and get the data from the OffchainLookup error\\n                (\\n                    address sender,\\n                    string[] memory urls,\\n                    bytes memory callData,\\n                    bytes4 callbackFunction,\\n                    bytes memory extraData\\n                ) = abi.decode(BytesLib.slice(err, 4, err.length - 4), (address, string[], bytes, bytes4, bytes));\\n                revert OffchainLookup(\\n                    address(this),\\n                    urls,\\n                    callData,\\n                    this.resolveCallback.selector,\\n                    abi.encode(sender, callbackFunction, extraData)\\n                );\\n            }\\n        }\\n    }\\n\\n    function _parseKeyFromCalldata(bytes calldata resolverCalldata) private pure returns (string calldata key) {\\n        // ENS resolvers expect that the `key` for text queries is passed in via calldata.\\n        //\\n        // Until this is implemented in Solidity, we have to hand-pick the string out\\n        // of the calldata ourself: https://github.com/ethereum/solidity/issues/13518\\n        //\\n        // Here's the cleaner version once the above is implemented:\\n        //    (, string calldata key) = abi.decode(resolverCalldata[4:], (bytes32, string calldata));\\n        //\\n        // Reminder: the text resolver signature is `text(bytes32 ensNode, string [calldata] key)`\\n        //\\n        // Offset math:\\n        //    - 4 bytes for the function selector for `text(bytes32,string)`\\n        //    - 32 bytes for the `ensNode` as bytes32\\n        //    - 32 bytes to encode the offset to start of data part of the dynamic string parameter\\n        //         (see https://docs.soliditylang.org/en/v0.8.20/abi-spec.html#use-of-dynamic-types)\\n        //    - 32 bytes for the string's length: uint256(len(bytes(key_as_utf8_string)))\\n        //    - Remainder is the UTF8 encoding of the key, right-padded to a multiple of 32 bytes\\n        uint256 keyLengthOffset = 4 + 32 + 32;\\n        uint256 keyOffset = keyLengthOffset + 32;\\n\\n        uint256 keyLength = abi.decode(resolverCalldata[keyLengthOffset:], (uint256));\\n\\n        key = string(resolverCalldata[keyOffset:keyOffset + keyLength]);\\n    }\\n\\n    function _isParentName(bytes calldata dnsEncodedName) internal view returns (bool, bytes32 ensNode) {\\n        ensNode = parentEnsNodes[dnsEncodedName];\\n        return (ensNode != bytes32(0), ensNode);\\n    }\\n\\n    function _nodeOwner(bytes32 node) internal view returns (address) {\\n        address owner = ensRegistry.owner(node);\\n        if (owner == address(ensNameWrapper)) {\\n            owner = ensNameWrapper.ownerOf(uint256(node));\\n        }\\n        return owner;\\n    }\\n}\\n\",\"keccak256\":\"0x81ec34a77e04f2f9d9095620bccfd91e063b6172e79ff7cae44ede09904fad02\",\"license\":\"MIT\"},\"contracts/libraries/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// https://gist.github.com/rmeissner/76d6345796909ee41fb9f36fdaa4d15f\\n\\npragma solidity ^0.8.4;\\n\\nlibrary BytesLib {\\n    function slice(bytes memory _bytes, uint256 _start, uint256 _length) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\"); // solhint-disable-line custom-errors\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\"); // solhint-disable-line custom-errors\\n\\n        bytes memory tempBytes;\\n\\n        // Check length is 0. `iszero` return 1 for `true` and 0 for `false`.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // Calculate length mod 32 to handle slices that are not a multiple of 32 in size.\\n                let lengthmod := and(_length, 31)\\n\\n                // tempBytes will have the following format in memory: <length><data>\\n                // When copying data we will offset the start forward to avoid allocating additional memory\\n                // Therefore part of the length area will be written, but this will be overwritten later anyways.\\n                // In case no offset is require, the start is set to the data region (0x20 from the tempBytes)\\n                // mc will be used to keep track where to copy the data to.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // Same logic as for mc is applied & additionally the start offset specified for the method is added\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    // increase `mc` and `cc` to read the next word from memory\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // Copy the data from source (cc location) to the slice data (mc location)\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                // Store the length of the slice. This will overwrite any partial data that\\n                // was copied when having slices that are not a multiple of 32.\\n                mstore(tempBytes, _length)\\n\\n                // update free-memory pointer\\n                // allocating the array padded to 32 bytes like the compiler does now\\n                // To set the used memory as a multiple of 32, add 31 to the actual memory usage (mc)\\n                // and remove the modulo 32 (the `and` with `not(31)`)\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            // if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                // zero out the 32 bytes slice we are about to return\\n                // we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                // update free-memory pointer\\n                // tempBytes uses 32 bytes in memory (even when empty) for the length.\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n}\\n\",\"keccak256\":\"0x9446cc6b3993bebfcc92ee2fd824cd39f6d08c17a1858140385103d96e5a6911\",\"license\":\"MIT\"},\"contracts/libraries/ENSByteUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line max-line-length\\n// Source: https://github.com/ensdomains/ens-contracts/blob/340a6d05cd00d078ae40edbc58c139eb7048189a/contracts/resolvers/profiles/AddrResolver.sol\\n\\npragma solidity ^0.8.4;\\n\\n/*\\n * @dev Converts addresses to and from their byte-string representations\\n */\\nlibrary ENSByteUtils {\\n    // solhint-disable\\n    function toAddress(bytes memory b) internal pure returns (address payable a) {\\n        require(b.length == 20);\\n        assembly {\\n            a := div(mload(add(b, 32)), exp(256, 12)) // cspell:disable-line\\n        }\\n    }\\n\\n    function toBytes(address a) internal pure returns (bytes memory b) {\\n        b = new bytes(20);\\n        assembly {\\n            mstore(add(b, 32), mul(a, exp(256, 12))) // cspell:disable-line\\n        }\\n    }\\n    // solhint-enable\\n}\\n\",\"keccak256\":\"0xfc78a02027a6d31984228748a2555d04ead844e7f883dd8b334330d0150d0940\",\"license\":\"MIT\"},\"contracts/libraries/ENSParentName.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nlibrary ENSParentName {\\n    /**\\n     * @dev Finds the parent name of a given ENS name, or the empty string if there is no parent.\\n     *      Assumes the given name is already a well-formed ENS name, and does not check for invalid input.\\n     * @param name A DNS-encoded name, e.g. 0x03666f6f03626172047465737400 for the name `foo.bar.test`\\n     * @return child The UTF8-encoded child label, e.g. 0x666f6f for `foo`\\n     * @return parent The DNS-encoded parent, e.g. 03626172047465737400 for `bar.test`\\n     */\\n    function splitParentChildNames(\\n        bytes calldata name\\n    ) internal pure returns (bytes calldata child, bytes calldata parent) {\\n        uint8 labelLength = uint8(name[0]);\\n        return (name[1:labelLength + 1], name[labelLength + 1:]);\\n    }\\n}\\n\",\"keccak256\":\"0x8dc36dc3f1ff0ddc7a73a7f9c410999571fc9c4ea0157b294993f4f215ba2b5f\",\"license\":\"MIT\"},\"contracts/libraries/StringParsing.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nlibrary StringParsing {\\n    /**\\n     * @dev Parses a UTF8 string of digits representing an unsigned integer.\\n     */\\n    function parseUint256(bytes calldata b) internal pure returns (bool valid, uint256 parsed) {\\n        uint256 i;\\n        parsed = 0;\\n        for (i = 0; i < b.length; i++) {\\n            if (b[i] < bytes1(0x30) || b[i] > bytes1(0x39)) {\\n                return (false, 0);\\n            }\\n            uint256 c = uint(uint8(b[i])) - 48;\\n            parsed = parsed * 10 + c;\\n        }\\n        return (true, parsed);\\n    }\\n}\\n\",\"keccak256\":\"0xef8359450817d6057bbfaf54090d63e062d867f83056d448be3fcb11208511bc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162003e1238038062003e1283398101604081905262000034916200021d565b6001600160a01b03858116608081905290851660a0526040516302571be360e01b81527f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2600482015286918591600091906302571be390602401602060405180830381865afa158015620000ac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000d2919062000349565b604051630f41a04d60e11b81526001600160a01b03848116600483015291925090821690631e83409a906024016020604051808303816000875af11580156200011f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000145919062000370565b50505050620001636200015d6200019860201b60201c565b6200019c565b600580546001600160a01b0319166001600160a01b03841617905560046200018c828262000419565b505050505050620004e5565b3390565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b03811681146200020457600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b600080600080600060a086880312156200023657600080fd5b85516200024381620001ee565b809550506020808701516200025881620001ee565b60408801519095506200026b81620001ee565b60608801519094506200027e81620001ee565b60808801519093506001600160401b03808211156200029c57600080fd5b818901915089601f830112620002b157600080fd5b815181811115620002c657620002c662000207565b604051601f8201601f19908116603f01168101908382118183101715620002f157620002f162000207565b816040528281528c868487010111156200030a57600080fd5b600093505b828410156200032e57848401860151818501870152928501926200030f565b60008684830101528096505050505050509295509295909350565b6000602082840312156200035c57600080fd5b81516200036981620001ee565b9392505050565b6000602082840312156200038357600080fd5b5051919050565b600181811c908216806200039f57607f821691505b602082108103620003c057634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200041457600081815260208120601f850160051c81016020861015620003ef5750805b601f850160051c820191505b818110156200041057828155600101620003fb565b5050505b505050565b81516001600160401b0381111562000435576200043562000207565b6200044d816200044684546200038a565b84620003c6565b602080601f8311600181146200048557600084156200046c5750858301515b600019600386901b1c1916600185901b17855562000410565b600085815260208120601f198616915b82811015620004b65788860151825594840194600190910190840162000495565b5085821015620004d55787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a0516138f262000520600039600081816104700152818161213d015261218a01526000818161055201526120ce01526138f26000f3fe608060405234801561001057600080fd5b50600436106102ad5760003560e01c8063691f34311161017b578063bacfdbe2116100d8578063d700ff331161008c578063ef47ee6211610071578063ef47ee62146106ae578063f1cb7e061461070a578063f2fde38b1461071d57600080fd5b8063d700ff3314610658578063e59d895d1461069b57600080fd5b8063c8690233116100bd578063c86902331461060a578063ce3decdc14610632578063d5fa2b001461064557600080fd5b8063bacfdbe2146105e4578063bc1c58d1146105f757600080fd5b80638da5cb5b1161012f5780639b886dd9116101145780639b886dd9146105ab578063a8fa5682146105be578063b4a85801146105d157600080fd5b80638da5cb5b146105875780639061b9231461059857600080fd5b80637737221311610160578063773722131461053a5780637d73b2311461054d5780638b95dd711461057457600080fd5b8063691f34311461051f578063715018a61461053257600080fd5b80632f9a1767116102295780635048cea0116101dd57806359d1d43c116101c257806359d1d43c146104e65780635c98042b146104f9578063623195b01461050c57600080fd5b80635048cea0146104925780635600f04f146104de57600080fd5b80633603d7581161020e5780633603d758146104455780633b3b57de1461045857806347c5da981461046b57600080fd5b80632f9a176714610412578063304e6ade1461043257600080fd5b8063124a319c11610280578063252498a211610265578063252498a21461037757806329cd62ea1461038a5780632d1705391461039d57600080fd5b8063124a319c146103435780632203ab561461035657600080fd5b806301ffc9a7146102b257806302001702146102da5780630af179d71461031b57806310f13a8c14610330575b600080fd5b6102c56102c0366004612b67565b610730565b60405190151581526020015b60405180910390f35b6103036102e8366004612b84565b6000908152600160205260409020546001600160a01b031690565b6040516001600160a01b0390911681526020016102d1565b61032e610329366004612bdf565b61075b565b005b61032e61033e366004612c2b565b6107ed565b610303610351366004612ca5565b610885565b610369610364366004612cd5565b61093b565b6040516102d1929190612d47565b61032e610385366004612e0d565b6109f3565b61032e610398366004612e56565b610a0b565b60408051808201909152601481527f7465787428627974657333322c737472696e67290000000000000000000000006020909101526103f97f59d1d43c37707a29830be065fcabd05d6e536466c5159d2e46cb27bda8e98d6581565b6040516001600160e01b031990911681526020016102d1565b610425610420366004612e82565b610a6a565b6040516102d19190612eee565b61032e610440366004612bdf565b610ab5565b61032e610453366004612b84565b610b0f565b610303610466366004612b84565b610bb2565b6103037f000000000000000000000000000000000000000000000000000000000000000081565b60408051808201909152600d81526c6164647228627974657333322960981b6020909101526103f97f3b3b57de213591bb50e06975ea011e4c8c4b3e6de4009450c1a9e55f66e4bfa481565b610425610c56565b6104256104f4366004612bdf565b610ce4565b610425610507366004612b84565b610d9a565b61032e61051a366004612f01565b610e39565b61042561052d366004612b84565b610ece565b61032e610f2c565b61032e610548366004612bdf565b610f40565b6103037f000000000000000000000000000000000000000000000000000000000000000081565b61032e610582366004612f68565b610f9a565b6003546001600160a01b0316610303565b6104256105a6366004612e82565b610ff4565b600554610303906001600160a01b031681565b6104256105cc366004612fb8565b611210565b6104256105df366004612e82565b61127f565b6104256105f2366004612e82565b611393565b610425610605366004612b84565b6113ea565b61061d610618366004612b84565b611448565b604080519283526020830191909152016102d1565b61032e610640366004612bdf565b6114f0565b61032e61065336600461300d565b61154a565b610682610666366004612b84565b60006020819052908152604090205467ffffffffffffffff1681565b60405167ffffffffffffffff90911681526020016102d1565b61032e6106a9366004613032565b6115dd565b60408051808201909152601581527f6164647228627974657333322c75696e743235362900000000000000000000006020909101526103f97ff1cb7e06eed69ff6b1133c27a055176e5b0f641e8f94df2da7711eae8558f7b181565b610425610718366004612cd5565b611646565b61032e61072b366004613069565b6116eb565b60006001600160e01b03198216639061b92360e01b1480610755575061075582611780565b92915050565b8261076581611898565b61076e57600080fd5b6000848152600160205260409020546001600160a01b03166001600160a01b0316630af179d78585856040518463ffffffff1660e01b81526004016107b5939291906130af565b600060405180830381600087803b1580156107cf57600080fd5b505af11580156107e3573d6000803e3d6000fd5b5050505050505050565b846107f781611898565b61080057600080fd5b6000868152600160205260409020546001600160a01b03166001600160a01b03166310f13a8c87878787876040518663ffffffff1660e01b815260040161084b9594939291906130d2565b600060405180830381600087803b15801561086557600080fd5b505af1158015610879573d6000803e3d6000fd5b50505050505050505050565b6000828152600160205260408120546001600160a01b03166108ae816304928c6760e21b6118b6565b15610934576040516304928c6760e21b8152600481018590526001600160e01b0319841660248201526001600160a01b0382169063124a319c90604401602060405180830381865afa158015610908573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092c919061310b565b915050610755565b5092915050565b6000828152600160205260408120546060906001600160a01b031661096781631101d5ab60e11b6118b6565b156109ea57604051631101d5ab60e11b815260048101869052602481018590526001600160a01b03821690632203ab5690604401600060405180830381865afa1580156109b8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109e0919081019061316d565b92509250506109ec565b505b9250929050565b6109fb6118d2565b6004610a078282613237565b5050565b82610a1581611898565b610a1e57600080fd5b600084815260016020526040908190205490516314e6b17560e11b81526004810186905260248101859052604481018490526001600160a01b03909116906329cd62ea906064016107b5565b60606000610a7a85870187612b84565b9050610a858161192c565b604080516001600160a01b039092166020830152016040516020818303038152906040529150505b949350505050565b82610abf81611898565b610ac857600080fd5b6000848152600160205260409020546001600160a01b03166001600160a01b031663304e6ade8585856040518463ffffffff1660e01b81526004016107b5939291906130af565b80610b1981611898565b610b2257600080fd5b6000828152602081905260408120805467ffffffffffffffff1691610b468361330d565b82546101009290920a67ffffffffffffffff818102199093169183160217909155600084815260208181526040918290205491519190921681528492507fc6621ccb8f3f5a04bb6502154b2caf6adf5983fe76dfef1cfc9c42e3579db444910160405180910390a25050565b6000818152600160205260408120546001600160a01b0316610bdb81631d9dabef60e11b6118b6565b15610c5057604051631d9dabef60e11b8152600481018490526001600160a01b03821690633b3b57de90602401602060405180830381865afa158015610c25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c49919061310b565b9392505050565b50919050565b60048054610c63906131b4565b80601f0160208091040260200160405190810160405280929190818152602001828054610c8f906131b4565b8015610cdc5780601f10610cb157610100808354040283529160200191610cdc565b820191906000526020600020905b815481529060010190602001808311610cbf57829003601f168201915b505050505081565b6000838152600160205260409020546060906001600160a01b0316610d1081631674750f60e21b6118b6565b15610d9257604051631674750f60e21b81526001600160a01b038216906359d1d43c90610d45908890889088906004016130af565b600060405180830381865afa158015610d62573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d8a9190810190613334565b915050610c49565b509392505050565b6000818152600160205260409020546060906001600160a01b0316610dc681635c98042b60e01b6118b6565b15610c5057604051635c98042b60e01b8152600481018490526001600160a01b03821690635c98042b906024015b600060405180830381865afa158015610e11573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c499190810190613334565b83610e4381611898565b610e4c57600080fd5b6000858152600160205260409020546001600160a01b03166001600160a01b031663623195b0868686866040518563ffffffff1660e01b8152600401610e959493929190613369565b600060405180830381600087803b158015610eaf57600080fd5b505af1158015610ec3573d6000803e3d6000fd5b505050505050505050565b6000818152600160205260409020546060906001600160a01b0316610efa8163691f343160e01b6118b6565b15610c505760405163691f343160e01b8152600481018490526001600160a01b0382169063691f343190602401610df4565b610f346118d2565b610f3e60006119a2565b565b82610f4a81611898565b610f5357600080fd5b6000848152600160205260409020546001600160a01b03166001600160a01b031663773722138585856040518463ffffffff1660e01b81526004016107b5939291906130af565b82610fa481611898565b610fad57600080fd5b6000848152600160205260409020546001600160a01b03166001600160a01b0316638b95dd718585856040518463ffffffff1660e01b81526004016107b593929190613393565b6060600061100560048285876133b2565b61100e916133dc565b60408051808201909152600d81526c6164647228627974657333322960981b6020909101529050636262541160e11b6001600160e01b031982160161108a57600061105b87878787611a0c565b604080516001600160a01b03831660208201529192500160405160208183030381529060405292505050610aad565b60408051808201909152601581527f6164647228627974657333322c75696e7432353629000000000000000000000060209091015263071a40fd60e11b6001600160e01b031982160161115c5760006110e684600481886133b2565b8101906110f39190612cd5565b915050603c810361114957600061110c88888888611a0c565b9050611120816001600160a01b0316611c51565b6040516020016111309190612eee565b6040516020818303038152906040529350505050610aad565b6060806040516020016111309190612eee565b60408051808201909152601481527f7465787428627974657333322c737472696e672900000000000000000000000060209091015263298b8af160e21b6001600160e01b03198216016111f7573660006111b68686611c8a565b9150915060006111ca898985858b8b611ce2565b9050806040516020016111dd9190612eee565b604051602081830303815290604052945050505050610aad565b60405163dfbcb35160e01b815260040160405180910390fd5b6000838152600160205260409020546060906001600160a01b031661123c8163547d2b4160e11b6118b6565b15610d925760405163547d2b4160e11b8152600481018690526024810185905261ffff841660448201526001600160a01b0382169063a8fa568290606401610d45565b6060600080806112918587018761340c565b925092509250600080846001600160a01b0316848b8b866040516024016112ba93929190613458565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990941693909317909252905161130d919061347e565b6000604051808303816000865af19150503d806000811461134a576040519150601f19603f3d011682016040523d82523d6000602084013e61134f565b606091505b5091509150811561137a578080602001905181019061136e9190613334565b95505050505050610aad565b604051631cc6a69960e11b815260040160405180910390fd5b606060006113a385870187612b84565b905060006113b384860186612e0d565b90506113bf8183611e65565b6040516020016113cf9190612eee565b60405160208183030381529060405292505050949350505050565b6000818152600160205260409020546060906001600160a01b03166114168163bc1c58d160e01b6118b6565b15610c505760405163bc1c58d160e01b8152600481018490526001600160a01b0382169063bc1c58d190602401610df4565b60008181526001602052604081205481906001600160a01b03166114738163c869023360e01b6118b6565b156114ea5760405163c869023360e01b8152600481018590526001600160a01b0382169063c8690233906024016040805180830381865afa1580156114bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e0919061349a565b9250925050915091565b50915091565b826114fa81611898565b61150357600080fd5b6000848152600160205260409020546001600160a01b03166001600160a01b031663ce3decdc8585856040518463ffffffff1660e01b81526004016107b5939291906130af565b8161155481611898565b61155d57600080fd5b6000838152600160205260409020546001600160a01b031660405162d5fa2b60e81b8152600481018590526001600160a01b038481166024830152919091169063d5fa2b0090604401600060405180830381600087803b1580156115c057600080fd5b505af11580156115d4573d6000803e3d6000fd5b50505050505050565b826115e781611898565b6115f057600080fd5b6000848152600160205260409081902054905163e59d895d60e01b8152600481018690526001600160e01b0319851660248201526001600160a01b0384811660448301529091169063e59d895d906064016107b5565b6000828152600160205260409020546060906001600160a01b0316611672816378e5bf0360e11b6118b6565b15610934576040516378e5bf0360e11b815260048101859052602481018490526001600160a01b0382169063f1cb7e0690604401600060405180830381865afa1580156116c3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261092c9190810190613334565b6116f36118d2565b6001600160a01b0381166117745760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61177d816119a2565b50565b60006001600160e01b03198216631101d5ab60e11b14806117b157506001600160e01b03198216631d9dabef60e11b145b806117cc57506001600160e01b031982166378e5bf0360e11b145b806117e757506001600160e01b0319821663bc1c58d160e01b145b8061180257506001600160e01b0319821663547d2b4160e11b145b8061181d57506001600160e01b03198216635c98042b60e01b145b8061183857506001600160e01b031982166304928c6760e21b145b8061185357506001600160e01b0319821663691f343160e01b145b8061186e57506001600160e01b0319821663c869023360e01b145b8061188957506001600160e01b03198216631674750f60e21b145b80610755575061075582612076565b6000806118a4836120ab565b6001600160a01b031633149392505050565b60006118c1836121d9565b8015610c495750610c49838361220c565b6003546001600160a01b03163314610f3e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161176b565b6005546040516331a9108f60e11b81526004810183905260009182916001600160a01b0390911690636352211e90602401602060405180830381865afa925050508015611996575060408051601f3d908101601f191682019092526119939181019061310b565b60015b610c4957506000610755565b600380546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000806000611a1b87876122aa565b915091508115611a6957611a2e81610bb2565b92506001600160a01b038316611a64576000611a4b82603c611646565b90508051600014611a6257611a5f816122dd565b93505b505b611ab7565b366000366000611a798b8b612305565b935093509350935060028282604051611a939291906134be565b9081526020016040518091039020549450611ab084848484612379565b9650505050505b6000818152600160205260408120546001600160a01b031690506001600160a01b038416158015611afd5750611afd6001600160a01b038216639061b92360e01b6118b6565b15611c4657604051639061b92360e01b81526001600160a01b03821690639061b92390611b34908b908b908b908b906004016134ce565b600060405180830381865afa925050508015611b7257506040513d6000823e601f3d908101601f19168201604052611b6f9190810190613334565b60015b611c2e573d808015611ba0576040519150601f19603f3d011682016040523d82523d6000602084013e611ba5565b606091505b506000806000806000611bc6866004808951611bc191906134f5565b61249b565b806020019051810190611bd99190613518565b9450945094509450945030848463b4a8580160e01b888686604051602001611c039392919061364b565b60408051601f1981840301815290829052630556f18360e41b825261176b95949392916004016136d1565b80806020019051810190611c42919061310b565b9450505b505050949350505050565b6040805160148082528183019092526060916020820181803683375050506c010000000000000000000000009290920260208301525090565b366000604481611c9b826020613729565b90506000611cab8684818a6133b2565b810190611cb89190612b84565b9050868287611cc78483613729565b92611cd4939291906133b2565b945094505050509250929050565b6060600080611cf189896122aa565b915091508115611d0d57611d06818888610ce4565b9250611d5d565b366000366000611d1d8d8d612305565b935093509350935060028282604051611d379291906134be565b9081526020016040518091039020549450611d56848484848f8f6125c3565b9650505050505b6000818152600160205260408120546001600160a01b0316905083516000148015611d9d5750611d9d6001600160a01b038216639061b92360e01b6118b6565b15611e5857604051639061b92360e01b81526001600160a01b03821690639061b92390611dd4908d908d908b908b906004016134ce565b600060405180830381865afa925050508015611e1257506040513d6000823e601f3d908101601f19168201604052611e0f9190810190613334565b60015b611e40573d808015611ba0576040519150601f19603f3d011682016040523d82523d6000602084013e611ba5565b80806020019051810190611e549190613334565b9450505b5050509695505050505050565b6005546040516331a9108f60e11b8152600481018390526060916001600160a01b031690636352211e90602401602060405180830381865afa925050508015611ecb575060408051601f3d908101601f19168201909252611ec89181019061310b565b60015b611ee45750604080516020810190915260008152610755565b5060408051808201909152600681527f61766174617200000000000000000000000000000000000000000000000000006020918201528351908401207fd1f86c93d831119ad98fe983e643a7431e4ac992e3ead6e3007f4dd1adf6634303611f8b57600554611f5b906001600160a01b031661274b565b611f6483612761565b604051602001611f7592919061373c565b6040516020818303038152906040529050610755565b6040805180820190915260038152621d5c9b60ea1b6020918201528351908401207fb68b5f5089998f2978a1dcc681e8ef27962b90d5c26c4c0b9c1945814ffa5ef0036120605760055460405163c87b56dd60e01b8152600481018490526060916001600160a01b03169063c87b56dd90602401600060405180830381865afa92505050801561203d57506040513d6000823e601f3d908101601f1916820160405261203a9190810190613334565b60015b6120565750604080516020810190915260008152612059565b90505b9050610755565b5060408051602081019091526000815292915050565b60006001600160e01b0319821663d700ff3360e01b148061075557506301ffc9a760e01b6001600160e01b0319831614610755565b6040516302571be360e01b81526004810182905260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906302571be390602401602060405180830381865afa158015612115573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612139919061310b565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031603610755576040516331a9108f60e11b8152600481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636352211e90602401602060405180830381865afa158015610c25573d6000803e3d6000fd5b60006121ec826301ffc9a760e01b61220c565b80156107555750612205826001600160e01b031961220c565b1592915050565b604080516001600160e01b03198316602480830191909152825180830390910181526044909101909152602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166301ffc9a760e01b178152825160009392849283928392918391908a617530fa92503d91506000519050828015612293575060208210155b801561229f5750600081115b979650505050505050565b600080600284846040516122bf9291906134be565b90815260405190819003602001902054801515925090509250929050565b600081516014146122ed57600080fd5b50602001516c01000000000000000000000000900490565b366000366000808686600081811061231f5761231f6137a1565b919091013560f81c915087905060018761233984836137b7565b60ff1692612349939291906133b2565b88886123568560016137b7565b60ff16908092612368939291906133b2565b929a91995097509095509350505050565b600080600061238887876127f4565b915091508161249257604080516001808252818301909252600091816020015b60608152602001906001900390816123a8579050509050600480546123cc906131b4565b80601f01602080910402602001604051908101604052809291908181526020018280546123f8906131b4565b80156124455780601f1061241a57610100808354040283529160200191612445565b820191906000526020600020905b81548152906001019060200180831161242857829003601f168201915b50505050508160008151811061245d5761245d6137a1565b6020908102919091010152604051630556f18360e41b815261176b90309083908b908b90632f9a176760e01b906004016137d0565b61229f8161192c565b6060816124a981601f613729565b10156124f75760405162461bcd60e51b815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015260640161176b565b6125018284613729565b845110156125515760405162461bcd60e51b815260206004820152601160248201527f736c6963655f6f75744f66426f756e6473000000000000000000000000000000604482015260640161176b565b60608215801561257057604051915060008252602082016040526125ba565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156125a9578051835260209283019201612591565b5050858452601f01601f1916604052505b50949350505050565b60606000806125d289896127f4565b91509150816126fd57604080516001808252818301909252600091816020015b60608152602001906001900390816125f257905050905060048054612616906131b4565b80601f0160208091040260200160405190810160405280929190818152602001828054612642906131b4565b801561268f5780601f106126645761010080835404028352916020019161268f565b820191906000526020600020905b81548152906001019060200180831161267257829003601f168201915b5050505050816000815181106126a7576126a76137a1565b602002602001018190525030818b8b63bacfdbe260e01b8a8a6040516020016126d1929190613831565b60408051601f1981840301815290829052630556f18360e41b825261176b969594939291600401613845565b61273e85858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250859250611e65915050565b9998505050505050505050565b60606107556001600160a01b03831660146128d3565b6060600061276e83612a6f565b600101905060008167ffffffffffffffff81111561278e5761278e612d60565b6040519080825280601f01601f1916602001820160405280156127b8576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846127c257509392505050565b600080805b838110156128c757600360fc1b858583818110612818576128186137a1565b9050013560f81c60f81b6001600160f81b03191610806128605750603960f81b85858381811061284a5761284a6137a1565b9050013560f81c60f81b6001600160f81b031916115b156128725760008092509250506109ec565b60006030868684818110612888576128886137a1565b6128999392013560f81c90506134f5565b9050806128a784600a61389e565b6128b19190613729565b92505080806128bf906138b5565b9150506127f9565b60019250509250929050565b606060006128e283600261389e565b6128ed906002613729565b67ffffffffffffffff81111561290557612905612d60565b6040519080825280601f01601f19166020018201604052801561292f576020820181803683370190505b509050600360fc1b8160008151811061294a5761294a6137a1565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612979576129796137a1565b60200101906001600160f81b031916908160001a905350600061299d84600261389e565b6129a8906001613729565b90505b6001811115612a20576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106129dc576129dc6137a1565b1a60f81b8282815181106129f2576129f26137a1565b60200101906001600160f81b031916908160001a90535060049490941c93612a19816138ce565b90506129ab565b508315610c495760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161176b565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310612ab8577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310612ae4576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310612b0257662386f26fc10000830492506010015b6305f5e1008310612b1a576305f5e100830492506008015b6127108310612b2e57612710830492506004015b60648310612b40576064830492506002015b600a83106107555760010192915050565b6001600160e01b03198116811461177d57600080fd5b600060208284031215612b7957600080fd5b8135610c4981612b51565b600060208284031215612b9657600080fd5b5035919050565b60008083601f840112612baf57600080fd5b50813567ffffffffffffffff811115612bc757600080fd5b6020830191508360208285010111156109ec57600080fd5b600080600060408486031215612bf457600080fd5b83359250602084013567ffffffffffffffff811115612c1257600080fd5b612c1e86828701612b9d565b9497909650939450505050565b600080600080600060608688031215612c4357600080fd5b85359450602086013567ffffffffffffffff80821115612c6257600080fd5b612c6e89838a01612b9d565b90965094506040880135915080821115612c8757600080fd5b50612c9488828901612b9d565b969995985093965092949392505050565b60008060408385031215612cb857600080fd5b823591506020830135612cca81612b51565b809150509250929050565b60008060408385031215612ce857600080fd5b50508035926020909101359150565b60005b83811015612d12578181015183820152602001612cfa565b50506000910152565b60008151808452612d33816020860160208601612cf7565b601f01601f19169290920160200192915050565b828152604060208201526000610aad6040830184612d1b565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612d9f57612d9f612d60565b604052919050565b600067ffffffffffffffff821115612dc157612dc1612d60565b50601f01601f191660200190565b6000612de2612ddd84612da7565b612d76565b9050828152838383011115612df657600080fd5b828260208301376000602084830101529392505050565b600060208284031215612e1f57600080fd5b813567ffffffffffffffff811115612e3657600080fd5b8201601f81018413612e4757600080fd5b610aad84823560208401612dcf565b600080600060608486031215612e6b57600080fd5b505081359360208301359350604090920135919050565b60008060008060408587031215612e9857600080fd5b843567ffffffffffffffff80821115612eb057600080fd5b612ebc88838901612b9d565b90965094506020870135915080821115612ed557600080fd5b50612ee287828801612b9d565b95989497509550505050565b602081526000610c496020830184612d1b565b60008060008060608587031215612f1757600080fd5b8435935060208501359250604085013567ffffffffffffffff811115612f3c57600080fd5b612ee287828801612b9d565b600082601f830112612f5957600080fd5b610c4983833560208501612dcf565b600080600060608486031215612f7d57600080fd5b8335925060208401359150604084013567ffffffffffffffff811115612fa257600080fd5b612fae86828701612f48565b9150509250925092565b600080600060608486031215612fcd57600080fd5b8335925060208401359150604084013561ffff81168114612fed57600080fd5b809150509250925092565b6001600160a01b038116811461177d57600080fd5b6000806040838503121561302057600080fd5b823591506020830135612cca81612ff8565b60008060006060848603121561304757600080fd5b83359250602084013561305981612b51565b91506040840135612fed81612ff8565b60006020828403121561307b57600080fd5b8135610c4981612ff8565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b8381526040602082015260006130c9604083018486613086565b95945050505050565b8581526060602082015260006130ec606083018688613086565b82810360408401526130ff818587613086565b98975050505050505050565b60006020828403121561311d57600080fd5b8151610c4981612ff8565b600082601f83011261313957600080fd5b8151613147612ddd82612da7565b81815284602083860101111561315c57600080fd5b610aad826020830160208701612cf7565b6000806040838503121561318057600080fd5b82519150602083015167ffffffffffffffff81111561319e57600080fd5b6131aa85828601613128565b9150509250929050565b600181811c908216806131c857607f821691505b602082108103610c5057634e487b7160e01b600052602260045260246000fd5b601f82111561323257600081815260208120601f850160051c8101602086101561320f5750805b601f850160051c820191505b8181101561322e5782815560010161321b565b5050505b505050565b815167ffffffffffffffff81111561325157613251612d60565b6132658161325f84546131b4565b846131e8565b602080601f83116001811461329a57600084156132825750858301515b600019600386901b1c1916600185901b17855561322e565b600085815260208120601f198616915b828110156132c9578886015182559484019460019091019084016132aa565b50858210156132e75787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b600067ffffffffffffffff80831681810361332a5761332a6132f7565b6001019392505050565b60006020828403121561334657600080fd5b815167ffffffffffffffff81111561335d57600080fd5b610aad84828501613128565b848152836020820152606060408201526000613389606083018486613086565b9695505050505050565b8381528260208201526060604082015260006130c96060830184612d1b565b600080858511156133c257600080fd5b838611156133cf57600080fd5b5050820193919092039150565b6001600160e01b031981358181169160048510156134045780818660040360031b1b83161692505b505092915050565b60008060006060848603121561342157600080fd5b833561342c81612ff8565b9250602084013561343c81612b51565b9150604084013567ffffffffffffffff811115612fa257600080fd5b60408152600061346c604083018587613086565b82810360208401526133898185612d1b565b60008251613490818460208701612cf7565b9190910192915050565b600080604083850312156134ad57600080fd5b505080516020909101519092909150565b8183823760009101908152919050565b6040815260006134e2604083018688613086565b828103602084015261229f818587613086565b81810381811115610755576107556132f7565b805161351381612b51565b919050565b600080600080600060a0868803121561353057600080fd5b855161353b81612ff8565b8095505060208087015167ffffffffffffffff8082111561355b57600080fd5b818901915089601f83011261356f57600080fd5b81518181111561358157613581612d60565b8060051b613590858201612d76565b918252838101850191858101908d8411156135aa57600080fd5b86860192505b838310156135e6578251858111156135c85760008081fd5b6135d68f89838a0101613128565b83525091860191908601906135b0565b60408d0151909a5095505050508083111561360057600080fd5b61360c8a848b01613128565b955061361a60608a01613508565b9450608089015192508083111561363057600080fd5b505061363e88828901613128565b9150509295509295909350565b6001600160a01b038416815263ffffffff60e01b831660208201526060604082015260006130c96060830184612d1b565b600081518084526020808501808196508360051b8101915082860160005b858110156136c45782840389526136b2848351612d1b565b9885019893509084019060010161369a565b5091979650505050505050565b6001600160a01b038616815260a0602082015260006136f360a083018761367c565b82810360408401526137058187612d1b565b6001600160e01b031986166060850152838103608085015290506130ff8185612d1b565b80820180821115610755576107556132f7565b7f6569703135353a312f6572633732313a00000000000000000000000000000000815260008351613774816010850160208801612cf7565b602f60f81b6010918401918201528351613795816011840160208801612cf7565b01601101949350505050565b634e487b7160e01b600052603260045260246000fd5b60ff8181168382160190811115610755576107556132f7565b6001600160a01b038616815260a0602082015260006137f260a083018761367c565b8281036040840152613805818688613086565b6001600160e01b0319949094166060840152505080820360809091015260008152602001949350505050565b602081526000610aad602083018486613086565b6001600160a01b038716815260a06020820152600061386760a083018861367c565b828103604084015261387a818789613086565b6001600160e01b0319861660608501528381036080850152905061273e8185612d1b565b8082028115828204841417610755576107556132f7565b6000600182016138c7576138c76132f7565b5060010190565b6000816138dd576138dd6132f7565b50600019019056fea164736f6c6343000811000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102ad5760003560e01c8063691f34311161017b578063bacfdbe2116100d8578063d700ff331161008c578063ef47ee6211610071578063ef47ee62146106ae578063f1cb7e061461070a578063f2fde38b1461071d57600080fd5b8063d700ff3314610658578063e59d895d1461069b57600080fd5b8063c8690233116100bd578063c86902331461060a578063ce3decdc14610632578063d5fa2b001461064557600080fd5b8063bacfdbe2146105e4578063bc1c58d1146105f757600080fd5b80638da5cb5b1161012f5780639b886dd9116101145780639b886dd9146105ab578063a8fa5682146105be578063b4a85801146105d157600080fd5b80638da5cb5b146105875780639061b9231461059857600080fd5b80637737221311610160578063773722131461053a5780637d73b2311461054d5780638b95dd711461057457600080fd5b8063691f34311461051f578063715018a61461053257600080fd5b80632f9a1767116102295780635048cea0116101dd57806359d1d43c116101c257806359d1d43c146104e65780635c98042b146104f9578063623195b01461050c57600080fd5b80635048cea0146104925780635600f04f146104de57600080fd5b80633603d7581161020e5780633603d758146104455780633b3b57de1461045857806347c5da981461046b57600080fd5b80632f9a176714610412578063304e6ade1461043257600080fd5b8063124a319c11610280578063252498a211610265578063252498a21461037757806329cd62ea1461038a5780632d1705391461039d57600080fd5b8063124a319c146103435780632203ab561461035657600080fd5b806301ffc9a7146102b257806302001702146102da5780630af179d71461031b57806310f13a8c14610330575b600080fd5b6102c56102c0366004612b67565b610730565b60405190151581526020015b60405180910390f35b6103036102e8366004612b84565b6000908152600160205260409020546001600160a01b031690565b6040516001600160a01b0390911681526020016102d1565b61032e610329366004612bdf565b61075b565b005b61032e61033e366004612c2b565b6107ed565b610303610351366004612ca5565b610885565b610369610364366004612cd5565b61093b565b6040516102d1929190612d47565b61032e610385366004612e0d565b6109f3565b61032e610398366004612e56565b610a0b565b60408051808201909152601481527f7465787428627974657333322c737472696e67290000000000000000000000006020909101526103f97f59d1d43c37707a29830be065fcabd05d6e536466c5159d2e46cb27bda8e98d6581565b6040516001600160e01b031990911681526020016102d1565b610425610420366004612e82565b610a6a565b6040516102d19190612eee565b61032e610440366004612bdf565b610ab5565b61032e610453366004612b84565b610b0f565b610303610466366004612b84565b610bb2565b6103037f000000000000000000000000000000000000000000000000000000000000000081565b60408051808201909152600d81526c6164647228627974657333322960981b6020909101526103f97f3b3b57de213591bb50e06975ea011e4c8c4b3e6de4009450c1a9e55f66e4bfa481565b610425610c56565b6104256104f4366004612bdf565b610ce4565b610425610507366004612b84565b610d9a565b61032e61051a366004612f01565b610e39565b61042561052d366004612b84565b610ece565b61032e610f2c565b61032e610548366004612bdf565b610f40565b6103037f000000000000000000000000000000000000000000000000000000000000000081565b61032e610582366004612f68565b610f9a565b6003546001600160a01b0316610303565b6104256105a6366004612e82565b610ff4565b600554610303906001600160a01b031681565b6104256105cc366004612fb8565b611210565b6104256105df366004612e82565b61127f565b6104256105f2366004612e82565b611393565b610425610605366004612b84565b6113ea565b61061d610618366004612b84565b611448565b604080519283526020830191909152016102d1565b61032e610640366004612bdf565b6114f0565b61032e61065336600461300d565b61154a565b610682610666366004612b84565b60006020819052908152604090205467ffffffffffffffff1681565b60405167ffffffffffffffff90911681526020016102d1565b61032e6106a9366004613032565b6115dd565b60408051808201909152601581527f6164647228627974657333322c75696e743235362900000000000000000000006020909101526103f97ff1cb7e06eed69ff6b1133c27a055176e5b0f641e8f94df2da7711eae8558f7b181565b610425610718366004612cd5565b611646565b61032e61072b366004613069565b6116eb565b60006001600160e01b03198216639061b92360e01b1480610755575061075582611780565b92915050565b8261076581611898565b61076e57600080fd5b6000848152600160205260409020546001600160a01b03166001600160a01b0316630af179d78585856040518463ffffffff1660e01b81526004016107b5939291906130af565b600060405180830381600087803b1580156107cf57600080fd5b505af11580156107e3573d6000803e3d6000fd5b5050505050505050565b846107f781611898565b61080057600080fd5b6000868152600160205260409020546001600160a01b03166001600160a01b03166310f13a8c87878787876040518663ffffffff1660e01b815260040161084b9594939291906130d2565b600060405180830381600087803b15801561086557600080fd5b505af1158015610879573d6000803e3d6000fd5b50505050505050505050565b6000828152600160205260408120546001600160a01b03166108ae816304928c6760e21b6118b6565b15610934576040516304928c6760e21b8152600481018590526001600160e01b0319841660248201526001600160a01b0382169063124a319c90604401602060405180830381865afa158015610908573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092c919061310b565b915050610755565b5092915050565b6000828152600160205260408120546060906001600160a01b031661096781631101d5ab60e11b6118b6565b156109ea57604051631101d5ab60e11b815260048101869052602481018590526001600160a01b03821690632203ab5690604401600060405180830381865afa1580156109b8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109e0919081019061316d565b92509250506109ec565b505b9250929050565b6109fb6118d2565b6004610a078282613237565b5050565b82610a1581611898565b610a1e57600080fd5b600084815260016020526040908190205490516314e6b17560e11b81526004810186905260248101859052604481018490526001600160a01b03909116906329cd62ea906064016107b5565b60606000610a7a85870187612b84565b9050610a858161192c565b604080516001600160a01b039092166020830152016040516020818303038152906040529150505b949350505050565b82610abf81611898565b610ac857600080fd5b6000848152600160205260409020546001600160a01b03166001600160a01b031663304e6ade8585856040518463ffffffff1660e01b81526004016107b5939291906130af565b80610b1981611898565b610b2257600080fd5b6000828152602081905260408120805467ffffffffffffffff1691610b468361330d565b82546101009290920a67ffffffffffffffff818102199093169183160217909155600084815260208181526040918290205491519190921681528492507fc6621ccb8f3f5a04bb6502154b2caf6adf5983fe76dfef1cfc9c42e3579db444910160405180910390a25050565b6000818152600160205260408120546001600160a01b0316610bdb81631d9dabef60e11b6118b6565b15610c5057604051631d9dabef60e11b8152600481018490526001600160a01b03821690633b3b57de90602401602060405180830381865afa158015610c25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c49919061310b565b9392505050565b50919050565b60048054610c63906131b4565b80601f0160208091040260200160405190810160405280929190818152602001828054610c8f906131b4565b8015610cdc5780601f10610cb157610100808354040283529160200191610cdc565b820191906000526020600020905b815481529060010190602001808311610cbf57829003601f168201915b505050505081565b6000838152600160205260409020546060906001600160a01b0316610d1081631674750f60e21b6118b6565b15610d9257604051631674750f60e21b81526001600160a01b038216906359d1d43c90610d45908890889088906004016130af565b600060405180830381865afa158015610d62573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d8a9190810190613334565b915050610c49565b509392505050565b6000818152600160205260409020546060906001600160a01b0316610dc681635c98042b60e01b6118b6565b15610c5057604051635c98042b60e01b8152600481018490526001600160a01b03821690635c98042b906024015b600060405180830381865afa158015610e11573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c499190810190613334565b83610e4381611898565b610e4c57600080fd5b6000858152600160205260409020546001600160a01b03166001600160a01b031663623195b0868686866040518563ffffffff1660e01b8152600401610e959493929190613369565b600060405180830381600087803b158015610eaf57600080fd5b505af1158015610ec3573d6000803e3d6000fd5b505050505050505050565b6000818152600160205260409020546060906001600160a01b0316610efa8163691f343160e01b6118b6565b15610c505760405163691f343160e01b8152600481018490526001600160a01b0382169063691f343190602401610df4565b610f346118d2565b610f3e60006119a2565b565b82610f4a81611898565b610f5357600080fd5b6000848152600160205260409020546001600160a01b03166001600160a01b031663773722138585856040518463ffffffff1660e01b81526004016107b5939291906130af565b82610fa481611898565b610fad57600080fd5b6000848152600160205260409020546001600160a01b03166001600160a01b0316638b95dd718585856040518463ffffffff1660e01b81526004016107b593929190613393565b6060600061100560048285876133b2565b61100e916133dc565b60408051808201909152600d81526c6164647228627974657333322960981b6020909101529050636262541160e11b6001600160e01b031982160161108a57600061105b87878787611a0c565b604080516001600160a01b03831660208201529192500160405160208183030381529060405292505050610aad565b60408051808201909152601581527f6164647228627974657333322c75696e7432353629000000000000000000000060209091015263071a40fd60e11b6001600160e01b031982160161115c5760006110e684600481886133b2565b8101906110f39190612cd5565b915050603c810361114957600061110c88888888611a0c565b9050611120816001600160a01b0316611c51565b6040516020016111309190612eee565b6040516020818303038152906040529350505050610aad565b6060806040516020016111309190612eee565b60408051808201909152601481527f7465787428627974657333322c737472696e672900000000000000000000000060209091015263298b8af160e21b6001600160e01b03198216016111f7573660006111b68686611c8a565b9150915060006111ca898985858b8b611ce2565b9050806040516020016111dd9190612eee565b604051602081830303815290604052945050505050610aad565b60405163dfbcb35160e01b815260040160405180910390fd5b6000838152600160205260409020546060906001600160a01b031661123c8163547d2b4160e11b6118b6565b15610d925760405163547d2b4160e11b8152600481018690526024810185905261ffff841660448201526001600160a01b0382169063a8fa568290606401610d45565b6060600080806112918587018761340c565b925092509250600080846001600160a01b0316848b8b866040516024016112ba93929190613458565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990941693909317909252905161130d919061347e565b6000604051808303816000865af19150503d806000811461134a576040519150601f19603f3d011682016040523d82523d6000602084013e61134f565b606091505b5091509150811561137a578080602001905181019061136e9190613334565b95505050505050610aad565b604051631cc6a69960e11b815260040160405180910390fd5b606060006113a385870187612b84565b905060006113b384860186612e0d565b90506113bf8183611e65565b6040516020016113cf9190612eee565b60405160208183030381529060405292505050949350505050565b6000818152600160205260409020546060906001600160a01b03166114168163bc1c58d160e01b6118b6565b15610c505760405163bc1c58d160e01b8152600481018490526001600160a01b0382169063bc1c58d190602401610df4565b60008181526001602052604081205481906001600160a01b03166114738163c869023360e01b6118b6565b156114ea5760405163c869023360e01b8152600481018590526001600160a01b0382169063c8690233906024016040805180830381865afa1580156114bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e0919061349a565b9250925050915091565b50915091565b826114fa81611898565b61150357600080fd5b6000848152600160205260409020546001600160a01b03166001600160a01b031663ce3decdc8585856040518463ffffffff1660e01b81526004016107b5939291906130af565b8161155481611898565b61155d57600080fd5b6000838152600160205260409020546001600160a01b031660405162d5fa2b60e81b8152600481018590526001600160a01b038481166024830152919091169063d5fa2b0090604401600060405180830381600087803b1580156115c057600080fd5b505af11580156115d4573d6000803e3d6000fd5b50505050505050565b826115e781611898565b6115f057600080fd5b6000848152600160205260409081902054905163e59d895d60e01b8152600481018690526001600160e01b0319851660248201526001600160a01b0384811660448301529091169063e59d895d906064016107b5565b6000828152600160205260409020546060906001600160a01b0316611672816378e5bf0360e11b6118b6565b15610934576040516378e5bf0360e11b815260048101859052602481018490526001600160a01b0382169063f1cb7e0690604401600060405180830381865afa1580156116c3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261092c9190810190613334565b6116f36118d2565b6001600160a01b0381166117745760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61177d816119a2565b50565b60006001600160e01b03198216631101d5ab60e11b14806117b157506001600160e01b03198216631d9dabef60e11b145b806117cc57506001600160e01b031982166378e5bf0360e11b145b806117e757506001600160e01b0319821663bc1c58d160e01b145b8061180257506001600160e01b0319821663547d2b4160e11b145b8061181d57506001600160e01b03198216635c98042b60e01b145b8061183857506001600160e01b031982166304928c6760e21b145b8061185357506001600160e01b0319821663691f343160e01b145b8061186e57506001600160e01b0319821663c869023360e01b145b8061188957506001600160e01b03198216631674750f60e21b145b80610755575061075582612076565b6000806118a4836120ab565b6001600160a01b031633149392505050565b60006118c1836121d9565b8015610c495750610c49838361220c565b6003546001600160a01b03163314610f3e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161176b565b6005546040516331a9108f60e11b81526004810183905260009182916001600160a01b0390911690636352211e90602401602060405180830381865afa925050508015611996575060408051601f3d908101601f191682019092526119939181019061310b565b60015b610c4957506000610755565b600380546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000806000611a1b87876122aa565b915091508115611a6957611a2e81610bb2565b92506001600160a01b038316611a64576000611a4b82603c611646565b90508051600014611a6257611a5f816122dd565b93505b505b611ab7565b366000366000611a798b8b612305565b935093509350935060028282604051611a939291906134be565b9081526020016040518091039020549450611ab084848484612379565b9650505050505b6000818152600160205260408120546001600160a01b031690506001600160a01b038416158015611afd5750611afd6001600160a01b038216639061b92360e01b6118b6565b15611c4657604051639061b92360e01b81526001600160a01b03821690639061b92390611b34908b908b908b908b906004016134ce565b600060405180830381865afa925050508015611b7257506040513d6000823e601f3d908101601f19168201604052611b6f9190810190613334565b60015b611c2e573d808015611ba0576040519150601f19603f3d011682016040523d82523d6000602084013e611ba5565b606091505b506000806000806000611bc6866004808951611bc191906134f5565b61249b565b806020019051810190611bd99190613518565b9450945094509450945030848463b4a8580160e01b888686604051602001611c039392919061364b565b60408051601f1981840301815290829052630556f18360e41b825261176b95949392916004016136d1565b80806020019051810190611c42919061310b565b9450505b505050949350505050565b6040805160148082528183019092526060916020820181803683375050506c010000000000000000000000009290920260208301525090565b366000604481611c9b826020613729565b90506000611cab8684818a6133b2565b810190611cb89190612b84565b9050868287611cc78483613729565b92611cd4939291906133b2565b945094505050509250929050565b6060600080611cf189896122aa565b915091508115611d0d57611d06818888610ce4565b9250611d5d565b366000366000611d1d8d8d612305565b935093509350935060028282604051611d379291906134be565b9081526020016040518091039020549450611d56848484848f8f6125c3565b9650505050505b6000818152600160205260408120546001600160a01b0316905083516000148015611d9d5750611d9d6001600160a01b038216639061b92360e01b6118b6565b15611e5857604051639061b92360e01b81526001600160a01b03821690639061b92390611dd4908d908d908b908b906004016134ce565b600060405180830381865afa925050508015611e1257506040513d6000823e601f3d908101601f19168201604052611e0f9190810190613334565b60015b611e40573d808015611ba0576040519150601f19603f3d011682016040523d82523d6000602084013e611ba5565b80806020019051810190611e549190613334565b9450505b5050509695505050505050565b6005546040516331a9108f60e11b8152600481018390526060916001600160a01b031690636352211e90602401602060405180830381865afa925050508015611ecb575060408051601f3d908101601f19168201909252611ec89181019061310b565b60015b611ee45750604080516020810190915260008152610755565b5060408051808201909152600681527f61766174617200000000000000000000000000000000000000000000000000006020918201528351908401207fd1f86c93d831119ad98fe983e643a7431e4ac992e3ead6e3007f4dd1adf6634303611f8b57600554611f5b906001600160a01b031661274b565b611f6483612761565b604051602001611f7592919061373c565b6040516020818303038152906040529050610755565b6040805180820190915260038152621d5c9b60ea1b6020918201528351908401207fb68b5f5089998f2978a1dcc681e8ef27962b90d5c26c4c0b9c1945814ffa5ef0036120605760055460405163c87b56dd60e01b8152600481018490526060916001600160a01b03169063c87b56dd90602401600060405180830381865afa92505050801561203d57506040513d6000823e601f3d908101601f1916820160405261203a9190810190613334565b60015b6120565750604080516020810190915260008152612059565b90505b9050610755565b5060408051602081019091526000815292915050565b60006001600160e01b0319821663d700ff3360e01b148061075557506301ffc9a760e01b6001600160e01b0319831614610755565b6040516302571be360e01b81526004810182905260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906302571be390602401602060405180830381865afa158015612115573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612139919061310b565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031603610755576040516331a9108f60e11b8152600481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636352211e90602401602060405180830381865afa158015610c25573d6000803e3d6000fd5b60006121ec826301ffc9a760e01b61220c565b80156107555750612205826001600160e01b031961220c565b1592915050565b604080516001600160e01b03198316602480830191909152825180830390910181526044909101909152602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166301ffc9a760e01b178152825160009392849283928392918391908a617530fa92503d91506000519050828015612293575060208210155b801561229f5750600081115b979650505050505050565b600080600284846040516122bf9291906134be565b90815260405190819003602001902054801515925090509250929050565b600081516014146122ed57600080fd5b50602001516c01000000000000000000000000900490565b366000366000808686600081811061231f5761231f6137a1565b919091013560f81c915087905060018761233984836137b7565b60ff1692612349939291906133b2565b88886123568560016137b7565b60ff16908092612368939291906133b2565b929a91995097509095509350505050565b600080600061238887876127f4565b915091508161249257604080516001808252818301909252600091816020015b60608152602001906001900390816123a8579050509050600480546123cc906131b4565b80601f01602080910402602001604051908101604052809291908181526020018280546123f8906131b4565b80156124455780601f1061241a57610100808354040283529160200191612445565b820191906000526020600020905b81548152906001019060200180831161242857829003601f168201915b50505050508160008151811061245d5761245d6137a1565b6020908102919091010152604051630556f18360e41b815261176b90309083908b908b90632f9a176760e01b906004016137d0565b61229f8161192c565b6060816124a981601f613729565b10156124f75760405162461bcd60e51b815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015260640161176b565b6125018284613729565b845110156125515760405162461bcd60e51b815260206004820152601160248201527f736c6963655f6f75744f66426f756e6473000000000000000000000000000000604482015260640161176b565b60608215801561257057604051915060008252602082016040526125ba565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156125a9578051835260209283019201612591565b5050858452601f01601f1916604052505b50949350505050565b60606000806125d289896127f4565b91509150816126fd57604080516001808252818301909252600091816020015b60608152602001906001900390816125f257905050905060048054612616906131b4565b80601f0160208091040260200160405190810160405280929190818152602001828054612642906131b4565b801561268f5780601f106126645761010080835404028352916020019161268f565b820191906000526020600020905b81548152906001019060200180831161267257829003601f168201915b5050505050816000815181106126a7576126a76137a1565b602002602001018190525030818b8b63bacfdbe260e01b8a8a6040516020016126d1929190613831565b60408051601f1981840301815290829052630556f18360e41b825261176b969594939291600401613845565b61273e85858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250859250611e65915050565b9998505050505050505050565b60606107556001600160a01b03831660146128d3565b6060600061276e83612a6f565b600101905060008167ffffffffffffffff81111561278e5761278e612d60565b6040519080825280601f01601f1916602001820160405280156127b8576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846127c257509392505050565b600080805b838110156128c757600360fc1b858583818110612818576128186137a1565b9050013560f81c60f81b6001600160f81b03191610806128605750603960f81b85858381811061284a5761284a6137a1565b9050013560f81c60f81b6001600160f81b031916115b156128725760008092509250506109ec565b60006030868684818110612888576128886137a1565b6128999392013560f81c90506134f5565b9050806128a784600a61389e565b6128b19190613729565b92505080806128bf906138b5565b9150506127f9565b60019250509250929050565b606060006128e283600261389e565b6128ed906002613729565b67ffffffffffffffff81111561290557612905612d60565b6040519080825280601f01601f19166020018201604052801561292f576020820181803683370190505b509050600360fc1b8160008151811061294a5761294a6137a1565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612979576129796137a1565b60200101906001600160f81b031916908160001a905350600061299d84600261389e565b6129a8906001613729565b90505b6001811115612a20576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106129dc576129dc6137a1565b1a60f81b8282815181106129f2576129f26137a1565b60200101906001600160f81b031916908160001a90535060049490941c93612a19816138ce565b90506129ab565b508315610c495760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161176b565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310612ab8577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310612ae4576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310612b0257662386f26fc10000830492506010015b6305f5e1008310612b1a576305f5e100830492506008015b6127108310612b2e57612710830492506004015b60648310612b40576064830492506002015b600a83106107555760010192915050565b6001600160e01b03198116811461177d57600080fd5b600060208284031215612b7957600080fd5b8135610c4981612b51565b600060208284031215612b9657600080fd5b5035919050565b60008083601f840112612baf57600080fd5b50813567ffffffffffffffff811115612bc757600080fd5b6020830191508360208285010111156109ec57600080fd5b600080600060408486031215612bf457600080fd5b83359250602084013567ffffffffffffffff811115612c1257600080fd5b612c1e86828701612b9d565b9497909650939450505050565b600080600080600060608688031215612c4357600080fd5b85359450602086013567ffffffffffffffff80821115612c6257600080fd5b612c6e89838a01612b9d565b90965094506040880135915080821115612c8757600080fd5b50612c9488828901612b9d565b969995985093965092949392505050565b60008060408385031215612cb857600080fd5b823591506020830135612cca81612b51565b809150509250929050565b60008060408385031215612ce857600080fd5b50508035926020909101359150565b60005b83811015612d12578181015183820152602001612cfa565b50506000910152565b60008151808452612d33816020860160208601612cf7565b601f01601f19169290920160200192915050565b828152604060208201526000610aad6040830184612d1b565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612d9f57612d9f612d60565b604052919050565b600067ffffffffffffffff821115612dc157612dc1612d60565b50601f01601f191660200190565b6000612de2612ddd84612da7565b612d76565b9050828152838383011115612df657600080fd5b828260208301376000602084830101529392505050565b600060208284031215612e1f57600080fd5b813567ffffffffffffffff811115612e3657600080fd5b8201601f81018413612e4757600080fd5b610aad84823560208401612dcf565b600080600060608486031215612e6b57600080fd5b505081359360208301359350604090920135919050565b60008060008060408587031215612e9857600080fd5b843567ffffffffffffffff80821115612eb057600080fd5b612ebc88838901612b9d565b90965094506020870135915080821115612ed557600080fd5b50612ee287828801612b9d565b95989497509550505050565b602081526000610c496020830184612d1b565b60008060008060608587031215612f1757600080fd5b8435935060208501359250604085013567ffffffffffffffff811115612f3c57600080fd5b612ee287828801612b9d565b600082601f830112612f5957600080fd5b610c4983833560208501612dcf565b600080600060608486031215612f7d57600080fd5b8335925060208401359150604084013567ffffffffffffffff811115612fa257600080fd5b612fae86828701612f48565b9150509250925092565b600080600060608486031215612fcd57600080fd5b8335925060208401359150604084013561ffff81168114612fed57600080fd5b809150509250925092565b6001600160a01b038116811461177d57600080fd5b6000806040838503121561302057600080fd5b823591506020830135612cca81612ff8565b60008060006060848603121561304757600080fd5b83359250602084013561305981612b51565b91506040840135612fed81612ff8565b60006020828403121561307b57600080fd5b8135610c4981612ff8565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b8381526040602082015260006130c9604083018486613086565b95945050505050565b8581526060602082015260006130ec606083018688613086565b82810360408401526130ff818587613086565b98975050505050505050565b60006020828403121561311d57600080fd5b8151610c4981612ff8565b600082601f83011261313957600080fd5b8151613147612ddd82612da7565b81815284602083860101111561315c57600080fd5b610aad826020830160208701612cf7565b6000806040838503121561318057600080fd5b82519150602083015167ffffffffffffffff81111561319e57600080fd5b6131aa85828601613128565b9150509250929050565b600181811c908216806131c857607f821691505b602082108103610c5057634e487b7160e01b600052602260045260246000fd5b601f82111561323257600081815260208120601f850160051c8101602086101561320f5750805b601f850160051c820191505b8181101561322e5782815560010161321b565b5050505b505050565b815167ffffffffffffffff81111561325157613251612d60565b6132658161325f84546131b4565b846131e8565b602080601f83116001811461329a57600084156132825750858301515b600019600386901b1c1916600185901b17855561322e565b600085815260208120601f198616915b828110156132c9578886015182559484019460019091019084016132aa565b50858210156132e75787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b600067ffffffffffffffff80831681810361332a5761332a6132f7565b6001019392505050565b60006020828403121561334657600080fd5b815167ffffffffffffffff81111561335d57600080fd5b610aad84828501613128565b848152836020820152606060408201526000613389606083018486613086565b9695505050505050565b8381528260208201526060604082015260006130c96060830184612d1b565b600080858511156133c257600080fd5b838611156133cf57600080fd5b5050820193919092039150565b6001600160e01b031981358181169160048510156134045780818660040360031b1b83161692505b505092915050565b60008060006060848603121561342157600080fd5b833561342c81612ff8565b9250602084013561343c81612b51565b9150604084013567ffffffffffffffff811115612fa257600080fd5b60408152600061346c604083018587613086565b82810360208401526133898185612d1b565b60008251613490818460208701612cf7565b9190910192915050565b600080604083850312156134ad57600080fd5b505080516020909101519092909150565b8183823760009101908152919050565b6040815260006134e2604083018688613086565b828103602084015261229f818587613086565b81810381811115610755576107556132f7565b805161351381612b51565b919050565b600080600080600060a0868803121561353057600080fd5b855161353b81612ff8565b8095505060208087015167ffffffffffffffff8082111561355b57600080fd5b818901915089601f83011261356f57600080fd5b81518181111561358157613581612d60565b8060051b613590858201612d76565b918252838101850191858101908d8411156135aa57600080fd5b86860192505b838310156135e6578251858111156135c85760008081fd5b6135d68f89838a0101613128565b83525091860191908601906135b0565b60408d0151909a5095505050508083111561360057600080fd5b61360c8a848b01613128565b955061361a60608a01613508565b9450608089015192508083111561363057600080fd5b505061363e88828901613128565b9150509295509295909350565b6001600160a01b038416815263ffffffff60e01b831660208201526060604082015260006130c96060830184612d1b565b600081518084526020808501808196508360051b8101915082860160005b858110156136c45782840389526136b2848351612d1b565b9885019893509084019060010161369a565b5091979650505050505050565b6001600160a01b038616815260a0602082015260006136f360a083018761367c565b82810360408401526137058187612d1b565b6001600160e01b031986166060850152838103608085015290506130ff8185612d1b565b80820180821115610755576107556132f7565b7f6569703135353a312f6572633732313a00000000000000000000000000000000815260008351613774816010850160208801612cf7565b602f60f81b6010918401918201528351613795816011840160208801612cf7565b01601101949350505050565b634e487b7160e01b600052603260045260246000fd5b60ff8181168382160190811115610755576107556132f7565b6001600160a01b038616815260a0602082015260006137f260a083018761367c565b8281036040840152613805818688613086565b6001600160e01b0319949094166060840152505080820360809091015260008152602001949350505050565b602081526000610aad602083018486613086565b6001600160a01b038716815260a06020820152600061386760a083018861367c565b828103604084015261387a818789613086565b6001600160e01b0319861660608501528381036080850152905061273e8185612d1b565b8082028115828204841417610755576107556132f7565b6000600182016138c7576138c76132f7565b5060010190565b6000816138dd576138dd6132f7565b50600019019056fea164736f6c6343000811000a",
  "libraries": {
    "ERC165Checker": "0x7EB821Aa0cA01198A9EC28ee9f5d7491508233e4",
    "StringParsing": "0xe0c9b7B08a9A409eA6537c8fb307CE6758CfEd16",
    "Strings": "0x572CbB4dbd1f3bB4E23Cc3d8F4460B3E6d871826",
    "NameEncoder": "0x2b1D7EE297A345fF0C57B3c3B0F34b59951756b1",
    "ENSNameHash": "0x969254c8EC87eF59BeB6F6eA928f1A00bb649Ecc",
    "ENSByteUtils": "0x4A44B0Af7483Eb232F606418Aa099ad453F95A02",
    "ENSParentName": "0xeE1CcD12e954bFD828EEb4Ca3B76cfE4cbc42C76"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "ABI(bytes32,uint256)": {
        "params": {
          "contentTypes": "A bitwise OR of the ABI formats accepted by the caller.",
          "node": "The ENS node to query"
        },
        "returns": {
          "a": "contentType The content type of the return value",
          "b": "data The ABI data"
        }
      },
      "addr(bytes32)": {
        "params": {
          "node": "The ENS node to query."
        },
        "returns": {
          "result": "The associated address."
        }
      },
      "clearRecords(bytes32)": {
        "params": {
          "node": "The node to update."
        }
      },
      "contenthash(bytes32)": {
        "params": {
          "node": "The ENS node to query."
        },
        "returns": {
          "result": "The associated contenthash."
        }
      },
      "dnsRecord(bytes32,bytes32,uint16)": {
        "params": {
          "name": "the keccak-256 hash of the fully-qualified name for which to fetch the record",
          "node": "the namehash of the node for which to fetch the record",
          "resource": "the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types"
        },
        "returns": {
          "result": "the DNS record in wire format if present, otherwise empty"
        }
      },
      "interfaceImplementer(bytes32,bytes4)": {
        "params": {
          "interfaceID": "The EIP 165 interface ID to check for.",
          "node": "The ENS node to query."
        },
        "returns": {
          "result": "The address that implements this interface, or 0 if the interface is unsupported."
        }
      },
      "name(bytes32)": {
        "params": {
          "node": "The ENS node to query."
        },
        "returns": {
          "result": "The associated name."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pubkey(bytes32)": {
        "params": {
          "node": "The ENS node to query"
        },
        "returns": {
          "x": "The X coordinate of the curve point for the public key.",
          "y": "The Y coordinate of the curve point for the public key."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "text(bytes32,string)": {
        "params": {
          "key": "The text data key to query.",
          "node": "The ENS node to query."
        },
        "returns": {
          "result": "The associated text data."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "zonehash(bytes32)": {
        "params": {
          "node": "The ENS node to query."
        },
        "returns": {
          "result": "The associated contenthash."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "ABI(bytes32,uint256)": {
        "notice": "Returns the ABI associated with an ENS node. Defined in EIP205."
      },
      "addr(bytes32)": {
        "notice": "Returns the address associated with an ENS node."
      },
      "clearRecords(bytes32)": {
        "notice": "Increments the record version associated with an ENS node. May only be called by the owner of that node in the ENS registry."
      },
      "contenthash(bytes32)": {
        "notice": "Returns the contenthash associated with an ENS node."
      },
      "dnsRecord(bytes32,bytes32,uint16)": {
        "notice": "Obtain a DNS record."
      },
      "interfaceImplementer(bytes32,bytes4)": {
        "notice": "Returns the address of a contract that implements the specified interface for this name. If an implementer has not been set for this interfaceID and name, the resolver will query the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that contract implements EIP165 and returns `true` for the specified interfaceID, its address will be returned."
      },
      "name(bytes32)": {
        "notice": "Returns the name associated with an ENS node, for reverse records. Defined in EIP181."
      },
      "pubkey(bytes32)": {
        "notice": "Returns the SECP256k1 public key associated with an ENS node. Defined in EIP 619."
      },
      "text(bytes32,string)": {
        "notice": "Returns the text data associated with an ENS node and key."
      },
      "zonehash(bytes32)": {
        "notice": "zonehash obtains the hash for the zone."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 243,
        "contract": "contracts/ensWildcardResolvers/DigidaigakuResolver.sol:DigidaigakuResolver",
        "label": "recordVersions",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_uint64)"
      },
      {
        "astId": 8502,
        "contract": "contracts/ensWildcardResolvers/DigidaigakuResolver.sol:DigidaigakuResolver",
        "label": "_passthroughTargets",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 9279,
        "contract": "contracts/ensWildcardResolvers/DigidaigakuResolver.sol:DigidaigakuResolver",
        "label": "parentEnsNodes",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes_memory_ptr,t_bytes32)"
      },
      {
        "astId": 1358,
        "contract": "contracts/ensWildcardResolvers/DigidaigakuResolver.sol:DigidaigakuResolver",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 7553,
        "contract": "contracts/ensWildcardResolvers/DigidaigakuResolver.sol:DigidaigakuResolver",
        "label": "url",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 7556,
        "contract": "contracts/ensWildcardResolvers/DigidaigakuResolver.sol:DigidaigakuResolver",
        "label": "digidaigakuContract",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IERC721)3211"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IERC721)3211": {
        "encoding": "inplace",
        "label": "contract IERC721",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_uint64)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_mapping(t_bytes_memory_ptr,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}