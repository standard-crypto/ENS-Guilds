{
  "address": "0xe0c9b7B08a9A409eA6537c8fb307CE6758CfEd16",
  "abi": [],
  "transactionHash": "0xc77670003b77a11492a3cefefc254104a6cb974fb8e132e1a8ea9acb3411e5f9",
  "receipt": {
    "to": null,
    "from": "0xB6a6c32CCe5B5E963277A66019309EBf13f59F12",
    "contractAddress": "0xe0c9b7B08a9A409eA6537c8fb307CE6758CfEd16",
    "transactionIndex": 78,
    "gasUsed": "63360",
    "logsBloom": "0x
    "blockHash": "0x71f64b127dcbc6ae8e46b902a29442ad8c51747779afbb953c5658eed9d0634a",
    "transactionHash": "0xc77670003b77a11492a3cefefc254104a6cb974fb8e132e1a8ea9acb3411e5f9",
    "logs": [],
    "blockNumber": 17937692,
    "cumulativeGasUsed": "8504332",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "bd4bcb26d619e74f6e56ea7167e7db78",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/StringParsing.sol\":\"StringParsing\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/libraries/StringParsing.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nlibrary StringParsing {\\n    /**\\n     * @dev Parses a UTF8 string of digits representing an unsigned integer.\\n     */\\n    function parseUint256(bytes calldata b) internal pure returns (bool valid, uint256 parsed) {\\n        uint256 i;\\n        parsed = 0;\\n        for (i = 0; i < b.length; i++) {\\n            if (b[i] < bytes1(0x30) || b[i] > bytes1(0x39)) {\\n                return (false, 0);\\n            }\\n            uint256 c = uint(uint8(b[i])) - 48;\\n            parsed = parsed * 10 + c;\\n        }\\n        return (true, parsed);\\n    }\\n}\\n\",\"keccak256\":\"0xef8359450817d6057bbfaf54090d63e062d867f83056d448be3fcb11208511bc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x602d6037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c6343000811000a",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c6343000811000a",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}