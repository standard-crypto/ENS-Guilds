{
  "address": "0xd04B04F72Be9E3A9cf7e97A0ea26E1ebF7633444",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ENS",
          "name": "_ensRegistry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ensGuilds",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "reverseRecordOwner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ensGuilds",
      "outputs": [
        {
          "internalType": "contract IENSGuilds",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "guildFees",
      "outputs": [
        {
          "internalType": "address",
          "name": "feeToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "feePaidTo",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "guildHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "feeToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "feePaidTo",
          "type": "address"
        }
      ],
      "name": "setFlatFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "guildHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "tagClaimFee",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "feePaidTo",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc22860714cf1d8334b03c25f32d16b3a098f4a5fa0a939ba4b4c92b6c9b77537",
  "receipt": {
    "to": null,
    "from": "0xB6a6c32CCe5B5E963277A66019309EBf13f59F12",
    "contractAddress": "0xd04B04F72Be9E3A9cf7e97A0ea26E1ebF7633444",
    "transactionIndex": 63,
    "gasUsed": "440783",
    "logsBloom": "0x00000000000000000000000000000400000000000000000000000000000000000000040000000000000000000000000000000000000110000000000000020080000000000000000040000000008000000000000000000000000000002000000000000000000000000000000000000000002000080000000000000000000000000000010000000000000000000000000000000020000000200000000000000000001000000000040000000010000000000004000000000001008000040000000000000010000000000000000000005200000000000000000000000000000000000000000000000000000000000100000000000000001000000000000000000000",
    "blockHash": "0x5516bcf32edc4d8c7fb9643c4ebdd3d2da347786a556c97dec33a9ea6603d5a1",
    "transactionHash": "0xc22860714cf1d8334b03c25f32d16b3a098f4a5fa0a939ba4b4c92b6c9b77537",
    "logs": [
      {
        "transactionIndex": 63,
        "blockNumber": 17939397,
        "transactionHash": "0xc22860714cf1d8334b03c25f32d16b3a098f4a5fa0a939ba4b4c92b6c9b77537",
        "address": "0xa58E81fe9b61B5c3fE2AFD33CF304c454AbFc7Cb",
        "topics": [
          "0x6ada868dd3058cf77a48a74489fd7963688e5464b2b0fa957ace976243270e92",
          "0x000000000000000000000000d04b04f72be9e3a9cf7e97a0ea26e1ebf7633444",
          "0x2b71f00b9089255e0058493a5cc1fade9419f503c163a1766c88915a7d0470f4"
        ],
        "data": "0x",
        "logIndex": 255,
        "blockHash": "0x5516bcf32edc4d8c7fb9643c4ebdd3d2da347786a556c97dec33a9ea6603d5a1"
      },
      {
        "transactionIndex": 63,
        "blockNumber": 17939397,
        "transactionHash": "0xc22860714cf1d8334b03c25f32d16b3a098f4a5fa0a939ba4b4c92b6c9b77537",
        "address": "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
        "topics": [
          "0xce0457fe73731f824cc272376169235128c118b49d344817417c6d108d155e82",
          "0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2",
          "0x6e58efe3cc43b3ab57b4d1b6375bfb02ec71a04670a8bc700ad822685bd77d00"
        ],
        "data": "0x000000000000000000000000c17cb209d5abdb2d00f566a1e48f558debc264e1",
        "logIndex": 256,
        "blockHash": "0x5516bcf32edc4d8c7fb9643c4ebdd3d2da347786a556c97dec33a9ea6603d5a1"
      },
      {
        "transactionIndex": 63,
        "blockNumber": 17939397,
        "transactionHash": "0xc22860714cf1d8334b03c25f32d16b3a098f4a5fa0a939ba4b4c92b6c9b77537",
        "address": "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
        "topics": [
          "0x335721b01866dc23fbee8b6b2c7b1e14d6f05c28cd35a2c934239f94095602a0",
          "0x2b71f00b9089255e0058493a5cc1fade9419f503c163a1766c88915a7d0470f4"
        ],
        "data": "0x000000000000000000000000231b0ee14048e9dccd1d247744d114a4eb5e8e63",
        "logIndex": 257,
        "blockHash": "0x5516bcf32edc4d8c7fb9643c4ebdd3d2da347786a556c97dec33a9ea6603d5a1"
      }
    ],
    "blockNumber": 17939397,
    "cumulativeGasUsed": "7791487",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
    "0xF03021AAa150C0d3A57E62D2C64B4b8C064be8B1",
    "0xc17cB209D5aBdb2d00f566a1E48F558DEBC264E1"
  ],
  "numDeployments": 1,
  "solcInputHash": "7331d540f29a35a261d4daf89b5d421d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ENS\",\"name\":\"_ensRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ensGuilds\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reverseRecordOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ensGuilds\",\"outputs\":[{\"internalType\":\"contract IENSGuilds\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"guildFees\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feePaidTo\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"guildHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feePaidTo\",\"type\":\"address\"}],\"name\":\"setFlatFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"guildHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tagClaimFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feePaidTo\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"setFlatFee(bytes32,address,uint256,address)\":{\"params\":{\"fee\":\"The amount (in base unit) that must be paid\",\"feePaidTo\":\"The address that should receive payment of the fee\",\"feeToken\":\"The token contract the fee must be paid in (if any). Address(0) designates native Ether.\",\"guildHash\":\"The ENS namehash of the guild's domain\"}},\"tagClaimFee(bytes32,string,address,bytes)\":{\"params\":{\"claimant\":\"The address attempting to claim the tag (not necessarily the address that will receive it)\",\"extraClaimArgs\":\"Any additional arguments that would be passed by the minter to the claimGuildTag() function\",\"guildHash\":\"The ENS namehash of the guild's domain\",\"tag\":\"The tag being claimed (e.g. 'foo' for foo.my-guild.eth)\"},\"returns\":{\"fee\":\"The amount (in base unit) that must be paid\",\"feePaidTo\":\"The address that should receive payment of the fee\",\"tokenContract\":\"The token contract the fee must be paid in (if any). Address(0) designates native Ether.\"}}},\"title\":\"FlatFeePolicy\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setFlatFee(bytes32,address,uint256,address)\":{\"notice\":\"Configures a flat fee for the given guild. The caller must be the guild's admin\"},\"tagClaimFee(bytes32,string,address,bytes)\":{\"notice\":\"Returns the fee required to mint the given guild tag by the given minter\"}},\"notice\":\"A common implementation of IFeePolicy that can be used to configure flat-rate fees for multiple guilds simultaneously\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/feePolicies/FlatFeePolicy.sol\":\"FlatFeePolicy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@ensdomains/ens-contracts/contracts/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface ENS {\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner\\n    ) external returns (bytes32);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setOwner(bytes32 node, address owner) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function owner(bytes32 node) external view returns (address);\\n\\n    function resolver(bytes32 node) external view returns (address);\\n\\n    function ttl(bytes32 node) external view returns (uint64);\\n\\n    function recordExists(bytes32 node) external view returns (bool);\\n\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7cb1158c7d268b63de1468e28e2711b28d686e2628ddb22da2149cd93ddeafda\"},\"@ensdomains/ens-contracts/contracts/reverseRegistrar/IReverseRegistrar.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface IReverseRegistrar {\\n    function setDefaultResolver(address resolver) external;\\n\\n    function claim(address owner) external returns (bytes32);\\n\\n    function claimForAddr(\\n        address addr,\\n        address owner,\\n        address resolver\\n    ) external returns (bytes32);\\n\\n    function claimWithResolver(\\n        address owner,\\n        address resolver\\n    ) external returns (bytes32);\\n\\n    function setName(string memory name) external returns (bytes32);\\n\\n    function setNameForAddr(\\n        address addr,\\n        address owner,\\n        address resolver,\\n        string memory name\\n    ) external returns (bytes32);\\n\\n    function node(address addr) external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0x83adfcf6da72b1bcd1e3ac387afe5fc7fdf7f2ac28b7601544d2ca4b9d45d159\"},\"@ensdomains/ens-contracts/contracts/reverseRegistrar/ReverseClaimer.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.17 <0.9.0;\\n\\nimport {ENS} from \\\"../registry/ENS.sol\\\";\\nimport {IReverseRegistrar} from \\\"../reverseRegistrar/IReverseRegistrar.sol\\\";\\n\\ncontract ReverseClaimer {\\n    bytes32 constant ADDR_REVERSE_NODE =\\n        0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\\n\\n    constructor(ENS ens, address claimant) {\\n        IReverseRegistrar reverseRegistrar = IReverseRegistrar(\\n            ens.owner(ADDR_REVERSE_NODE)\\n        );\\n        reverseRegistrar.claim(claimant);\\n    }\\n}\\n\",\"keccak256\":\"0x78a28627241535b595f6fff476a1fa7acc90c80684fe7784734920fc8af6fc22\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) internal view returns (bool[] memory) {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     *\\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\\n     * should be exercised when using this function.\\n     *\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x5a08ad61f4e82b8a3323562661a86fb10b10190848073fdc13d4ac43710ffba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/ensGuilds/interfaces/IENSGuilds.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport { IERC1155MetadataURI } from \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\n\\ninterface IENSGuilds is IERC1155MetadataURI {\\n    /** Events */\\n    event Registered(bytes32 indexed guildEnsNode);\\n    event Deregistered(bytes32 indexed guildEnsNode);\\n    event TagClaimed(bytes32 indexed guildEnsNode, bytes32 indexed tagHash, address recipient);\\n    event TagTransferred(bytes32 indexed guildEnsNode, bytes32 indexed tagHash, address from, address to);\\n    event TagRevoked(bytes32 indexed guildEnsNode, bytes32 indexed tagHash);\\n    event FeePolicyUpdated(bytes32 indexed guildEnsNode, address feePolicy);\\n    event TagsAuthPolicyUpdated(bytes32 indexed guildEnsNode, address tagsAuthPolicy);\\n    event AdminTransferred(bytes32 indexed guildEnsNode, address newAdmin);\\n    event SetActive(bytes32 indexed guildEnsNode, bool active);\\n    event TokenUriSet(bytes32 indexed guildEnsNode, string uri);\\n\\n    /* Functions */\\n\\n    /**\\n     * @notice Registers a new guild from an existing ENS domain.\\n     * Caller must be the ENS node's owner and ENSGuilds must have been designated an \\\"operator\\\" for the caller.\\n     * @param ensName The guild's full ENS name (e.g. 'my-guild.eth')\\n     * @param guildAdmin The address that will administrate this guild\\n     * @param feePolicy The address of an implementation of FeePolicy to use for minting new tags within this guild\\n     * @param tagsAuthPolicy The address of an implementation of TagsAuthPolicy to use for minting new tags\\n     * within this guild\\n     */\\n    function registerGuild(\\n        string calldata ensName,\\n        address guildAdmin,\\n        address feePolicy,\\n        address tagsAuthPolicy\\n    ) external;\\n\\n    /**\\n     * @notice De-registers a registered guild.\\n     * Designates guild as inactive and marks all tags previously minted for that guild as eligible for revocation.\\n     * @param guildEnsNode The ENS namehash of the guild's domain\\n     */\\n    function deregisterGuild(bytes32 guildEnsNode) external;\\n\\n    /**\\n     * @notice Claims a guild tag\\n     * @param guildEnsNode The namehash of the guild for which the tag should be claimed (e.g. namehash('my-guild.eth'))\\n     * @param tag The tag name to claim (e.g. 'foo' for foo.my-guild.eth). Assumes `tag` is already normalized per\\n     * ENS Name Processing rules\\n     * @param recipient The address that will receive this guild tag (usually same as the caller)\\n     * @param extraClaimArgs [Optional] Any additional arguments necessary for guild-specific logic,\\n     *  such as authorization\\n     */\\n    function claimGuildTag(\\n        bytes32 guildEnsNode,\\n        string calldata tag,\\n        address recipient,\\n        bytes calldata extraClaimArgs\\n    ) external payable;\\n\\n    /**\\n     * @notice Transfers an existing guild tag\\n     * @param guildEnsNode The namehash of the guild for which the tag should be transferred\\n     * (e.g. namehash('my-guild.eth'))\\n     * @param tag The tag name to transfer (e.g. 'foo' for foo.my-guild.eth). Assumes `tag` is already normalized per\\n     * ENS Name Processing rules\\n     * @param recipient The address that will receive this guild tag\\n     * @param extraTransferArgs [Optional] Any additional arguments necessary for guild-specific logic,\\n     *  such as authorization\\n     */\\n    function transferGuildTag(\\n        bytes32 guildEnsNode,\\n        string calldata tag,\\n        address recipient,\\n        bytes calldata extraTransferArgs\\n    ) external;\\n\\n    /**\\n     * @notice Claims multiple tags for a guild at once\\n     * @param guildEnsNode The ENS namehash of the guild's domain\\n     * @param tags Tags to be claimed\\n     * @param recipients Recipients of each tag to be claimed\\n     * @param extraClaimArgs Per-tag extra arguments required for guild-specific logic, such as authorization.\\n     * Must have same length as array of tagHashes, even if each array element is itself empty bytes\\n     */\\n    function claimGuildTagsBatch(\\n        bytes32 guildEnsNode,\\n        string[] calldata tags,\\n        address[] calldata recipients,\\n        bytes[] calldata extraClaimArgs\\n    ) external payable;\\n\\n    /**\\n     * @notice Returns the current owner of the given guild tag.\\n     * Returns address(0) if no such guild or tag exists, or if the guild has been deregistered.\\n     * @param guildEnsNode The ENS namehash of the guild's domain\\n     * @param tagHash The ENS namehash of the tag (e.g. keccak256('foo') for foo.my-guild.eth)\\n     */\\n    function tagOwner(bytes32 guildEnsNode, bytes32 tagHash) external view returns (address);\\n\\n    /**\\n     * @notice Attempts to revoke an existing guild tag, if authorized by the guild's AuthPolicy.\\n     * Deregistered guilds will bypass auth checks for revocation of all tags.\\n     * @param guildEnsNode The ENS namehash of the guild's domain\\n     * @param tag The tag to revoke\\n     * @param extraData [Optional] Any additional arguments necessary for assessing whether a tag may be revoked\\n     */\\n    function revokeGuildTag(bytes32 guildEnsNode, string calldata tag, bytes calldata extraData) external;\\n\\n    /**\\n     * @notice Attempts to revoke multiple guild tags\\n     * @param guildEnsNode The ENS namehash of the guild's domain\\n     * @param tags tags to revoke\\n     * @param extraData Additional arguments necessary for assessing whether a tag may be revoked\\n     */\\n    function revokeGuildTagsBatch(bytes32 guildEnsNode, string[] calldata tags, bytes[] calldata extraData) external;\\n\\n    /**\\n     * @notice Updates the FeePolicy for an existing guild. May only be called by the guild's registered admin.\\n     * @param guildEnsNode The ENS namehash of the guild's domain\\n     * @param feePolicy The address of an implementation of FeePolicy to use for minting new tags within this guild\\n     */\\n    function updateGuildFeePolicy(bytes32 guildEnsNode, address feePolicy) external;\\n\\n    /**\\n     * @notice Updates the TagsAuthPolicy for an existing guild. May only be called by the guild's registered admin.\\n     * @param guildEnsNode The ENS namehash of the guild's domain\\n     * @param tagsAuthPolicy The address of an implementation of TagsAuthPolicy to use for\\n     * minting new tags within this guild\\n     */\\n    function updateGuildTagsAuthPolicy(bytes32 guildEnsNode, address tagsAuthPolicy) external;\\n\\n    /**\\n     * @notice Sets the metadata URI string for fetching metadata for a guild's tag NFTs.\\n     * May only be called by the guild's registered admin.\\n     * @param guildEnsNode The ENS namehash of the guild's domain\\n     * @param uri The ERC1155 metadata URL template\\n     */\\n    function setGuildTokenUri(bytes32 guildEnsNode, string calldata uri) external;\\n\\n    /**\\n     * @notice Sets a guild as active or inactive. May only be called by the guild's registered admin.\\n     * @param guildEnsNode The ENS namehash of the guild's domain\\n     * @param active The new status\\n     */\\n    function setGuildActive(bytes32 guildEnsNode, bool active) external;\\n\\n    /**\\n     * @notice Returns the current admin registered for the given guild.\\n     * @param guildEnsNode The ENS namehash of the guild's domain\\n     */\\n    function guildAdmin(bytes32 guildEnsNode) external view returns (address);\\n\\n    /**\\n     * @notice Transfers the role of guild admin to the given address.\\n     * May only be called by the guild's registered admin.\\n     * @param guildEnsNode The ENS namehash of the guild's domain\\n     * @param newAdmin The new admin\\n     */\\n    function transferGuildAdmin(bytes32 guildEnsNode, address newAdmin) external;\\n\\n    /**\\n     * @notice Registers a resolver for the guild's root ENS name that will\\n     * answer queries about the parent name itself, or any child names that are\\n     * not Guild tags\\n     * @param guildEnsNode The ENS namehash of the guild's domain\\n     * @param fallbackResolver The fallback resolver\\n     */\\n    function setFallbackResolver(bytes32 guildEnsNode, address fallbackResolver) external;\\n}\\n\",\"keccak256\":\"0xdd1351df064ede50cdf43fa12e52be847dda264f534acf845096ad4e43343e84\",\"license\":\"MIT\"},\"contracts/feePolicies/FeePolicyBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport { ERC165 } from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\nimport { IFeePolicy } from \\\"./IFeePolicy.sol\\\";\\n\\nabstract contract FeePolicyBase is ERC165, IFeePolicy {\\n    function supportsInterface(bytes4 interfaceID) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceID == type(IFeePolicy).interfaceId || super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0xaad5e3366f764c178563720d0c51ea715a8b3a50b84cace7dd3c1940aafafd39\",\"license\":\"MIT\"},\"contracts/feePolicies/FlatFeePolicy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport { ReverseClaimer } from \\\"@ensdomains/ens-contracts/contracts/reverseRegistrar/ReverseClaimer.sol\\\";\\nimport { ENS } from \\\"@ensdomains/ens-contracts/contracts/registry/ENS.sol\\\";\\nimport { ERC165Checker } from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport { Context } from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport { FeePolicyBase } from \\\"./FeePolicyBase.sol\\\";\\nimport { IENSGuilds } from \\\"../ensGuilds/interfaces/IENSGuilds.sol\\\";\\nimport { IFeePolicy } from \\\"./IFeePolicy.sol\\\"; // solhint-disable-line no-unused-import\\n\\n/**\\n * @title FlatFeePolicy\\n * @notice A common implementation of IFeePolicy that can be used to configure\\n * flat-rate fees for multiple guilds simultaneously\\n */\\ncontract FlatFeePolicy is Context, FeePolicyBase, ReverseClaimer {\\n    using ERC165Checker for address;\\n\\n    IENSGuilds public immutable ensGuilds;\\n    struct FeeInfo {\\n        address feeToken;\\n        uint256 fee;\\n        address feePaidTo;\\n    }\\n    mapping(bytes32 => FeeInfo) public guildFees;\\n\\n    constructor(\\n        ENS _ensRegistry,\\n        address _ensGuilds,\\n        address reverseRecordOwner\\n    ) ReverseClaimer(_ensRegistry, reverseRecordOwner) {\\n        // solhint-disable-next-line reason-string, custom-errors\\n        require(_ensGuilds.supportsInterface(type(IENSGuilds).interfaceId));\\n        ensGuilds = IENSGuilds(_ensGuilds);\\n    }\\n\\n    /**\\n     * @notice Configures a flat fee for the given guild. The caller must be the guild's admin\\n     * @param guildHash The ENS namehash of the guild's domain\\n     * @param feeToken The token contract the fee must be paid in (if any). Address(0) designates native Ether.\\n     * @param fee The amount (in base unit) that must be paid\\n     * @param feePaidTo The address that should receive payment of the fee\\n     */\\n    function setFlatFee(bytes32 guildHash, address feeToken, uint256 fee, address feePaidTo) external {\\n        // caller must be guild admin\\n        // solhint-disable-next-line reason-string, custom-errors\\n        require(ensGuilds.guildAdmin(guildHash) == _msgSender());\\n\\n        guildFees[guildHash] = FeeInfo({ feeToken: feeToken, fee: fee, feePaidTo: feePaidTo });\\n    }\\n\\n    /**\\n     * @inheritdoc IFeePolicy\\n     */\\n    function tagClaimFee(\\n        bytes32 guildHash,\\n        string calldata,\\n        address,\\n        bytes calldata\\n    ) external view virtual override returns (address tokenContract, uint256 fee, address feePaidTo) {\\n        FeeInfo storage feeInfo = guildFees[guildHash];\\n        return (feeInfo.feeToken, feeInfo.fee, feeInfo.feePaidTo);\\n    }\\n}\\n\",\"keccak256\":\"0x37d05dc988137e7d7182789401f7c501046905e30c9b0b9457e4f85d635449d3\",\"license\":\"MIT\"},\"contracts/feePolicies/IFeePolicy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title IFeePolicy\\n * @notice An interface for Guilds to implement that will specify how fees must be paid for guild tag mints\\n */\\ninterface IFeePolicy is IERC165 {\\n    /**\\n     * @notice Returns the fee required to mint the given guild tag by the given minter\\n     * @param guildHash The ENS namehash of the guild's domain\\n     * @param tag The tag being claimed (e.g. 'foo' for foo.my-guild.eth)\\n     * @param claimant The address attempting to claim the tag (not necessarily the address that will receive it)\\n     * @param extraClaimArgs Any additional arguments that would be passed by the minter to the claimGuildTag() function\\n     * @return tokenContract The token contract the fee must be paid in (if any). Address(0) designates native Ether.\\n     * @return fee The amount (in base unit) that must be paid\\n     * @return feePaidTo The address that should receive payment of the fee\\n     */\\n    function tagClaimFee(\\n        bytes32 guildHash,\\n        string calldata tag,\\n        address claimant,\\n        bytes calldata extraClaimArgs\\n    ) external view returns (address tokenContract, uint256 fee, address feePaidTo);\\n}\\n\",\"keccak256\":\"0xcedaee675b1738cf00b4260530a3095ebe9ddecd2a3c28571865827194bf249c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161088d38038061088d83398101604081905261002f9161026d565b6040516302571be360e01b81527f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e26004820152839082906000906001600160a01b038416906302571be390602401602060405180830381865afa15801561009a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100be91906102ba565b604051630f41a04d60e11b81526001600160a01b03848116600483015291925090821690631e83409a906024016020604051808303816000875af115801561010a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061012e91906102d7565b505050506101596301d37a4160e51b836001600160a01b031661017560201b6102e11790919060201c565b61016257600080fd5b506001600160a01b0316608052506102f0565b600061018083610198565b8015610191575061019183836101cc565b9392505050565b60006101ab826301ffc9a760e01b6101cc565b80156101c657506101c4826001600160e01b03196101cc565b155b92915050565b604080516001600160e01b03198316602480830191909152825180830390910181526044909101909152602080820180516001600160e01b03166301ffc9a760e01b178152825160009392849283928392918391908a617530fa92503d9150600051905082801561023e575060208210155b801561024a5750600081115b979650505050505050565b6001600160a01b038116811461026a57600080fd5b50565b60008060006060848603121561028257600080fd5b835161028d81610255565b602085015190935061029e81610255565b60408501519092506102af81610255565b809150509250925092565b6000602082840312156102cc57600080fd5b815161019181610255565b6000602082840312156102e957600080fd5b5051919050565b60805161057b6103126000396000818161015101526101e5015261057b6000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c806337f83f341161005057806337f83f34146100a95780635a50dc7e1461010d578063e2443ad21461014c57600080fd5b806301ffc9a71461006c57806303eb8bf714610094575b600080fd5b61007f61007a3660046103d5565b61018b565b60405190151581526020015b60405180910390f35b6100a76100a2366004610417565b6101c2565b005b6100e36100b7366004610461565b6000602081905290815260409020805460018201546002909201546001600160a01b0391821692911683565b604080516001600160a01b039485168152602081019390935292169181019190915260600161008b565b6100e361011b3660046104c3565b50505060009283525050602081905260409020805460018201546002909201546001600160a01b0391821693911690565b6101737f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161008b565b60006001600160e01b03198216632d286e3f60e11b14806101bc57506301ffc9a760e01b6001600160e01b03198316145b92915050565b3360405163022c977f60e01b8152600481018690526001600160a01b03918216917f0000000000000000000000000000000000000000000000000000000000000000169063022c977f90602401602060405180830381865afa15801561022c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102509190610551565b6001600160a01b03161461026357600080fd5b604080516060810182526001600160a01b03948516815260208082019485529285168183019081526000968752928690529420935184549084167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216178555915160018501555160029093018054939092169216919091179055565b60006102ec83610304565b80156102fd57506102fd8383610337565b9392505050565b6000610317826301ffc9a760e01b610337565b80156101bc5750610330826001600160e01b0319610337565b1592915050565b604080516001600160e01b03198316602480830191909152825180830390910181526044909101909152602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166301ffc9a760e01b178152825160009392849283928392918391908a617530fa92503d915060005190508280156103be575060208210155b80156103ca5750600081115b979650505050505050565b6000602082840312156103e757600080fd5b81356001600160e01b0319811681146102fd57600080fd5b6001600160a01b038116811461041457600080fd5b50565b6000806000806080858703121561042d57600080fd5b84359350602085013561043f816103ff565b9250604085013591506060850135610456816103ff565b939692955090935050565b60006020828403121561047357600080fd5b5035919050565b60008083601f84011261048c57600080fd5b50813567ffffffffffffffff8111156104a457600080fd5b6020830191508360208285010111156104bc57600080fd5b9250929050565b600080600080600080608087890312156104dc57600080fd5b86359550602087013567ffffffffffffffff808211156104fb57600080fd5b6105078a838b0161047a565b90975095506040890135915061051c826103ff565b9093506060880135908082111561053257600080fd5b5061053f89828a0161047a565b979a9699509497509295939492505050565b60006020828403121561056357600080fd5b81516102fd816103ff56fea164736f6c6343000811000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100675760003560e01c806337f83f341161005057806337f83f34146100a95780635a50dc7e1461010d578063e2443ad21461014c57600080fd5b806301ffc9a71461006c57806303eb8bf714610094575b600080fd5b61007f61007a3660046103d5565b61018b565b60405190151581526020015b60405180910390f35b6100a76100a2366004610417565b6101c2565b005b6100e36100b7366004610461565b6000602081905290815260409020805460018201546002909201546001600160a01b0391821692911683565b604080516001600160a01b039485168152602081019390935292169181019190915260600161008b565b6100e361011b3660046104c3565b50505060009283525050602081905260409020805460018201546002909201546001600160a01b0391821693911690565b6101737f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161008b565b60006001600160e01b03198216632d286e3f60e11b14806101bc57506301ffc9a760e01b6001600160e01b03198316145b92915050565b3360405163022c977f60e01b8152600481018690526001600160a01b03918216917f0000000000000000000000000000000000000000000000000000000000000000169063022c977f90602401602060405180830381865afa15801561022c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102509190610551565b6001600160a01b03161461026357600080fd5b604080516060810182526001600160a01b03948516815260208082019485529285168183019081526000968752928690529420935184549084167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216178555915160018501555160029093018054939092169216919091179055565b60006102ec83610304565b80156102fd57506102fd8383610337565b9392505050565b6000610317826301ffc9a760e01b610337565b80156101bc5750610330826001600160e01b0319610337565b1592915050565b604080516001600160e01b03198316602480830191909152825180830390910181526044909101909152602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166301ffc9a760e01b178152825160009392849283928392918391908a617530fa92503d915060005190508280156103be575060208210155b80156103ca5750600081115b979650505050505050565b6000602082840312156103e757600080fd5b81356001600160e01b0319811681146102fd57600080fd5b6001600160a01b038116811461041457600080fd5b50565b6000806000806080858703121561042d57600080fd5b84359350602085013561043f816103ff565b9250604085013591506060850135610456816103ff565b939692955090935050565b60006020828403121561047357600080fd5b5035919050565b60008083601f84011261048c57600080fd5b50813567ffffffffffffffff8111156104a457600080fd5b6020830191508360208285010111156104bc57600080fd5b9250929050565b600080600080600080608087890312156104dc57600080fd5b86359550602087013567ffffffffffffffff808211156104fb57600080fd5b6105078a838b0161047a565b90975095506040890135915061051c826103ff565b9093506060880135908082111561053257600080fd5b5061053f89828a0161047a565b979a9699509497509295939492505050565b60006020828403121561056357600080fd5b81516102fd816103ff56fea164736f6c6343000811000a",
  "libraries": {
    "ERC165Checker": "0x7EB821Aa0cA01198A9EC28ee9f5d7491508233e4",
    "StringParsing": "0xe0c9b7B08a9A409eA6537c8fb307CE6758CfEd16",
    "Strings": "0x572CbB4dbd1f3bB4E23Cc3d8F4460B3E6d871826",
    "NameEncoder": "0x2b1D7EE297A345fF0C57B3c3B0F34b59951756b1",
    "ENSNameHash": "0x969254c8EC87eF59BeB6F6eA928f1A00bb649Ecc",
    "ENSByteUtils": "0x4A44B0Af7483Eb232F606418Aa099ad453F95A02",
    "ENSParentName": "0xeE1CcD12e954bFD828EEb4Ca3B76cfE4cbc42C76"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "setFlatFee(bytes32,address,uint256,address)": {
        "params": {
          "fee": "The amount (in base unit) that must be paid",
          "feePaidTo": "The address that should receive payment of the fee",
          "feeToken": "The token contract the fee must be paid in (if any). Address(0) designates native Ether.",
          "guildHash": "The ENS namehash of the guild's domain"
        }
      },
      "tagClaimFee(bytes32,string,address,bytes)": {
        "params": {
          "claimant": "The address attempting to claim the tag (not necessarily the address that will receive it)",
          "extraClaimArgs": "Any additional arguments that would be passed by the minter to the claimGuildTag() function",
          "guildHash": "The ENS namehash of the guild's domain",
          "tag": "The tag being claimed (e.g. 'foo' for foo.my-guild.eth)"
        },
        "returns": {
          "fee": "The amount (in base unit) that must be paid",
          "feePaidTo": "The address that should receive payment of the fee",
          "tokenContract": "The token contract the fee must be paid in (if any). Address(0) designates native Ether."
        }
      }
    },
    "title": "FlatFeePolicy",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "setFlatFee(bytes32,address,uint256,address)": {
        "notice": "Configures a flat fee for the given guild. The caller must be the guild's admin"
      },
      "tagClaimFee(bytes32,string,address,bytes)": {
        "notice": "Returns the fee required to mint the given guild tag by the given minter"
      }
    },
    "notice": "A common implementation of IFeePolicy that can be used to configure flat-rate fees for multiple guilds simultaneously",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10030,
        "contract": "contracts/feePolicies/FlatFeePolicy.sol:FlatFeePolicy",
        "label": "guildFees",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(FeeInfo)10025_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_struct(FeeInfo)10025_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct FlatFeePolicy.FeeInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(FeeInfo)10025_storage"
      },
      "t_struct(FeeInfo)10025_storage": {
        "encoding": "inplace",
        "label": "struct FlatFeePolicy.FeeInfo",
        "members": [
          {
            "astId": 10020,
            "contract": "contracts/feePolicies/FlatFeePolicy.sol:FlatFeePolicy",
            "label": "feeToken",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 10022,
            "contract": "contracts/feePolicies/FlatFeePolicy.sol:FlatFeePolicy",
            "label": "fee",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10024,
            "contract": "contracts/feePolicies/FlatFeePolicy.sol:FlatFeePolicy",
            "label": "feePaidTo",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}