{
  "address": "0x5E311Cc94e7615B68B426eC130504978a8951A42",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ENS",
          "name": "_ensRegistry",
          "type": "address"
        },
        {
          "internalType": "contract IENSGuilds",
          "name": "ensGuilds",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "reverseRecordOwner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "guildHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        }
      ],
      "name": "allowMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "guildHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "claimant",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "canClaimTag",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "canRevokeTag",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "transferredBy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "currentOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "canTransferTag",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "guildHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        }
      ],
      "name": "disallowMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ensGuilds",
      "outputs": [
        {
          "internalType": "contract IENSGuilds",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "guildAllowlists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "guildEnsNode",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "tag",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "claimant",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "extraClaimArgs",
          "type": "bytes"
        }
      ],
      "name": "onTagClaimed",
      "outputs": [
        {
          "internalType": "string",
          "name": "tagToRevoke",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "revokedBy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "revokedFrom",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "guildEnsNode",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "tag",
          "type": "string"
        }
      ],
      "name": "onTagRevoked",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "guildEnsNode",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "tag",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "transferredBy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "prevOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "onTagTransferred",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xbb51a38fbeea142b792a76776c2afee2020c52cd3e73d7d459c78137fc2518f8",
  "receipt": {
    "to": null,
    "from": "0xB6a6c32CCe5B5E963277A66019309EBf13f59F12",
    "contractAddress": "0x5E311Cc94e7615B68B426eC130504978a8951A42",
    "transactionIndex": 94,
    "gasUsed": "720724",
    "logsBloom": "0x00000000000000800000000000080000000000000000000000000000000000000000040000000000000000000020000000040000000010001000000000020000000000008000000040000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000200000000000000000000000000020000000200000000000000000000000000000040020000010000000000004000000000001008000040000000000000000000000002000000000005000000000000000000000000000000000000000000000000000000000000100000000000000001000000000000000000000",
    "blockHash": "0xeea7f7fb7dea68e5ad42e14c4aabd80c22fefc35bc6dbb94606ca59a740ac05a",
    "transactionHash": "0xbb51a38fbeea142b792a76776c2afee2020c52cd3e73d7d459c78137fc2518f8",
    "logs": [
      {
        "transactionIndex": 94,
        "blockNumber": 17939395,
        "transactionHash": "0xbb51a38fbeea142b792a76776c2afee2020c52cd3e73d7d459c78137fc2518f8",
        "address": "0xa58E81fe9b61B5c3fE2AFD33CF304c454AbFc7Cb",
        "topics": [
          "0x6ada868dd3058cf77a48a74489fd7963688e5464b2b0fa957ace976243270e92",
          "0x0000000000000000000000005e311cc94e7615b68b426ec130504978a8951a42",
          "0x278f861cbe9ecff61722635f89399e2c97779c8364a2ec77009be53c432b90b7"
        ],
        "data": "0x",
        "logIndex": 153,
        "blockHash": "0xeea7f7fb7dea68e5ad42e14c4aabd80c22fefc35bc6dbb94606ca59a740ac05a"
      },
      {
        "transactionIndex": 94,
        "blockNumber": 17939395,
        "transactionHash": "0xbb51a38fbeea142b792a76776c2afee2020c52cd3e73d7d459c78137fc2518f8",
        "address": "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
        "topics": [
          "0xce0457fe73731f824cc272376169235128c118b49d344817417c6d108d155e82",
          "0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2",
          "0x9ce54c4af3b01ae2ed4583827ffae9916678a8c2b86fef88f3defc87a34a4017"
        ],
        "data": "0x000000000000000000000000c17cb209d5abdb2d00f566a1e48f558debc264e1",
        "logIndex": 154,
        "blockHash": "0xeea7f7fb7dea68e5ad42e14c4aabd80c22fefc35bc6dbb94606ca59a740ac05a"
      },
      {
        "transactionIndex": 94,
        "blockNumber": 17939395,
        "transactionHash": "0xbb51a38fbeea142b792a76776c2afee2020c52cd3e73d7d459c78137fc2518f8",
        "address": "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
        "topics": [
          "0x335721b01866dc23fbee8b6b2c7b1e14d6f05c28cd35a2c934239f94095602a0",
          "0x278f861cbe9ecff61722635f89399e2c97779c8364a2ec77009be53c432b90b7"
        ],
        "data": "0x000000000000000000000000231b0ee14048e9dccd1d247744d114a4eb5e8e63",
        "logIndex": 155,
        "blockHash": "0xeea7f7fb7dea68e5ad42e14c4aabd80c22fefc35bc6dbb94606ca59a740ac05a"
      }
    ],
    "blockNumber": 17939395,
    "cumulativeGasUsed": "7407709",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
    "0xF03021AAa150C0d3A57E62D2C64B4b8C064be8B1",
    "0xc17cB209D5aBdb2d00f566a1E48F558DEBC264E1"
  ],
  "numDeployments": 1,
  "solcInputHash": "7331d540f29a35a261d4daf89b5d421d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ENS\",\"name\":\"_ensRegistry\",\"type\":\"address\"},{\"internalType\":\"contract IENSGuilds\",\"name\":\"ensGuilds\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reverseRecordOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"guildHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"allowMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"guildHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"canClaimTag\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"canRevokeTag\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"transferredBy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currentOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"canTransferTag\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"guildHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"disallowMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ensGuilds\",\"outputs\":[{\"internalType\":\"contract IENSGuilds\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"guildAllowlists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"guildEnsNode\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"tag\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"extraClaimArgs\",\"type\":\"bytes\"}],\"name\":\"onTagClaimed\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tagToRevoke\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"revokedBy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"revokedFrom\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"guildEnsNode\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"tag\",\"type\":\"string\"}],\"name\":\"onTagRevoked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"guildEnsNode\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"tag\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"transferredBy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"onTagTransferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"canClaimTag(bytes32,string,address,address,bytes)\":{\"params\":{\"claimant\":\"The address attempting to claim the tag (not necessarily the address that will receive it)\",\"extraClaimArgs\":\"[Optional] Any guild-specific additional arguments required\",\"guildEnsNode\":\"The ENS namehash of the guild's domain\",\"recipient\":\"The address that would receive the tag\",\"tag\":\"The tag being claimed (e.g. 'foo' for foo.my-guild.eth)\"}},\"canRevokeTag(address,bytes32,string,bytes)\":{\"params\":{\"extraRevokeArgs\":\"Any additional arguments necessary for assessing whether a tag may be revoked\",\"guildEnsNode\":\"The ENS namehash of the guild's domain\",\"revokedBy\":\"The address that would attempt to revoke it\",\"tag\":\"The tag being revoked (e.g. 'foo' for foo.my-guild.eth)\"}},\"canTransferTag(bytes32,string,address,address,address,bytes)\":{\"params\":{\"currentOwner\":\"The address currently owning the given tag\",\"extraTransferArgs\":\"Any additional arguments necessary for assessing whether a tag may be transferred\",\"guildEnsNode\":\"The ENS namehash of the guild's domain\",\"newOwner\":\"The address that would receive the tag\",\"tag\":\"The tag being revoked (e.g. 'foo' for foo.my-guild.eth)\",\"transferredBy\":\"The address initiating the transfer. May be different than the currentOwner, such as an admin or a marketplace contract\"}},\"onTagClaimed(bytes32,string,address,address,bytes)\":{\"details\":\"protects against reentrancy and checks that caller is the Guilds contract. Updating any state is deferred to the implementation.\",\"params\":{\"claimant\":\"The address that claimed the tag (not necessarily the address that received it)\",\"extraClaimArgs\":\"[Optional] Any guild-specific additional arguments required\",\"guildEnsNode\":\"The ENS namehash of the guild's domain\",\"recipient\":\"The address that received receive the tag\",\"tag\":\"The tag being claimed (e.g. 'foo' for foo.my-guild.eth)\"},\"returns\":{\"tagToRevoke\":\"Any tag that should be revoked as a consequence of the given tag being claimed. Returns empty string if no tag should be revoked.\"}},\"onTagRevoked(address,address,bytes32,string)\":{\"details\":\"protects against reentrancy and checks that caller is the Guilds contract. Updating any state is deferred to the implementation.\",\"params\":{\"guildEnsNode\":\"The ENS namehash of the guild's domain\",\"revokedBy\":\"The address that revoked it\",\"revokedFrom\":\"The address who owned it when it was revoked\",\"tag\":\"The tag being revoked (e.g. 'foo' for foo.my-guild.eth)\"}},\"onTagTransferred(bytes32,string,address,address,address)\":{\"details\":\"protects against reentrancy and checks that caller is the Guilds contract. Updating any state is deferred to the implementation.\",\"params\":{\"guildEnsNode\":\"The ENS namehash of the guild's domain\",\"newOwner\":\"The address that received the tag\",\"prevOwner\":\"The address that previously owned the tag\",\"tag\":\"The tag that was transferred\",\"transferredBy\":\"The address initiating the transfer\"}}},\"title\":\"AllowlistTagsAuthPolicy\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"canClaimTag(bytes32,string,address,address,bytes)\":{\"notice\":\"Checks whether a certain address (claimant) may claim a given guild tag that has been revoked or has never been claimed\"},\"canRevokeTag(address,bytes32,string,bytes)\":{\"notice\":\"Checks whether a given guild tag is eligible to be revoked\"},\"canTransferTag(bytes32,string,address,address,address,bytes)\":{\"notice\":\"Checks whether a tag can be transferred. Implementations may trust that `currentOwner` is the owner of the given tag.\"},\"onTagRevoked(address,address,bytes32,string)\":{\"notice\":\"Called by ENSGuilds once a tag has been revoked.\"},\"onTagTransferred(bytes32,string,address,address,address)\":{\"notice\":\"Called by ENSGuilds once a tag has been transferred\"}},\"notice\":\"A common implementation of TagsAuthPolicy that can be used to restrict minting guild tags to only allowlisted addresses. A separate allowlist is maintained per each guild, and may only be updated by that guild's registered admin.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tagsAuthPolicies/AllowlistTagsAuthPolicy.sol\":\"AllowlistTagsAuthPolicy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@ensdomains/ens-contracts/contracts/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface ENS {\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner\\n    ) external returns (bytes32);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setOwner(bytes32 node, address owner) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function owner(bytes32 node) external view returns (address);\\n\\n    function resolver(bytes32 node) external view returns (address);\\n\\n    function ttl(bytes32 node) external view returns (uint64);\\n\\n    function recordExists(bytes32 node) external view returns (bool);\\n\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7cb1158c7d268b63de1468e28e2711b28d686e2628ddb22da2149cd93ddeafda\"},\"@ensdomains/ens-contracts/contracts/reverseRegistrar/IReverseRegistrar.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface IReverseRegistrar {\\n    function setDefaultResolver(address resolver) external;\\n\\n    function claim(address owner) external returns (bytes32);\\n\\n    function claimForAddr(\\n        address addr,\\n        address owner,\\n        address resolver\\n    ) external returns (bytes32);\\n\\n    function claimWithResolver(\\n        address owner,\\n        address resolver\\n    ) external returns (bytes32);\\n\\n    function setName(string memory name) external returns (bytes32);\\n\\n    function setNameForAddr(\\n        address addr,\\n        address owner,\\n        address resolver,\\n        string memory name\\n    ) external returns (bytes32);\\n\\n    function node(address addr) external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0x83adfcf6da72b1bcd1e3ac387afe5fc7fdf7f2ac28b7601544d2ca4b9d45d159\"},\"@ensdomains/ens-contracts/contracts/reverseRegistrar/ReverseClaimer.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.17 <0.9.0;\\n\\nimport {ENS} from \\\"../registry/ENS.sol\\\";\\nimport {IReverseRegistrar} from \\\"../reverseRegistrar/IReverseRegistrar.sol\\\";\\n\\ncontract ReverseClaimer {\\n    bytes32 constant ADDR_REVERSE_NODE =\\n        0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\\n\\n    constructor(ENS ens, address claimant) {\\n        IReverseRegistrar reverseRegistrar = IReverseRegistrar(\\n            ens.owner(ADDR_REVERSE_NODE)\\n        );\\n        reverseRegistrar.claim(claimant);\\n    }\\n}\\n\",\"keccak256\":\"0x78a28627241535b595f6fff476a1fa7acc90c80684fe7784734920fc8af6fc22\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) internal view returns (bool[] memory) {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     *\\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\\n     * should be exercised when using this function.\\n     *\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x5a08ad61f4e82b8a3323562661a86fb10b10190848073fdc13d4ac43710ffba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/ensGuilds/interfaces/IENSGuilds.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport { IERC1155MetadataURI } from \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\n\\ninterface IENSGuilds is IERC1155MetadataURI {\\n    /** Events */\\n    event Registered(bytes32 indexed guildEnsNode);\\n    event Deregistered(bytes32 indexed guildEnsNode);\\n    event TagClaimed(bytes32 indexed guildEnsNode, bytes32 indexed tagHash, address recipient);\\n    event TagTransferred(bytes32 indexed guildEnsNode, bytes32 indexed tagHash, address from, address to);\\n    event TagRevoked(bytes32 indexed guildEnsNode, bytes32 indexed tagHash);\\n    event FeePolicyUpdated(bytes32 indexed guildEnsNode, address feePolicy);\\n    event TagsAuthPolicyUpdated(bytes32 indexed guildEnsNode, address tagsAuthPolicy);\\n    event AdminTransferred(bytes32 indexed guildEnsNode, address newAdmin);\\n    event SetActive(bytes32 indexed guildEnsNode, bool active);\\n    event TokenUriSet(bytes32 indexed guildEnsNode, string uri);\\n\\n    /* Functions */\\n\\n    /**\\n     * @notice Registers a new guild from an existing ENS domain.\\n     * Caller must be the ENS node's owner and ENSGuilds must have been designated an \\\"operator\\\" for the caller.\\n     * @param ensName The guild's full ENS name (e.g. 'my-guild.eth')\\n     * @param guildAdmin The address that will administrate this guild\\n     * @param feePolicy The address of an implementation of FeePolicy to use for minting new tags within this guild\\n     * @param tagsAuthPolicy The address of an implementation of TagsAuthPolicy to use for minting new tags\\n     * within this guild\\n     */\\n    function registerGuild(\\n        string calldata ensName,\\n        address guildAdmin,\\n        address feePolicy,\\n        address tagsAuthPolicy\\n    ) external;\\n\\n    /**\\n     * @notice De-registers a registered guild.\\n     * Designates guild as inactive and marks all tags previously minted for that guild as eligible for revocation.\\n     * @param guildEnsNode The ENS namehash of the guild's domain\\n     */\\n    function deregisterGuild(bytes32 guildEnsNode) external;\\n\\n    /**\\n     * @notice Claims a guild tag\\n     * @param guildEnsNode The namehash of the guild for which the tag should be claimed (e.g. namehash('my-guild.eth'))\\n     * @param tag The tag name to claim (e.g. 'foo' for foo.my-guild.eth). Assumes `tag` is already normalized per\\n     * ENS Name Processing rules\\n     * @param recipient The address that will receive this guild tag (usually same as the caller)\\n     * @param extraClaimArgs [Optional] Any additional arguments necessary for guild-specific logic,\\n     *  such as authorization\\n     */\\n    function claimGuildTag(\\n        bytes32 guildEnsNode,\\n        string calldata tag,\\n        address recipient,\\n        bytes calldata extraClaimArgs\\n    ) external payable;\\n\\n    /**\\n     * @notice Transfers an existing guild tag\\n     * @param guildEnsNode The namehash of the guild for which the tag should be transferred\\n     * (e.g. namehash('my-guild.eth'))\\n     * @param tag The tag name to transfer (e.g. 'foo' for foo.my-guild.eth). Assumes `tag` is already normalized per\\n     * ENS Name Processing rules\\n     * @param recipient The address that will receive this guild tag\\n     * @param extraTransferArgs [Optional] Any additional arguments necessary for guild-specific logic,\\n     *  such as authorization\\n     */\\n    function transferGuildTag(\\n        bytes32 guildEnsNode,\\n        string calldata tag,\\n        address recipient,\\n        bytes calldata extraTransferArgs\\n    ) external;\\n\\n    /**\\n     * @notice Claims multiple tags for a guild at once\\n     * @param guildEnsNode The ENS namehash of the guild's domain\\n     * @param tags Tags to be claimed\\n     * @param recipients Recipients of each tag to be claimed\\n     * @param extraClaimArgs Per-tag extra arguments required for guild-specific logic, such as authorization.\\n     * Must have same length as array of tagHashes, even if each array element is itself empty bytes\\n     */\\n    function claimGuildTagsBatch(\\n        bytes32 guildEnsNode,\\n        string[] calldata tags,\\n        address[] calldata recipients,\\n        bytes[] calldata extraClaimArgs\\n    ) external payable;\\n\\n    /**\\n     * @notice Returns the current owner of the given guild tag.\\n     * Returns address(0) if no such guild or tag exists, or if the guild has been deregistered.\\n     * @param guildEnsNode The ENS namehash of the guild's domain\\n     * @param tagHash The ENS namehash of the tag (e.g. keccak256('foo') for foo.my-guild.eth)\\n     */\\n    function tagOwner(bytes32 guildEnsNode, bytes32 tagHash) external view returns (address);\\n\\n    /**\\n     * @notice Attempts to revoke an existing guild tag, if authorized by the guild's AuthPolicy.\\n     * Deregistered guilds will bypass auth checks for revocation of all tags.\\n     * @param guildEnsNode The ENS namehash of the guild's domain\\n     * @param tag The tag to revoke\\n     * @param extraData [Optional] Any additional arguments necessary for assessing whether a tag may be revoked\\n     */\\n    function revokeGuildTag(bytes32 guildEnsNode, string calldata tag, bytes calldata extraData) external;\\n\\n    /**\\n     * @notice Attempts to revoke multiple guild tags\\n     * @param guildEnsNode The ENS namehash of the guild's domain\\n     * @param tags tags to revoke\\n     * @param extraData Additional arguments necessary for assessing whether a tag may be revoked\\n     */\\n    function revokeGuildTagsBatch(bytes32 guildEnsNode, string[] calldata tags, bytes[] calldata extraData) external;\\n\\n    /**\\n     * @notice Updates the FeePolicy for an existing guild. May only be called by the guild's registered admin.\\n     * @param guildEnsNode The ENS namehash of the guild's domain\\n     * @param feePolicy The address of an implementation of FeePolicy to use for minting new tags within this guild\\n     */\\n    function updateGuildFeePolicy(bytes32 guildEnsNode, address feePolicy) external;\\n\\n    /**\\n     * @notice Updates the TagsAuthPolicy for an existing guild. May only be called by the guild's registered admin.\\n     * @param guildEnsNode The ENS namehash of the guild's domain\\n     * @param tagsAuthPolicy The address of an implementation of TagsAuthPolicy to use for\\n     * minting new tags within this guild\\n     */\\n    function updateGuildTagsAuthPolicy(bytes32 guildEnsNode, address tagsAuthPolicy) external;\\n\\n    /**\\n     * @notice Sets the metadata URI string for fetching metadata for a guild's tag NFTs.\\n     * May only be called by the guild's registered admin.\\n     * @param guildEnsNode The ENS namehash of the guild's domain\\n     * @param uri The ERC1155 metadata URL template\\n     */\\n    function setGuildTokenUri(bytes32 guildEnsNode, string calldata uri) external;\\n\\n    /**\\n     * @notice Sets a guild as active or inactive. May only be called by the guild's registered admin.\\n     * @param guildEnsNode The ENS namehash of the guild's domain\\n     * @param active The new status\\n     */\\n    function setGuildActive(bytes32 guildEnsNode, bool active) external;\\n\\n    /**\\n     * @notice Returns the current admin registered for the given guild.\\n     * @param guildEnsNode The ENS namehash of the guild's domain\\n     */\\n    function guildAdmin(bytes32 guildEnsNode) external view returns (address);\\n\\n    /**\\n     * @notice Transfers the role of guild admin to the given address.\\n     * May only be called by the guild's registered admin.\\n     * @param guildEnsNode The ENS namehash of the guild's domain\\n     * @param newAdmin The new admin\\n     */\\n    function transferGuildAdmin(bytes32 guildEnsNode, address newAdmin) external;\\n\\n    /**\\n     * @notice Registers a resolver for the guild's root ENS name that will\\n     * answer queries about the parent name itself, or any child names that are\\n     * not Guild tags\\n     * @param guildEnsNode The ENS namehash of the guild's domain\\n     * @param fallbackResolver The fallback resolver\\n     */\\n    function setFallbackResolver(bytes32 guildEnsNode, address fallbackResolver) external;\\n}\\n\",\"keccak256\":\"0xdd1351df064ede50cdf43fa12e52be847dda264f534acf845096ad4e43343e84\",\"license\":\"MIT\"},\"contracts/tagsAuthPolicies/AllowlistTagsAuthPolicy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport { ReverseClaimer } from \\\"@ensdomains/ens-contracts/contracts/reverseRegistrar/ReverseClaimer.sol\\\";\\nimport { ENS } from \\\"@ensdomains/ens-contracts/contracts/registry/ENS.sol\\\";\\n\\nimport { BaseTagsAuthPolicy } from \\\"./BaseTagsAuthPolicy.sol\\\";\\nimport { IENSGuilds } from \\\"../ensGuilds/interfaces/IENSGuilds.sol\\\";\\nimport { ITagsAuthPolicy } from \\\"./ITagsAuthPolicy.sol\\\"; // solhint-disable-line no-unused-import\\n\\n/**\\n * @title AllowlistTagsAuthPolicy\\n * @notice A common implementation of TagsAuthPolicy that can be used to restrict minting\\n * guild tags to only allowlisted addresses.\\n * A separate allowlist is maintained per each guild, and may only be updated by that guild's registered admin.\\n */\\ncontract AllowlistTagsAuthPolicy is BaseTagsAuthPolicy, ReverseClaimer {\\n    mapping(bytes32 => mapping(address => bool)) public guildAllowlists;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(\\n        ENS _ensRegistry,\\n        IENSGuilds ensGuilds,\\n        address reverseRecordOwner\\n    ) BaseTagsAuthPolicy(ensGuilds) ReverseClaimer(_ensRegistry, reverseRecordOwner) {}\\n\\n    function allowMint(bytes32 guildHash, address minter) external onlyGuildAdmin(guildHash) {\\n        guildAllowlists[guildHash][minter] = true;\\n    }\\n\\n    function disallowMint(bytes32 guildHash, address minter) external onlyGuildAdmin(guildHash) {\\n        guildAllowlists[guildHash][minter] = false;\\n    }\\n\\n    /**\\n     * @inheritdoc ITagsAuthPolicy\\n     */\\n    function canClaimTag(\\n        bytes32 guildHash,\\n        string calldata,\\n        address claimant,\\n        address,\\n        bytes calldata\\n    ) external view virtual override returns (bool) {\\n        return guildAllowlists[guildHash][claimant];\\n    }\\n\\n    /**\\n     * @dev removes the claimant from the guild's allowlist\\n     */\\n    function _onTagClaimed(\\n        bytes32 guildHash,\\n        string calldata,\\n        address claimant,\\n        address,\\n        bytes calldata\\n    ) internal virtual override returns (string memory tagToRevoke) {\\n        guildAllowlists[guildHash][claimant] = false;\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @inheritdoc ITagsAuthPolicy\\n     */\\n    function canRevokeTag(\\n        address,\\n        bytes32,\\n        string calldata,\\n        bytes calldata\\n    ) external view virtual override returns (bool) {\\n        return false;\\n    }\\n\\n    /**\\n     * @inheritdoc ITagsAuthPolicy\\n     */\\n    function canTransferTag(\\n        bytes32,\\n        string calldata,\\n        address transferredBy,\\n        address currentOwner,\\n        address,\\n        bytes calldata\\n    ) external pure returns (bool) {\\n        return transferredBy == currentOwner;\\n    }\\n\\n    function _onTagRevoked(address, address, bytes32, string memory) internal virtual override {\\n        return;\\n    }\\n\\n    function _onTagTransferred(bytes32, string calldata, address, address, address) internal virtual override {\\n        return;\\n    }\\n}\\n\",\"keccak256\":\"0x6c6bfc2595d33b9756bdbbaf9c2a3524a8daf9313f33ea23bb2e0fb51b210cb2\",\"license\":\"MIT\"},\"contracts/tagsAuthPolicies/BaseTagsAuthPolicy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport { ERC165 } from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport { ERC165Checker } from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport { Context } from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport { ITagsAuthPolicy } from \\\"./ITagsAuthPolicy.sol\\\";\\nimport { IENSGuilds } from \\\"../ensGuilds/interfaces/IENSGuilds.sol\\\";\\n\\n/**\\n * @title BaseTagsAuthPolicy\\n * @notice An base implementation of ITagsAuthPolicy\\n */\\nabstract contract BaseTagsAuthPolicy is ITagsAuthPolicy, ERC165, Context, ReentrancyGuard {\\n    using ERC165Checker for address;\\n\\n    IENSGuilds public immutable ensGuilds;\\n\\n    constructor(IENSGuilds _ensGuilds) {\\n        // solhint-disable-next-line reason-string, custom-errors\\n        require(_ensGuilds.supportsInterface(type(IENSGuilds).interfaceId));\\n        ensGuilds = _ensGuilds;\\n    }\\n\\n    modifier onlyEnsGuildsContract() {\\n        // solhint-disable-next-line reason-string, custom-errors\\n        require(_msgSender() == address(ensGuilds));\\n        _;\\n    }\\n\\n    modifier onlyGuildAdmin(bytes32 guildEnsNode) {\\n        // solhint-disable-next-line reason-string, custom-errors\\n        require(ensGuilds.guildAdmin(guildEnsNode) == _msgSender());\\n        _;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceID) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceID == type(ITagsAuthPolicy).interfaceId || super.supportsInterface(interfaceID);\\n    }\\n\\n    /**\\n     * @inheritdoc ITagsAuthPolicy\\n     * @dev protects against reentrancy and checks that caller is the Guilds contract. Updating any state\\n     * is deferred to the implementation.\\n     */\\n    function onTagClaimed(\\n        bytes32 guildEnsNode,\\n        string calldata tag,\\n        address claimant,\\n        address recipient,\\n        bytes calldata extraClaimArgs\\n    ) external override nonReentrant onlyEnsGuildsContract returns (string memory tagToRevoke) {\\n        return _onTagClaimed(guildEnsNode, tag, claimant, recipient, extraClaimArgs);\\n    }\\n\\n    /**\\n     * @dev entrypoint for implementations of BaseTagsAuthPolicy that need to update any state\\n     */\\n    function _onTagClaimed(\\n        bytes32 guildEnsNode,\\n        string calldata tag,\\n        address claimant,\\n        address recipient,\\n        bytes calldata extraClaimArgs\\n    ) internal virtual returns (string memory tagToRevoke);\\n\\n    /**\\n     * @inheritdoc ITagsAuthPolicy\\n     * @dev protects against reentrancy and checks that caller is the Guilds contract. Updating any state\\n     * is deferred to the implementation.\\n     */\\n    function onTagRevoked(\\n        address revokedBy,\\n        address revokedFrom,\\n        bytes32 guildEnsNode,\\n        string memory tag\\n    ) external override nonReentrant onlyEnsGuildsContract {\\n        _onTagRevoked(revokedBy, revokedFrom, guildEnsNode, tag);\\n    }\\n\\n    /**\\n     * @dev entrypoint for implementations of BaseTagsAuthPolicy that need to update any state\\n     */\\n    function _onTagRevoked(\\n        address revokedBy,\\n        address revokedFrom,\\n        bytes32 guildEnsNode,\\n        string memory tag\\n    ) internal virtual;\\n\\n    /**\\n     * @inheritdoc ITagsAuthPolicy\\n     * @dev protects against reentrancy and checks that caller is the Guilds contract. Updating any state\\n     * is deferred to the implementation.\\n     */\\n    function onTagTransferred(\\n        bytes32 guildEnsNode,\\n        string calldata tag,\\n        address transferredBy,\\n        address prevOwner,\\n        address newOwner\\n    ) external override nonReentrant onlyEnsGuildsContract {\\n        _onTagTransferred(guildEnsNode, tag, transferredBy, prevOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev entrypoint for implementations of BaseTagsAuthPolicy that need to update any state\\n     */\\n    function _onTagTransferred(\\n        bytes32 guildEnsNode,\\n        string calldata tag,\\n        address transferredBy,\\n        address prevOwner,\\n        address newOwner\\n    ) internal virtual;\\n}\\n\",\"keccak256\":\"0x1078df04ec110e97b6f62360e41dd351410b3ae9d68f53563a3be2c4cf12af7a\",\"license\":\"MIT\"},\"contracts/tagsAuthPolicies/ITagsAuthPolicy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title TagsAuthPolicy\\n * @notice An interface for Guilds to implement that will control authorization for minting tags within that guild\\n */\\ninterface ITagsAuthPolicy is IERC165 {\\n    /**\\n     * @notice Checks whether a certain address (claimant) may claim a given guild tag that has been revoked or\\n     * has never been claimed\\n     * @param guildEnsNode The ENS namehash of the guild's domain\\n     * @param tag The tag being claimed (e.g. 'foo' for foo.my-guild.eth)\\n     * @param claimant The address attempting to claim the tag (not necessarily the address that will receive it)\\n     * @param recipient The address that would receive the tag\\n     * @param extraClaimArgs [Optional] Any guild-specific additional arguments required\\n     */\\n    function canClaimTag(\\n        bytes32 guildEnsNode,\\n        string calldata tag,\\n        address claimant,\\n        address recipient,\\n        bytes calldata extraClaimArgs\\n    ) external view returns (bool);\\n\\n    /**\\n     * @dev Called by ENSGuilds once a tag has been claimed.\\n     * Provided for auth policies to update local state, such as erasing an address from an allowlist after that\\n     * address has successfully minted a tag.\\n     * @param guildEnsNode The ENS namehash of the guild's domain\\n     * @param tag The tag being claimed (e.g. 'foo' for foo.my-guild.eth)\\n     * @param claimant The address that claimed the tag (not necessarily the address that received it)\\n     * @param recipient The address that received receive the tag\\n     * @param extraClaimArgs [Optional] Any guild-specific additional arguments required\\n     * @return tagToRevoke Any tag that should be revoked as a consequence of the given tag\\n     * being claimed. Returns empty string if no tag should be revoked.\\n     */\\n    function onTagClaimed(\\n        bytes32 guildEnsNode,\\n        string calldata tag,\\n        address claimant,\\n        address recipient,\\n        bytes calldata extraClaimArgs\\n    ) external returns (string memory tagToRevoke);\\n\\n    /**\\n     * @notice Checks whether a given guild tag is eligible to be revoked\\n     * @param revokedBy The address that would attempt to revoke it\\n     * @param guildEnsNode The ENS namehash of the guild's domain\\n     * @param tag The tag being revoked (e.g. 'foo' for foo.my-guild.eth)\\n     * @param extraRevokeArgs Any additional arguments necessary for assessing whether a tag may be revoked\\n     */\\n    function canRevokeTag(\\n        address revokedBy,\\n        bytes32 guildEnsNode,\\n        string calldata tag,\\n        bytes calldata extraRevokeArgs\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice Called by ENSGuilds once a tag has been revoked.\\n     * @param revokedBy The address that revoked it\\n     * @param revokedFrom The address who owned it when it was revoked\\n     * @param guildEnsNode The ENS namehash of the guild's domain\\n     * @param tag The tag being revoked (e.g. 'foo' for foo.my-guild.eth)\\n     */\\n    function onTagRevoked(address revokedBy, address revokedFrom, bytes32 guildEnsNode, string memory tag) external;\\n\\n    /**\\n     * @notice Checks whether a tag can be transferred. Implementations may trust that `currentOwner` is the\\n     * owner of the given tag.\\n     * @param guildEnsNode The ENS namehash of the guild's domain\\n     * @param tag The tag being revoked (e.g. 'foo' for foo.my-guild.eth)\\n     * @param transferredBy The address initiating the transfer. May be different than the currentOwner, such\\n     * as an admin or a marketplace contract\\n     * @param currentOwner The address currently owning the given tag\\n     * @param newOwner The address that would receive the tag\\n     * @param extraTransferArgs Any additional arguments necessary for assessing whether a tag may be transferred\\n     */\\n    function canTransferTag(\\n        bytes32 guildEnsNode,\\n        string calldata tag,\\n        address transferredBy,\\n        address currentOwner,\\n        address newOwner,\\n        bytes calldata extraTransferArgs\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice Called by ENSGuilds once a tag has been transferred\\n     * @param guildEnsNode The ENS namehash of the guild's domain\\n     * @param tag The tag that was transferred\\n     * @param transferredBy The address initiating the transfer\\n     * @param prevOwner The address that previously owned the tag\\n     * @param newOwner The address that received the tag\\n     */\\n    function onTagTransferred(\\n        bytes32 guildEnsNode,\\n        string calldata tag,\\n        address transferredBy,\\n        address prevOwner,\\n        address newOwner\\n    ) external;\\n}\\n\",\"keccak256\":\"0xc676e612890e85f7cfa4a6e0e60129d9d77c224525d890f11f8eeb27c350d8b5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162000d1f38038062000d1f8339810160408190526200003491620001e8565b60016000556040516301ffc9a760e01b81526301d37a4160e51b60048201528390829084906001600160a01b038216906301ffc9a790602401602060405180830381865afa1580156200008b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000b191906200023c565b620000bb57600080fd5b6001600160a01b039081166080526040516302571be360e01b81527f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e260048201526000918416906302571be390602401602060405180830381865afa15801562000129573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200014f919062000267565b604051630f41a04d60e11b81526001600160a01b03848116600483015291925090821690631e83409a906024016020604051808303816000875af11580156200019c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001c2919062000287565b50505050505050620002a1565b6001600160a01b0381168114620001e557600080fd5b50565b600080600060608486031215620001fe57600080fd5b83516200020b81620001cf565b60208501519093506200021e81620001cf565b60408501519092506200023181620001cf565b809150509250925092565b6000602082840312156200024f57600080fd5b815180151581146200026057600080fd5b9392505050565b6000602082840312156200027a57600080fd5b81516200026081620001cf565b6000602082840312156200029a57600080fd5b5051919050565b608051610a3f620002e0600039600081816101d0015281816102b10152818161036d015281816103e60152818161044c01526105030152610a3f6000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c80639609fb1711610081578063d4f1d4e51161005b578063d4f1d4e5146101b8578063e2443ad2146101cb578063fda41c101461020a57600080fd5b80639609fb171461016c5780639e6fcc2f1461017f578063acdbdda11461019257600080fd5b80630c30e7c6116100b25780630c30e7c61461010957806329593e5a1461011e5780638effff981461013e57600080fd5b806301ffc9a7146100ce5780630910b77f146100f6575b600080fd5b6100e16100dc3660046105a4565b610224565b60405190151581526020015b60405180910390f35b6100e1610104366004610636565b61025b565b61011c6101173660046106d9565b61028d565b005b61013161012c366004610636565b610360565b6040516100ed9190610709565b6100e161014c3660046106d9565b600160209081526000928352604080842090915290825290205460ff1681565b61011c61017a36600461076d565b6103db565b61011c61018d3660046106d9565b610428565b6100e16101a036600461084d565b5050506001600160a01b039081169116149392505050565b61011c6101c6366004610904565b6104f8565b6101f27f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100ed565b6100e1610218366004610989565b60009695505050505050565b60006001600160e01b031982166319e733b360e11b148061025557506301ffc9a760e01b6001600160e01b03198316145b92915050565b60008781526001602090815260408083206001600160a01b038816845290915290205460ff165b979650505050505050565b813360405163022c977f60e01b8152600481018390526001600160a01b03918216917f0000000000000000000000000000000000000000000000000000000000000000169063022c977f90602401602060405180830381865afa1580156102f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031c9190610a15565b6001600160a01b03161461032f57600080fd5b5060009182526001602081815260408085206001600160a01b0390941685529290529120805460ff19169091179055565b606061036a610547565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161461039f57600080fd5b5060008781526001602081815260408084206001600160a01b03891685528252808420805460ff19169055805191820190528281529155610282565b6103e3610547565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161461041857600080fd5b6104226001600055565b50505050565b813360405163022c977f60e01b8152600481018390526001600160a01b03918216917f0000000000000000000000000000000000000000000000000000000000000000169063022c977f90602401602060405180830381865afa158015610493573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b79190610a15565b6001600160a01b0316146104ca57600080fd5b5060009182526001602090815260408084206001600160a01b0390931684529190529020805460ff19169055565b610500610547565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161461053557600080fd5b61053f6001600055565b505050505050565b60026000540361059d5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640160405180910390fd5b6002600055565b6000602082840312156105b657600080fd5b81356001600160e01b0319811681146105ce57600080fd5b9392505050565b60008083601f8401126105e757600080fd5b50813567ffffffffffffffff8111156105ff57600080fd5b60208301915083602082850101111561061757600080fd5b9250929050565b6001600160a01b038116811461063357600080fd5b50565b600080600080600080600060a0888a03121561065157600080fd5b87359650602088013567ffffffffffffffff8082111561067057600080fd5b61067c8b838c016105d5565b909850965060408a013591506106918261061e565b9094506060890135906106a38261061e565b909350608089013590808211156106b957600080fd5b506106c68a828b016105d5565b989b979a50959850939692959293505050565b600080604083850312156106ec57600080fd5b8235915060208301356106fe8161061e565b809150509250929050565b600060208083528351808285015260005b818110156107365785810183015185820160400152820161071a565b506000604082860101526040601f19601f8301168501019250505092915050565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561078357600080fd5b843561078e8161061e565b9350602085013561079e8161061e565b925060408501359150606085013567ffffffffffffffff808211156107c257600080fd5b818701915087601f8301126107d657600080fd5b8135818111156107e8576107e8610757565b604051601f8201601f19908116603f0116810190838211818310171561081057610810610757565b816040528281528a602084870101111561082957600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060008060008060008060c0898b03121561086957600080fd5b88359750602089013567ffffffffffffffff8082111561088857600080fd5b6108948c838d016105d5565b909950975060408b013591506108a98261061e565b90955060608a0135906108bb8261061e565b90945060808a0135906108cd8261061e565b90935060a08a013590808211156108e357600080fd5b506108f08b828c016105d5565b999c989b5096995094979396929594505050565b60008060008060008060a0878903121561091d57600080fd5b86359550602087013567ffffffffffffffff81111561093b57600080fd5b61094789828a016105d5565b909650945050604087013561095b8161061e565b9250606087013561096b8161061e565b9150608087013561097b8161061e565b809150509295509295509295565b600080600080600080608087890312156109a257600080fd5b86356109ad8161061e565b955060208701359450604087013567ffffffffffffffff808211156109d157600080fd5b6109dd8a838b016105d5565b909650945060608901359150808211156109f657600080fd5b50610a0389828a016105d5565b979a9699509497509295939492505050565b600060208284031215610a2757600080fd5b81516105ce8161061e56fea164736f6c6343000811000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100c95760003560e01c80639609fb1711610081578063d4f1d4e51161005b578063d4f1d4e5146101b8578063e2443ad2146101cb578063fda41c101461020a57600080fd5b80639609fb171461016c5780639e6fcc2f1461017f578063acdbdda11461019257600080fd5b80630c30e7c6116100b25780630c30e7c61461010957806329593e5a1461011e5780638effff981461013e57600080fd5b806301ffc9a7146100ce5780630910b77f146100f6575b600080fd5b6100e16100dc3660046105a4565b610224565b60405190151581526020015b60405180910390f35b6100e1610104366004610636565b61025b565b61011c6101173660046106d9565b61028d565b005b61013161012c366004610636565b610360565b6040516100ed9190610709565b6100e161014c3660046106d9565b600160209081526000928352604080842090915290825290205460ff1681565b61011c61017a36600461076d565b6103db565b61011c61018d3660046106d9565b610428565b6100e16101a036600461084d565b5050506001600160a01b039081169116149392505050565b61011c6101c6366004610904565b6104f8565b6101f27f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100ed565b6100e1610218366004610989565b60009695505050505050565b60006001600160e01b031982166319e733b360e11b148061025557506301ffc9a760e01b6001600160e01b03198316145b92915050565b60008781526001602090815260408083206001600160a01b038816845290915290205460ff165b979650505050505050565b813360405163022c977f60e01b8152600481018390526001600160a01b03918216917f0000000000000000000000000000000000000000000000000000000000000000169063022c977f90602401602060405180830381865afa1580156102f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031c9190610a15565b6001600160a01b03161461032f57600080fd5b5060009182526001602081815260408085206001600160a01b0390941685529290529120805460ff19169091179055565b606061036a610547565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161461039f57600080fd5b5060008781526001602081815260408084206001600160a01b03891685528252808420805460ff19169055805191820190528281529155610282565b6103e3610547565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161461041857600080fd5b6104226001600055565b50505050565b813360405163022c977f60e01b8152600481018390526001600160a01b03918216917f0000000000000000000000000000000000000000000000000000000000000000169063022c977f90602401602060405180830381865afa158015610493573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b79190610a15565b6001600160a01b0316146104ca57600080fd5b5060009182526001602090815260408084206001600160a01b0390931684529190529020805460ff19169055565b610500610547565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161461053557600080fd5b61053f6001600055565b505050505050565b60026000540361059d5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640160405180910390fd5b6002600055565b6000602082840312156105b657600080fd5b81356001600160e01b0319811681146105ce57600080fd5b9392505050565b60008083601f8401126105e757600080fd5b50813567ffffffffffffffff8111156105ff57600080fd5b60208301915083602082850101111561061757600080fd5b9250929050565b6001600160a01b038116811461063357600080fd5b50565b600080600080600080600060a0888a03121561065157600080fd5b87359650602088013567ffffffffffffffff8082111561067057600080fd5b61067c8b838c016105d5565b909850965060408a013591506106918261061e565b9094506060890135906106a38261061e565b909350608089013590808211156106b957600080fd5b506106c68a828b016105d5565b989b979a50959850939692959293505050565b600080604083850312156106ec57600080fd5b8235915060208301356106fe8161061e565b809150509250929050565b600060208083528351808285015260005b818110156107365785810183015185820160400152820161071a565b506000604082860101526040601f19601f8301168501019250505092915050565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561078357600080fd5b843561078e8161061e565b9350602085013561079e8161061e565b925060408501359150606085013567ffffffffffffffff808211156107c257600080fd5b818701915087601f8301126107d657600080fd5b8135818111156107e8576107e8610757565b604051601f8201601f19908116603f0116810190838211818310171561081057610810610757565b816040528281528a602084870101111561082957600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060008060008060008060c0898b03121561086957600080fd5b88359750602089013567ffffffffffffffff8082111561088857600080fd5b6108948c838d016105d5565b909950975060408b013591506108a98261061e565b90955060608a0135906108bb8261061e565b90945060808a0135906108cd8261061e565b90935060a08a013590808211156108e357600080fd5b506108f08b828c016105d5565b999c989b5096995094979396929594505050565b60008060008060008060a0878903121561091d57600080fd5b86359550602087013567ffffffffffffffff81111561093b57600080fd5b61094789828a016105d5565b909650945050604087013561095b8161061e565b9250606087013561096b8161061e565b9150608087013561097b8161061e565b809150509295509295509295565b600080600080600080608087890312156109a257600080fd5b86356109ad8161061e565b955060208701359450604087013567ffffffffffffffff808211156109d157600080fd5b6109dd8a838b016105d5565b909650945060608901359150808211156109f657600080fd5b50610a0389828a016105d5565b979a9699509497509295939492505050565b600060208284031215610a2757600080fd5b81516105ce8161061e56fea164736f6c6343000811000a",
  "libraries": {
    "ERC165Checker": "0x7EB821Aa0cA01198A9EC28ee9f5d7491508233e4",
    "StringParsing": "0xe0c9b7B08a9A409eA6537c8fb307CE6758CfEd16",
    "Strings": "0x572CbB4dbd1f3bB4E23Cc3d8F4460B3E6d871826",
    "NameEncoder": "0x2b1D7EE297A345fF0C57B3c3B0F34b59951756b1",
    "ENSNameHash": "0x969254c8EC87eF59BeB6F6eA928f1A00bb649Ecc",
    "ENSByteUtils": "0x4A44B0Af7483Eb232F606418Aa099ad453F95A02",
    "ENSParentName": "0xeE1CcD12e954bFD828EEb4Ca3B76cfE4cbc42C76"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "canClaimTag(bytes32,string,address,address,bytes)": {
        "params": {
          "claimant": "The address attempting to claim the tag (not necessarily the address that will receive it)",
          "extraClaimArgs": "[Optional] Any guild-specific additional arguments required",
          "guildEnsNode": "The ENS namehash of the guild's domain",
          "recipient": "The address that would receive the tag",
          "tag": "The tag being claimed (e.g. 'foo' for foo.my-guild.eth)"
        }
      },
      "canRevokeTag(address,bytes32,string,bytes)": {
        "params": {
          "extraRevokeArgs": "Any additional arguments necessary for assessing whether a tag may be revoked",
          "guildEnsNode": "The ENS namehash of the guild's domain",
          "revokedBy": "The address that would attempt to revoke it",
          "tag": "The tag being revoked (e.g. 'foo' for foo.my-guild.eth)"
        }
      },
      "canTransferTag(bytes32,string,address,address,address,bytes)": {
        "params": {
          "currentOwner": "The address currently owning the given tag",
          "extraTransferArgs": "Any additional arguments necessary for assessing whether a tag may be transferred",
          "guildEnsNode": "The ENS namehash of the guild's domain",
          "newOwner": "The address that would receive the tag",
          "tag": "The tag being revoked (e.g. 'foo' for foo.my-guild.eth)",
          "transferredBy": "The address initiating the transfer. May be different than the currentOwner, such as an admin or a marketplace contract"
        }
      },
      "onTagClaimed(bytes32,string,address,address,bytes)": {
        "details": "protects against reentrancy and checks that caller is the Guilds contract. Updating any state is deferred to the implementation.",
        "params": {
          "claimant": "The address that claimed the tag (not necessarily the address that received it)",
          "extraClaimArgs": "[Optional] Any guild-specific additional arguments required",
          "guildEnsNode": "The ENS namehash of the guild's domain",
          "recipient": "The address that received receive the tag",
          "tag": "The tag being claimed (e.g. 'foo' for foo.my-guild.eth)"
        },
        "returns": {
          "tagToRevoke": "Any tag that should be revoked as a consequence of the given tag being claimed. Returns empty string if no tag should be revoked."
        }
      },
      "onTagRevoked(address,address,bytes32,string)": {
        "details": "protects against reentrancy and checks that caller is the Guilds contract. Updating any state is deferred to the implementation.",
        "params": {
          "guildEnsNode": "The ENS namehash of the guild's domain",
          "revokedBy": "The address that revoked it",
          "revokedFrom": "The address who owned it when it was revoked",
          "tag": "The tag being revoked (e.g. 'foo' for foo.my-guild.eth)"
        }
      },
      "onTagTransferred(bytes32,string,address,address,address)": {
        "details": "protects against reentrancy and checks that caller is the Guilds contract. Updating any state is deferred to the implementation.",
        "params": {
          "guildEnsNode": "The ENS namehash of the guild's domain",
          "newOwner": "The address that received the tag",
          "prevOwner": "The address that previously owned the tag",
          "tag": "The tag that was transferred",
          "transferredBy": "The address initiating the transfer"
        }
      }
    },
    "title": "AllowlistTagsAuthPolicy",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "canClaimTag(bytes32,string,address,address,bytes)": {
        "notice": "Checks whether a certain address (claimant) may claim a given guild tag that has been revoked or has never been claimed"
      },
      "canRevokeTag(address,bytes32,string,bytes)": {
        "notice": "Checks whether a given guild tag is eligible to be revoked"
      },
      "canTransferTag(bytes32,string,address,address,address,bytes)": {
        "notice": "Checks whether a tag can be transferred. Implementations may trust that `currentOwner` is the owner of the given tag."
      },
      "onTagRevoked(address,address,bytes32,string)": {
        "notice": "Called by ENSGuilds once a tag has been revoked."
      },
      "onTagTransferred(bytes32,string,address,address,address)": {
        "notice": "Called by ENSGuilds once a tag has been transferred"
      }
    },
    "notice": "A common implementation of TagsAuthPolicy that can be used to restrict minting guild tags to only allowlisted addresses. A separate allowlist is maintained per each guild, and may only be updated by that guild's registered admin.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1477,
        "contract": "contracts/tagsAuthPolicies/AllowlistTagsAuthPolicy.sol:AllowlistTagsAuthPolicy",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 10488,
        "contract": "contracts/tagsAuthPolicies/AllowlistTagsAuthPolicy.sol:AllowlistTagsAuthPolicy",
        "label": "guildAllowlists",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}