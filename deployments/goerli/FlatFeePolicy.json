{
  "address": "0xa4A0B6d5c2f11Fa1A1F2A12Ceaa00284e1eF5228",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ensGuilds",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "guildFees",
      "outputs": [
        {
          "internalType": "address",
          "name": "feeToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "feePaidTo",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "guildHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "feeToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "feePaidTo",
          "type": "address"
        }
      ],
      "name": "setFlatFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "guildHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "tagClaimFee",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "feePaidTo",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "args": ["0x21Ca61a68969620A326431e17a72a292b19F5edF"],
  "numDeployments": 1,
  "solcInputHash": "3ed54fb3374fcea5f11209f663dcf047",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ensGuilds\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"guildFees\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feePaidTo\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"guildHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feePaidTo\",\"type\":\"address\"}],\"name\":\"setFlatFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"guildHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tagClaimFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feePaidTo\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/feePolicies/FlatFeePolicy.sol\":\"FlatFeePolicy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddrResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the legacy (ETH-only) addr function.\\n */\\ninterface IAddrResolver {\\n    event AddrChanged(bytes32 indexed node, address a);\\n\\n    /**\\n     * Returns the address associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated address.\\n     */\\n    function addr(bytes32 node) external view returns (address payable);\\n}\\n\",\"keccak256\":\"0x2ad7f2fc60ebe0f93745fe70247f6a854f66af732483fda2a3c5e055614445e8\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the new (multicoin) addr function.\\n */\\ninterface IAddressResolver {\\n    event AddressChanged(\\n        bytes32 indexed node,\\n        uint256 coinType,\\n        bytes newAddress\\n    );\\n\\n    function addr(bytes32 node, uint256 coinType)\\n        external\\n        view\\n        returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x37221203e063dee5aa2a067a6ab3401e9cca41cce5b15230994b6ea377f05ed5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x0812bc73d6e30558840122fa48d6f64ae978ccc1b1fc42e616bac190c6360f46\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/ensGuilds/interfaces/IENSGuilds.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddrResolver.sol\\\";\\nimport \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddressResolver.sol\\\";\\n\\ninterface IENSGuilds is IAddrResolver, IAddressResolver, IERC1155MetadataURI {\\n    /** Events */\\n    event Registered(bytes32 indexed guildHash);\\n    event Deregistered(bytes32 indexed guildHash);\\n    event TagClaimed(bytes32 indexed guildId, bytes32 indexed tagHash, address recipient);\\n    event FeePolicyUpdated(bytes32 indexed guildId, address feePolicy);\\n    event TagsAuthPolicyUpdated(bytes32 indexed guildId, address tagsAuthPolicy);\\n    event AdminTransferred(bytes32 indexed guildId, address newAdmin);\\n    event SetActive(bytes32 indexed guildId, bool active);\\n\\n    /** Functions */\\n\\n    function registerGuild(bytes32 guildHash, address guildAdmin, address feePolicy, address tagsAuthPolicy) external;\\n\\n    function deregisterGuild(bytes32 guildHash) external;\\n\\n    /**\\n     * Claims a guild tag\\n     * @param guildHash The namehash of the guild for which the tag should be claimed (e.g. namehash('my-guild.eth'))\\n     * @param tagHash The ENS namehash of the tag being claimed (e.g. keccak256('foo') for foo.my-guild.eth)\\n     * @param recipient The address that will receive this guild tag\\n     * @param extraClaimArgs [Optional] Any additional arguments necessary for guild-specific logic,\\n     *  such as authorization\\n     */\\n    function claimGuildTag(\\n        bytes32 guildHash,\\n        bytes32 tagHash,\\n        address recipient,\\n        bytes calldata extraClaimArgs\\n    ) external payable;\\n\\n    // function claimGuildTagsBatch(\\n    //     bytes32 guildHash,\\n    //     bytes32[] calldata tagHashes,\\n    //     address[] calldata recipients,\\n    //     bytes[] calldata extraClaimArgs\\n    // ) external payable;\\n\\n    function revokeGuildTag(bytes32 guildHash, bytes32 tagHash, bytes calldata extraData) external;\\n\\n    function updateGuildFeePolicy(bytes32 guildHash, address feePolicy) external;\\n\\n    function updateGuildTagsAuthPolicy(bytes32 guildHash, address tagsAuthPolicy) external;\\n\\n    function setGuildTokenUriTemplate(bytes32 guildHash, string calldata uriTemplate) external;\\n\\n    function setGuildActive(bytes32 guildHash, bool active) external;\\n\\n    function guildAdmin(bytes32 guildHash) external view returns (address);\\n\\n    function transferGuildAdmin(bytes32 guildHash, address newAdmin) external;\\n}\\n\",\"keccak256\":\"0xc4b7706dac1c1118765a24cd423f22fcfb6a407a5d937e137fe0aa238bd482ed\",\"license\":\"MIT\"},\"contracts/feePolicies/FeePolicy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nabstract contract FeePolicy is ERC165 {\\n    function supportsInterface(bytes4 interfaceID) public view virtual override(ERC165) returns (bool) {\\n        return interfaceID == type(FeePolicy).interfaceId || super.supportsInterface(interfaceID);\\n    }\\n\\n    // tokenContract(0) == ETH\\n    function tagClaimFee(\\n        bytes32 guildHash,\\n        bytes32 tagHash,\\n        address claimant,\\n        bytes calldata extraClaimArgs\\n    ) external view virtual returns (address tokenContract, uint256 fee, address feePaidTo);\\n}\\n\",\"keccak256\":\"0x3f8320e32bda46340d5c96a1ce14e2754f82887a0a3b9d8aa5ab9378f6132cad\",\"license\":\"MIT\"},\"contracts/feePolicies/FlatFeePolicy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport \\\"./FeePolicy.sol\\\";\\nimport \\\"../ensGuilds/interfaces/IENSGuilds.sol\\\";\\n\\ncontract FlatFeePolicy is Context, FeePolicy {\\n    using ERC165Checker for address;\\n\\n    IENSGuilds private ensGuilds;\\n    struct FeeInfo {\\n        address feeToken;\\n        uint256 fee;\\n        address feePaidTo;\\n    }\\n    mapping(bytes32 => FeeInfo) public guildFees;\\n\\n    constructor(address _ensGuilds) {\\n        // solhint-disable-next-line reason-string\\n        require(_ensGuilds.supportsInterface(type(IENSGuilds).interfaceId));\\n        ensGuilds = IENSGuilds(_ensGuilds);\\n    }\\n\\n    function setFlatFee(bytes32 guildHash, address feeToken, uint256 fee, address feePaidTo) external {\\n        // caller must be guild admin\\n        // solhint-disable-next-line reason-string\\n        require(ensGuilds.guildAdmin(guildHash) == _msgSender());\\n\\n        guildFees[guildHash] = FeeInfo({ feeToken: feeToken, fee: fee, feePaidTo: feePaidTo });\\n    }\\n\\n    function tagClaimFee(\\n        bytes32 guildHash,\\n        bytes32,\\n        address,\\n        bytes calldata\\n    ) external view virtual override returns (address tokenContract, uint256 fee, address feePaidTo) {\\n        FeeInfo storage feeInfo = guildFees[guildHash];\\n        return (feeInfo.feeToken, feeInfo.fee, feeInfo.feePaidTo);\\n    }\\n}\\n\",\"keccak256\":\"0x34a120135f5bb32972c7bdd450e5a8858146b73b4d80ffea03e8c75855a1e532\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161066938038061066983398101604081905261002f91610164565b6100566398280fbb60e01b826001600160a01b031661008460201b6102741790919060201c565b61005f57600080fd5b600080546001600160a01b0319166001600160a01b039290921691909117905561018d565b600061008f836100a7565b80156100a057506100a083836100db565b9392505050565b60006100ba826301ffc9a760e01b6100db565b80156100d557506100d3826001600160e01b03196100db565b155b92915050565b604080516001600160e01b03198316602480830191909152825180830390910181526044909101909152602080820180516001600160e01b03166301ffc9a760e01b178152825160009392849283928392918391908a617530fa92503d9150600051905082801561014d575060208210155b80156101595750600081115b979650505050505050565b60006020828403121561017657600080fd5b81516001600160a01b03811681146100a057600080fd5b6104cd8061019c6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806301ffc9a71461005157806303eb8bf71461007957806337f83f341461008e5780639c707f93146100f3575b600080fd5b61006461005f366004610368565b610134565b60405190151581526020015b60405180910390f35b61008c6100873660046103aa565b61016b565b005b6100c961009c3660046103f4565b60016020819052600091825260409091208054918101546002909101546001600160a01b03928316921683565b604080516001600160a01b0394851681526020810193909352921691810191909152606001610070565b6100c961010136600461040d565b5050506000918252506001602081905260409091208054918101546002909101546001600160a01b039283169391921690565b60006001600160e01b03198216632763ed8d60e21b148061016557506301ffc9a760e01b6001600160e01b03198316145b92915050565b3360005460405163022c977f60e01b8152600481018790526001600160a01b03928316929091169063022c977f90602401602060405180830381865afa1580156101b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101dd91906104a3565b6001600160a01b0316146101f057600080fd5b604080516060810182526001600160a01b0394851681526020808201948552928516818301908152600096875260019384905291909520945185549085167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161786559251918501919091555160029093018054939092169216919091179055565b600061027f83610297565b8015610290575061029083836102ca565b9392505050565b60006102aa826301ffc9a760e01b6102ca565b801561016557506102c3826001600160e01b03196102ca565b1592915050565b604080516001600160e01b03198316602480830191909152825180830390910181526044909101909152602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166301ffc9a760e01b178152825160009392849283928392918391908a617530fa92503d91506000519050828015610351575060208210155b801561035d5750600081115b979650505050505050565b60006020828403121561037a57600080fd5b81356001600160e01b03198116811461029057600080fd5b6001600160a01b03811681146103a757600080fd5b50565b600080600080608085870312156103c057600080fd5b8435935060208501356103d281610392565b92506040850135915060608501356103e981610392565b939692955090935050565b60006020828403121561040657600080fd5b5035919050565b60008060008060006080868803121561042557600080fd5b8535945060208601359350604086013561043e81610392565b9250606086013567ffffffffffffffff8082111561045b57600080fd5b818801915088601f83011261046f57600080fd5b81358181111561047e57600080fd5b89602082850101111561049057600080fd5b9699959850939650602001949392505050565b6000602082840312156104b557600080fd5b81516102908161039256fea164736f6c6343000811000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c806301ffc9a71461005157806303eb8bf71461007957806337f83f341461008e5780639c707f93146100f3575b600080fd5b61006461005f366004610368565b610134565b60405190151581526020015b60405180910390f35b61008c6100873660046103aa565b61016b565b005b6100c961009c3660046103f4565b60016020819052600091825260409091208054918101546002909101546001600160a01b03928316921683565b604080516001600160a01b0394851681526020810193909352921691810191909152606001610070565b6100c961010136600461040d565b5050506000918252506001602081905260409091208054918101546002909101546001600160a01b039283169391921690565b60006001600160e01b03198216632763ed8d60e21b148061016557506301ffc9a760e01b6001600160e01b03198316145b92915050565b3360005460405163022c977f60e01b8152600481018790526001600160a01b03928316929091169063022c977f90602401602060405180830381865afa1580156101b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101dd91906104a3565b6001600160a01b0316146101f057600080fd5b604080516060810182526001600160a01b0394851681526020808201948552928516818301908152600096875260019384905291909520945185549085167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161786559251918501919091555160029093018054939092169216919091179055565b600061027f83610297565b8015610290575061029083836102ca565b9392505050565b60006102aa826301ffc9a760e01b6102ca565b801561016557506102c3826001600160e01b03196102ca565b1592915050565b604080516001600160e01b03198316602480830191909152825180830390910181526044909101909152602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166301ffc9a760e01b178152825160009392849283928392918391908a617530fa92503d91506000519050828015610351575060208210155b801561035d5750600081115b979650505050505050565b60006020828403121561037a57600080fd5b81356001600160e01b03198116811461029057600080fd5b6001600160a01b03811681146103a757600080fd5b50565b600080600080608085870312156103c057600080fd5b8435935060208501356103d281610392565b92506040850135915060608501356103e981610392565b939692955090935050565b60006020828403121561040657600080fd5b5035919050565b60008060008060006080868803121561042557600080fd5b8535945060208601359350604086013561043e81610392565b9250606086013567ffffffffffffffff8082111561045b57600080fd5b818801915088601f83011261046f57600080fd5b81358181111561047e57600080fd5b89602082850101111561049057600080fd5b9699959850939650602001949392505050565b6000602082840312156104b557600080fd5b81516102908161039256fea164736f6c6343000811000a",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6546,
        "contract": "contracts/feePolicies/FlatFeePolicy.sol:FlatFeePolicy",
        "label": "ensGuilds",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IENSGuilds)5688"
      },
      {
        "astId": 6558,
        "contract": "contracts/feePolicies/FlatFeePolicy.sol:FlatFeePolicy",
        "label": "guildFees",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(FeeInfo)6553_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IENSGuilds)5688": {
        "encoding": "inplace",
        "label": "contract IENSGuilds",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_struct(FeeInfo)6553_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct FlatFeePolicy.FeeInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(FeeInfo)6553_storage"
      },
      "t_struct(FeeInfo)6553_storage": {
        "encoding": "inplace",
        "label": "struct FlatFeePolicy.FeeInfo",
        "members": [
          {
            "astId": 6548,
            "contract": "contracts/feePolicies/FlatFeePolicy.sol:FlatFeePolicy",
            "label": "feeToken",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6550,
            "contract": "contracts/feePolicies/FlatFeePolicy.sol:FlatFeePolicy",
            "label": "fee",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6552,
            "contract": "contracts/feePolicies/FlatFeePolicy.sol:FlatFeePolicy",
            "label": "feePaidTo",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
