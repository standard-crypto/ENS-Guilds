{
  "address": "0x2518c0DbADB4915BcB4Da639d6A2b0701ca56F4C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "defaultTokenMetadataUri",
          "type": "string"
        },
        {
          "internalType": "contract ENS",
          "name": "_ensRegistry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyRegistered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClaimUnauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ENSGuildsIsNotRegisteredOperator",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FeeError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GuildAdminOnly",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GuildNotActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GuildsTokenTransferNotAllowed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "InvalidPolicy",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotDomainOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RevokeUnauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TagAlreadyClaimed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "a",
          "type": "address"
        }
      ],
      "name": "AddrChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "coinType",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "newAddress",
          "type": "bytes"
        }
      ],
      "name": "AddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "guildId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "guildHash",
          "type": "bytes32"
        }
      ],
      "name": "Deregistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "guildId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "feePolicy",
          "type": "address"
        }
      ],
      "name": "FeePolicyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "guildHash",
          "type": "bytes32"
        }
      ],
      "name": "Registered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "guildId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "name": "SetActive",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "guildId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "tagHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "TagClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "guildId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "tagHash",
          "type": "bytes32"
        }
      ],
      "name": "TagRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "guildId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tagsAuthPolicy",
          "type": "address"
        }
      ],
      "name": "TagsAuthPolicyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "guildId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "uriTemplate",
          "type": "string"
        }
      ],
      "name": "TokenUriTemplateSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "addr",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "coinType",
          "type": "uint256"
        }
      ],
      "name": "addr",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "addresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "guildEnsName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tag",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "extraClaimArgs",
          "type": "bytes"
        }
      ],
      "name": "claimGuildTag",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "guildEnsNode",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "tagHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "extraClaimArgs",
          "type": "bytes"
        }
      ],
      "name": "claimGuildTag",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "guildEnsNode",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "tagHashes",
          "type": "bytes32[]"
        },
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "extraClaimArgs",
          "type": "bytes[]"
        }
      ],
      "name": "claimGuildTagsBatch",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "guildEnsName",
          "type": "string"
        }
      ],
      "name": "deregisterGuild",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "ensNode",
          "type": "bytes32"
        }
      ],
      "name": "deregisterGuild",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ensRegistry",
      "outputs": [
        {
          "internalType": "contract ENS",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "guildHash",
          "type": "bytes32"
        }
      ],
      "name": "guildAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "guildEnsName",
          "type": "string"
        }
      ],
      "name": "guildAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "guilds",
      "outputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "contract FeePolicy",
          "name": "feePolicy",
          "type": "address"
        },
        {
          "internalType": "contract ITagsAuthPolicy",
          "name": "tagsAuthPolicy",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "deregistered",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "ensName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "feePolicy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tagsAuthPolicy",
          "type": "address"
        }
      ],
      "name": "registerGuild",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "ensNode",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "feePolicy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tagsAuthPolicy",
          "type": "address"
        }
      ],
      "name": "registerGuild",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "guildEnsName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tag",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "revokeGuildTag",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "guildEnsNode",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "tagHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "revokeGuildTag",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "guildHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "tagHashes",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes[]",
          "name": "extraData",
          "type": "bytes[]"
        }
      ],
      "name": "revokeGuildTagsBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "guildEnsNode",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "name": "setGuildActive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "guildEnsName",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "name": "setGuildActive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "guildEnsNode",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "uriTemplate",
          "type": "string"
        }
      ],
      "name": "setGuildTokenUriTemplate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "guildEnsName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "uriTemplate",
          "type": "string"
        }
      ],
      "name": "setGuildTokenUriTemplate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "guildEnsName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tag",
          "type": "string"
        }
      ],
      "name": "tagOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "guildEnsNode",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "tagHash",
          "type": "bytes32"
        }
      ],
      "name": "tagOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "guildEnsName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "transferGuildAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "guildEnsNode",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "transferGuildAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "guildEnsName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "feePolicy",
          "type": "address"
        }
      ],
      "name": "updateGuildFeePolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "guildEnsNode",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "feePolicy",
          "type": "address"
        }
      ],
      "name": "updateGuildFeePolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "guildEnsName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "tagsAuthPolicy",
          "type": "address"
        }
      ],
      "name": "updateGuildTagsAuthPolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "guildEnsNode",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "tagsAuthPolicy",
          "type": "address"
        }
      ],
      "name": "updateGuildTagsAuthPolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd0ba673aad0ede9734e09968c4e3026ac061c951296d7c94670586d680904a9a",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xE72285aee8Ad0b545DD6287Aab9EbE8237D4e7Cf",
    "contractAddress": null,
    "transactionIndex": 61,
    "gasUsed": "3492369",
    "logsBloom": "0x
    "blockHash": "0x5ec9c822db3772ae37f4f6fc2e36921865a49618d9c3d1a437da78291f2cb593",
    "transactionHash": "0xd0ba673aad0ede9734e09968c4e3026ac061c951296d7c94670586d680904a9a",
    "logs": [],
    "blockNumber": 8605035,
    "cumulativeGasUsed": "21160147",
    "status": 1,
    "byzantium": true
  },
  "args": ["stubMetadataUri", "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e"],
  "numDeployments": 1,
  "solcInputHash": "3cd3409becb6f2f8c62daba91550c490",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"defaultTokenMetadataUri\",\"type\":\"string\"},{\"internalType\":\"contract ENS\",\"name\":\"_ensRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClaimUnauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ENSGuildsIsNotRegisteredOperator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GuildAdminOnly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GuildNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GuildsTokenTransferNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"InvalidPolicy\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotDomainOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RevokeUnauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TagAlreadyClaimed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"AddrChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"newAddress\",\"type\":\"bytes\"}],\"name\":\"AddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"guildId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"guildHash\",\"type\":\"bytes32\"}],\"name\":\"Deregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"guildId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feePolicy\",\"type\":\"address\"}],\"name\":\"FeePolicyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"guildHash\",\"type\":\"bytes32\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"guildId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"SetActive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"guildId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tagHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"TagClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"guildId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tagHash\",\"type\":\"bytes32\"}],\"name\":\"TagRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"guildId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tagsAuthPolicy\",\"type\":\"address\"}],\"name\":\"TagsAuthPolicyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"guildId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uriTemplate\",\"type\":\"string\"}],\"name\":\"TokenUriTemplateSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"addr\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"}],\"name\":\"addr\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"addresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"guildEnsName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tag\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"extraClaimArgs\",\"type\":\"bytes\"}],\"name\":\"claimGuildTag\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"guildEnsNode\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"tagHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"extraClaimArgs\",\"type\":\"bytes\"}],\"name\":\"claimGuildTag\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"guildEnsNode\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"tagHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"extraClaimArgs\",\"type\":\"bytes[]\"}],\"name\":\"claimGuildTagsBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"guildEnsName\",\"type\":\"string\"}],\"name\":\"deregisterGuild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ensNode\",\"type\":\"bytes32\"}],\"name\":\"deregisterGuild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ensRegistry\",\"outputs\":[{\"internalType\":\"contract ENS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"guildHash\",\"type\":\"bytes32\"}],\"name\":\"guildAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"guildEnsName\",\"type\":\"string\"}],\"name\":\"guildAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"guilds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"contract FeePolicy\",\"name\":\"feePolicy\",\"type\":\"address\"},{\"internalType\":\"contract ITagsAuthPolicy\",\"name\":\"tagsAuthPolicy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"deregistered\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ensName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feePolicy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tagsAuthPolicy\",\"type\":\"address\"}],\"name\":\"registerGuild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ensNode\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feePolicy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tagsAuthPolicy\",\"type\":\"address\"}],\"name\":\"registerGuild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"guildEnsName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tag\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"revokeGuildTag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"guildEnsNode\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"tagHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"revokeGuildTag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"guildHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"tagHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"extraData\",\"type\":\"bytes[]\"}],\"name\":\"revokeGuildTagsBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"guildEnsNode\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"setGuildActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"guildEnsName\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"setGuildActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"guildEnsNode\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"uriTemplate\",\"type\":\"string\"}],\"name\":\"setGuildTokenUriTemplate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"guildEnsName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uriTemplate\",\"type\":\"string\"}],\"name\":\"setGuildTokenUriTemplate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"guildEnsName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tag\",\"type\":\"string\"}],\"name\":\"tagOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"guildEnsNode\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"tagHash\",\"type\":\"bytes32\"}],\"name\":\"tagOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"guildEnsName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferGuildAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"guildEnsNode\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferGuildAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"guildEnsName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"feePolicy\",\"type\":\"address\"}],\"name\":\"updateGuildFeePolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"guildEnsNode\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"feePolicy\",\"type\":\"address\"}],\"name\":\"updateGuildFeePolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"guildEnsName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"tagsAuthPolicy\",\"type\":\"address\"}],\"name\":\"updateGuildTagsAuthPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"guildEnsNode\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"tagsAuthPolicy\",\"type\":\"address\"}],\"name\":\"updateGuildTagsAuthPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addr(bytes32)\":{\"params\":{\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The associated address.\"}},\"addr(bytes32,uint256)\":{\"params\":{\"coinType\":\"The coin type\",\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The associated address.\"}},\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"claimGuildTag(bytes32,bytes32,address,bytes)\":{\"params\":{\"extraClaimArgs\":\"[Optional] Any additional arguments necessary for guild-specific logic,  such as authorization\",\"guildHash\":\"The namehash of the guild for which the tag should be claimed (e.g. namehash('my-guild.eth'))\",\"recipient\":\"The address that will receive this guild tag (usually same as the caller)\",\"tagHash\":\"The ENS namehash of the tag being claimed (e.g. keccak256('foo') for foo.my-guild.eth)\"}},\"claimGuildTag(string,string,address,bytes)\":{\"params\":{\"extraClaimArgs\":\"[Optional] Any additional arguments necessary for guild-specific logic,  such as authorization\",\"guildEnsName\":\"The guild's full domain name (e.g. 'my-guild.eth')\",\"recipient\":\"The address that will receive this guild tag (usually same as the caller)\",\"tag\":\"The tag to claim (e.g. 'foobar')\"}},\"claimGuildTagsBatch(bytes32,bytes32[],address[],bytes[])\":{\"params\":{\"extraClaimArgs\":\"Per-tag extra arguments required for guild-specific logic, such as authorization. Must have same length as array of tagHashes, even if each array element is itself empty bytes\",\"guildHash\":\"The ENS namehash of the guild's domain\",\"recipients\":\"Recipients of each tag to be claimed\",\"tagHashes\":\"Namehashes of each tag to be claimed\"}},\"deregisterGuild(bytes32)\":{\"params\":{\"guildHash\":\"The ENS namehash of the guild's domain\"}},\"deregisterGuild(string)\":{\"params\":{\"guildEnsName\":\"The guild's full domain name (e.g. 'my-guild.eth')\"}},\"guildAdmin(bytes32)\":{\"params\":{\"guildHash\":\"The ENS namehash of the guild's domain\"}},\"guildAdmin(string)\":{\"params\":{\"guildEnsName\":\"The guild's full domain name (e.g. 'my-guild.eth')\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"registerGuild(bytes32,address,address,address)\":{\"params\":{\"feePolicy\":\"The address of an implementation of FeePolicy to use for minting new tags within this guild\",\"guildAdmin\":\"The address that will administrate this guild\",\"guildHash\":\"The ENS namehash of the guild's domain\",\"tagsAuthPolicy\":\"The address of an implementaition of TagsAuthPolicy to use for minting new tags within this guild\"}},\"registerGuild(string,address,address,address)\":{\"params\":{\"admin\":\"The address that will administrate this guild\",\"ensName\":\"The guild's full domain name (e.g. 'my-guild.eth')\",\"feePolicy\":\"The address of an implementation of FeePolicy to use for minting new tags within this guild\",\"tagsAuthPolicy\":\"The address of an implementaition of TagsAuthPolicy to use for minting new tags within this guild\"}},\"revokeGuildTag(bytes32,bytes32,bytes)\":{\"params\":{\"extraData\":\"[Optional] Any additional arguments necessary for assessing whether a tag may be revoked\",\"guildHash\":\"The ENS namehash of the guild's domain\",\"tagHash\":\"The ENS namehash of the tag (e.g. keccak256('foo') for foo.my-guild.eth)\"}},\"revokeGuildTag(string,string,bytes)\":{\"params\":{\"extraData\":\"[Optional] Any additional arguments necessary for assessing whether a tag may be revoked\",\"guildEnsName\":\"The guild's full domain name (e.g. 'my-guild.eth')\",\"tag\":\"The tag to revoke (e.g. 'foobar')\"}},\"revokeGuildTagsBatch(bytes32,bytes32[],bytes[])\":{\"params\":{\"extraData\":\"Additional arguments necessary for assessing whether a tag may be revoked\",\"guildHash\":\"The ENS namehash of the guild's domain\",\"tagHashes\":\"ENS namehashes of all tags to revoke\"}},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"ENSGuilds NFTs are non-transferrable and may only be directly minted and burned with their corresonding guild tags.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"setGuildActive(bytes32,bool)\":{\"params\":{\"active\":\"The new status\",\"guildHash\":\"The ENS namehash of the guild's domain\"}},\"setGuildActive(string,bool)\":{\"params\":{\"active\":\"The new status\",\"guildEnsName\":\"The guild's full domain name (e.g. 'my-guild.eth')\"}},\"setGuildTokenUriTemplate(bytes32,string)\":{\"params\":{\"guildHash\":\"The ENS namehash of the guild's domain\",\"uriTemplate\":\"The ERC1155 metadata URL template\"}},\"setGuildTokenUriTemplate(string,string)\":{\"params\":{\"guildEnsName\":\"The guild's full domain name (e.g. 'my-guild.eth')\",\"uriTemplate\":\"The ERC1155 metadata URL template\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"tagOwner(bytes32,bytes32)\":{\"params\":{\"guildHash\":\"The ENS namehash of the guild's domain\",\"tagHash\":\"The ENS namehash of the tag (e.g. keccak256('foo') for foo.my-guild.eth)\"}},\"tagOwner(string,string)\":{\"params\":{\"guildEnsName\":\"The guild's full domain name (e.g. 'my-guild.eth')\",\"tag\":\"The tag (e.g. 'foobar')\"}},\"transferGuildAdmin(bytes32,address)\":{\"params\":{\"guildHash\":\"The ENS namehash of the guild's domain\",\"newAdmin\":\"The new admin\"}},\"transferGuildAdmin(string,address)\":{\"params\":{\"guildEnsName\":\"The guild's full domain name (e.g. 'my-guild.eth')\",\"newAdmin\":\"The new admin\"}},\"updateGuildFeePolicy(bytes32,address)\":{\"params\":{\"feePolicy\":\"The address of an implementation of FeePolicy to use for minting new tags within this guild\",\"guildHash\":\"The ENS namehash of the guild's domain\"}},\"updateGuildFeePolicy(string,address)\":{\"params\":{\"feePolicy\":\"The address of an implementation of FeePolicy to use for minting new tags within this guild\",\"guildEnsName\":\"The guild's full domain name (e.g. 'my-guild.eth')\"}},\"updateGuildTagsAuthPolicy(bytes32,address)\":{\"params\":{\"guildHash\":\"The ENS namehash of the guild's domain\",\"tagsAuthPolicy\":\"The address of an implementaition of TagsAuthPolicy to use for minting new tags within this guild\"}},\"updateGuildTagsAuthPolicy(string,address)\":{\"params\":{\"guildEnsName\":\"The guild's full domain name (e.g. 'my-guild.eth')\",\"tagsAuthPolicy\":\"The address of an implementaition of TagsAuthPolicy to use for minting new tags within this guild\"}},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}.\",\"params\":{\"tokenId\":\"The token whose URI is returned\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"AlreadyRegistered()\":[{\"notice\":\"Errors \"}]},\"events\":{\"Registered(bytes32)\":{\"notice\":\"Events \"}},\"kind\":\"user\",\"methods\":{\"addr(bytes32)\":{\"notice\":\"Returns the address associated with an ENS node.\"},\"addr(bytes32,uint256)\":{\"notice\":\"Returns the address associated with an ENS node.\"},\"claimGuildTag(bytes32,bytes32,address,bytes)\":{\"notice\":\"Claims a guild tag\"},\"claimGuildTag(string,string,address,bytes)\":{\"notice\":\"Claims a guild tag\"},\"claimGuildTagsBatch(bytes32,bytes32[],address[],bytes[])\":{\"notice\":\"Claims multiple tags for a guild at once\"},\"deregisterGuild(bytes32)\":{\"notice\":\"Deregisters a registered guild. Designates guild as inactive and marks all tags previously minted for that guild as eligible for revocation.\"},\"deregisterGuild(string)\":{\"notice\":\"Deregisters a registered guild. Designates guild as inactive and marks all tags previously minted for that guild as eligible for revocation.\"},\"ensRegistry()\":{\"notice\":\"State \"},\"guildAdmin(bytes32)\":{\"notice\":\"Returns the current admin registered for the given guild.\"},\"guildAdmin(string)\":{\"notice\":\"Returns the current admin registered for the given guild.\"},\"registerGuild(bytes32,address,address,address)\":{\"notice\":\"Registers a new guild from an existing ENS domain. Caller must be the ENS node's owner and ENSGuilds must have been designated an \\\"operator\\\" for the caller.\"},\"registerGuild(string,address,address,address)\":{\"notice\":\"Registers a new guild from an existing ENS domain. Caller must be the ENS node's owner and ENSGuilds must have been designated an \\\"operator\\\" for the caller.\"},\"revokeGuildTag(bytes32,bytes32,bytes)\":{\"notice\":\"Attempts to revoke an existing guild tag, if authorized by the guild's AuthPolicy. Deregistered guilds will bypass auth checks for revocation of all tags.\"},\"revokeGuildTag(string,string,bytes)\":{\"notice\":\"Attempts to revoke an existing guild tag, if authorized by the guild's AuthPolicy. Deregistered guilds will bypass auth checks for revocation of all tags.\"},\"revokeGuildTagsBatch(bytes32,bytes32[],bytes[])\":{\"notice\":\"Attempts to revoke multiple guild tags\"},\"setGuildActive(bytes32,bool)\":{\"notice\":\"Sets a guild as active or inactive. May only be called by the guild's registered admin.\"},\"setGuildActive(string,bool)\":{\"notice\":\"Sets a guild as active or inactive. May only be called by the guild's registered admin.\"},\"setGuildTokenUriTemplate(bytes32,string)\":{\"notice\":\"Sets the metadata URI template string for fetching metadata for a guild's tag NFTs. May only be called by the guild's registered admin.\"},\"setGuildTokenUriTemplate(string,string)\":{\"notice\":\"Sets the metadata URI template string for fetching metadata for a guild's tag NFTs. May only be called by the guild's registered admin.\"},\"tagOwner(bytes32,bytes32)\":{\"notice\":\"Returns the current owner of the given guild tag. Returns address(0) if no such guild or tag exists, or if the guild has been deregistered.\"},\"tagOwner(string,string)\":{\"notice\":\"Returns the current owner of the given guild tag. Returns address(0) if no such guild or tag exists, or if the guild has been deregistered.\"},\"transferGuildAdmin(bytes32,address)\":{\"notice\":\"Transfers the role of guild admin to the given address. May only be called by the guild's registered admin.\"},\"transferGuildAdmin(string,address)\":{\"notice\":\"Transfers the role of guild admin to the given address. May only be called by the guild's registered admin.\"},\"updateGuildFeePolicy(bytes32,address)\":{\"notice\":\"Updates the FeePolicy for an existing guild. May only be called by the guild's registered admin.\"},\"updateGuildFeePolicy(string,address)\":{\"notice\":\"Updates the FeePolicy for an existing guild. May only be called by the guild's registered admin.\"},\"updateGuildTagsAuthPolicy(bytes32,address)\":{\"notice\":\"Updates the TagsAuthPolicy for an existing guild. May only be called by the guild's registered admin.\"},\"updateGuildTagsAuthPolicy(string,address)\":{\"notice\":\"Updates the TagsAuthPolicy for an existing guild. May only be called by the guild's registered admin.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ensGuilds/ENSGuilds.sol\":\"ENSGuilds\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@ensdomains/ens-contracts/contracts/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface ENS {\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner\\n    ) external returns (bytes32);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setOwner(bytes32 node, address owner) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function owner(bytes32 node) external view returns (address);\\n\\n    function resolver(bytes32 node) external view returns (address);\\n\\n    function ttl(bytes32 node) external view returns (uint64);\\n\\n    function recordExists(bytes32 node) external view returns (bool);\\n\\n    function isApprovedForAll(address owner, address operator)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0xf79be82c1a2eb0a77fba4e0972221912e803309081ca460fd2cf61653e55758a\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddrResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the legacy (ETH-only) addr function.\\n */\\ninterface IAddrResolver {\\n    event AddrChanged(bytes32 indexed node, address a);\\n\\n    /**\\n     * Returns the address associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated address.\\n     */\\n    function addr(bytes32 node) external view returns (address payable);\\n}\\n\",\"keccak256\":\"0x2ad7f2fc60ebe0f93745fe70247f6a854f66af732483fda2a3c5e055614445e8\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the new (multicoin) addr function.\\n */\\ninterface IAddressResolver {\\n    event AddressChanged(\\n        bytes32 indexed node,\\n        uint256 coinType,\\n        bytes newAddress\\n    );\\n\\n    function addr(bytes32 node, uint256 coinType)\\n        external\\n        view\\n        returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x37221203e063dee5aa2a067a6ab3401e9cca41cce5b15230994b6ea377f05ed5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xd917747dc87f189c6779b894f367a028f9dca4be930283cccec8f312966af820\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x0812bc73d6e30558840122fa48d6f64ae978ccc1b1fc42e616bac190c6360f46\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/ensGuilds/ENSGuilds.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport \\\"@ensdomains/ens-contracts/contracts/registry/ENS.sol\\\";\\n\\nimport \\\"./interfaces/IENSGuilds.sol\\\";\\nimport \\\"../feePolicies/FeePolicy.sol\\\";\\nimport \\\"../tagsAuthPolicies/ITagsAuthPolicy.sol\\\";\\nimport \\\"./mixins/ENSResolver.sol\\\";\\nimport \\\"./mixins/ENSGuildsToken.sol\\\";\\nimport \\\"./mixins/ENSGuildsHumanized.sol\\\";\\n\\ncontract ENSGuilds is IENSGuilds, ENSGuildsHumanized, ENSGuildsToken, ENSResolver, ReentrancyGuard {\\n    struct GuildInfo {\\n        address admin;\\n        FeePolicy feePolicy;\\n        ITagsAuthPolicy tagsAuthPolicy;\\n        bool active;\\n        bool deregistered;\\n    }\\n\\n    using ERC165Checker for address;\\n\\n    /** State */\\n    ENS public ensRegistry;\\n    mapping(bytes32 => GuildInfo) public guilds;\\n\\n    /** Errors */\\n    error AlreadyRegistered();\\n    error ENSGuildsIsNotRegisteredOperator();\\n    error NotDomainOwner();\\n    error InvalidPolicy(address);\\n    error GuildNotActive();\\n    error ClaimUnauthorized();\\n    error RevokeUnauthorized();\\n    error GuildAdminOnly();\\n    error TagAlreadyClaimed();\\n    error FeeError();\\n\\n    modifier onlyGuildAdmin(bytes32 guildHash) {\\n        if (guilds[guildHash].admin != _msgSender()) {\\n            revert GuildAdminOnly();\\n        }\\n        _;\\n    }\\n\\n    constructor(string memory defaultTokenMetadataUri, ENS _ensRegistry) ERC1155(defaultTokenMetadataUri) {\\n        ensRegistry = _ensRegistry;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ENSResolver, ENSGuildsToken, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IENSGuilds).interfaceId ||\\n            ENSResolver.supportsInterface(interfaceId) ||\\n            ENSGuildsToken.supportsInterface(interfaceId) ||\\n            ERC165.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IENSGuilds\\n     */\\n    function registerGuild(\\n        bytes32 ensNode,\\n        address admin,\\n        address feePolicy,\\n        address tagsAuthPolicy\\n    ) public override(ENSGuildsHumanized, IENSGuilds) {\\n        // Check caller is owner of domain\\n        if (ensRegistry.owner(ensNode) != _msgSender()) {\\n            revert NotDomainOwner();\\n        }\\n\\n        // Check guild not yet registered\\n        if (address(guilds[ensNode].feePolicy) != address(0)) {\\n            revert AlreadyRegistered();\\n        }\\n\\n        // Check ENSGuilds contract has been configured as ENS resolver for the guild\\n        if (!ensRegistry.isApprovedForAll(_msgSender(), address(this))) {\\n            revert ENSGuildsIsNotRegisteredOperator();\\n        }\\n\\n        // Check for valid fee/tagsAuth policies\\n        if (!feePolicy.supportsInterface(type(FeePolicy).interfaceId)) {\\n            revert InvalidPolicy(feePolicy);\\n        }\\n        if (!tagsAuthPolicy.supportsInterface(type(ITagsAuthPolicy).interfaceId)) {\\n            revert InvalidPolicy(tagsAuthPolicy);\\n        }\\n\\n        guilds[ensNode] = GuildInfo({\\n            admin: admin,\\n            feePolicy: FeePolicy(feePolicy),\\n            tagsAuthPolicy: ITagsAuthPolicy(tagsAuthPolicy),\\n            active: true,\\n            deregistered: false\\n        });\\n\\n        emit Registered(ensNode);\\n    }\\n\\n    /**\\n     * @inheritdoc IENSGuilds\\n     */\\n    function deregisterGuild(bytes32 ensNode) public override(ENSGuildsHumanized, IENSGuilds) onlyGuildAdmin(ensNode) {\\n        delete guilds[ensNode];\\n        guilds[ensNode].deregistered = true;\\n        emit Deregistered(ensNode);\\n    }\\n\\n    /**\\n     * @inheritdoc IENSGuilds\\n     */\\n    function claimGuildTag(\\n        bytes32 guildEnsNode,\\n        bytes32 tagHash,\\n        address recipient,\\n        bytes calldata extraClaimArgs\\n    ) public payable override(ENSGuildsHumanized, IENSGuilds) nonReentrant {\\n        // assert guild is not frozen\\n        if (!guilds[guildEnsNode].active) {\\n            revert GuildNotActive();\\n        }\\n\\n        // check tag not already registered\\n        bytes32 ensNode = keccak256(abi.encodePacked(guildEnsNode, tagHash));\\n        if (ensRegistry.owner(ensNode) != address(0)) {\\n            revert TagAlreadyClaimed();\\n        }\\n\\n        // check caller is authorized to claim tag\\n        ITagsAuthPolicy auth = guilds[guildEnsNode].tagsAuthPolicy;\\n        if (!auth.canClaimTag(guildEnsNode, tagHash, _msgSender(), recipient, extraClaimArgs)) {\\n            revert ClaimUnauthorized();\\n        }\\n\\n        // fees\\n        (address feeToken, uint256 fee, address feePaidTo) = guilds[guildEnsNode].feePolicy.tagClaimFee(\\n            guildEnsNode,\\n            tagHash,\\n            _msgSender(),\\n            extraClaimArgs\\n        );\\n        if (fee != 0) {\\n            if (feeToken == address(0)) {\\n                if (msg.value != fee) {\\n                    revert FeeError();\\n                }\\n                // solhint-disable-next-line avoid-low-level-calls\\n                (bool sent, ) = feePaidTo.call{ value: msg.value }(\\\"\\\");\\n                if (!sent) revert FeeError();\\n            } else {\\n                try IERC20(feeToken).transferFrom(_msgSender(), feePaidTo, fee) returns (bool sent) {\\n                    if (!sent) revert FeeError();\\n                } catch {\\n                    revert FeeError();\\n                }\\n            }\\n        }\\n\\n        // NFT mint\\n        _mintNewGuildToken(guildEnsNode, tagHash, recipient);\\n\\n        // inform auth contract that tag was claimed, then revoke an existing tag if instructed\\n        bytes32 tagToRevoke = auth.onTagClaimed(guildEnsNode, tagHash, _msgSender(), recipient, extraClaimArgs);\\n        if (tagToRevoke != bytes32(0)) {\\n            _revokeTag(guildEnsNode, tagToRevoke);\\n        }\\n\\n        // Register this new name in ENS\\n        ensRegistry.setSubnodeRecord(guildEnsNode, tagHash, address(this), address(this), 0);\\n\\n        // Set forward record in ENS resolver\\n        _setEnsForwardRecord(ensNode, recipient);\\n\\n        emit TagClaimed(guildEnsNode, tagHash, recipient);\\n    }\\n\\n    /**\\n     * @inheritdoc IENSGuilds\\n     */\\n    function claimGuildTagsBatch(\\n        bytes32 guildEnsNode,\\n        bytes32[] calldata tagHashes,\\n        address[] calldata recipients,\\n        bytes[] calldata extraClaimArgs\\n    ) external payable override {\\n        for (uint i = 0; i < tagHashes.length; i++) {\\n            claimGuildTag(guildEnsNode, tagHashes[i], recipients[i], extraClaimArgs[i]);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IENSGuilds\\n     */\\n    function guildAdmin(bytes32 guildHash) public view override(ENSGuildsHumanized, IENSGuilds) returns (address) {\\n        return guilds[guildHash].admin;\\n    }\\n\\n    /**\\n     * @inheritdoc IENSGuilds\\n     */\\n    function revokeGuildTag(\\n        bytes32 guildEnsNode,\\n        bytes32 tagHash,\\n        bytes calldata extraData\\n    ) public override(ENSGuildsHumanized, IENSGuilds) nonReentrant {\\n        GuildInfo storage guild = guilds[guildEnsNode];\\n\\n        // revoke authorized?\\n        ITagsAuthPolicy auth = guilds[guildEnsNode].tagsAuthPolicy;\\n        if (!guild.deregistered && !auth.tagCanBeRevoked(_msgSender(), guildEnsNode, tagHash, extraData)) {\\n            revert RevokeUnauthorized();\\n        }\\n        _revokeTag(guildEnsNode, tagHash);\\n    }\\n\\n    /**\\n     * @inheritdoc IENSGuilds\\n     */\\n    function revokeGuildTagsBatch(\\n        bytes32 guildHash,\\n        bytes32[] calldata tagHashes,\\n        bytes[] calldata extraData\\n    ) external override {\\n        for (uint i = 0; i < tagHashes.length; i++) {\\n            revokeGuildTag(guildHash, tagHashes[i], extraData[i]);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IENSGuilds\\n     */\\n    function updateGuildFeePolicy(\\n        bytes32 guildEnsNode,\\n        address feePolicy\\n    ) public override(ENSGuildsHumanized, IENSGuilds) onlyGuildAdmin(guildEnsNode) {\\n        if (!feePolicy.supportsInterface(type(FeePolicy).interfaceId)) {\\n            revert InvalidPolicy(feePolicy);\\n        }\\n        guilds[guildEnsNode].feePolicy = FeePolicy(feePolicy);\\n        emit FeePolicyUpdated(guildEnsNode, feePolicy);\\n    }\\n\\n    /**\\n     * @inheritdoc IENSGuilds\\n     */\\n    function updateGuildTagsAuthPolicy(\\n        bytes32 guildEnsNode,\\n        address tagsAuthPolicy\\n    ) public override(ENSGuildsHumanized, IENSGuilds) onlyGuildAdmin(guildEnsNode) {\\n        if (!tagsAuthPolicy.supportsInterface(type(ITagsAuthPolicy).interfaceId)) {\\n            revert InvalidPolicy(tagsAuthPolicy);\\n        }\\n        guilds[guildEnsNode].tagsAuthPolicy = ITagsAuthPolicy(tagsAuthPolicy);\\n        emit TagsAuthPolicyUpdated(guildEnsNode, tagsAuthPolicy);\\n    }\\n\\n    /**\\n     * @inheritdoc IENSGuilds\\n     */\\n    function transferGuildAdmin(\\n        bytes32 guildEnsNode,\\n        address newAdmin\\n    ) public override(ENSGuildsHumanized, IENSGuilds) onlyGuildAdmin(guildEnsNode) {\\n        guilds[guildEnsNode].admin = newAdmin;\\n        emit AdminTransferred(guildEnsNode, newAdmin);\\n    }\\n\\n    /**\\n     * @inheritdoc IENSGuilds\\n     */\\n    function setGuildTokenUriTemplate(\\n        bytes32 guildEnsNode,\\n        string calldata uriTemplate\\n    ) public override(ENSGuildsHumanized, IENSGuilds) onlyGuildAdmin(guildEnsNode) {\\n        _setGuildTokenURITemplate(guildEnsNode, uriTemplate);\\n        emit TokenUriTemplateSet(guildEnsNode, uriTemplate);\\n    }\\n\\n    /**\\n     * @inheritdoc IENSGuilds\\n     */\\n    function setGuildActive(\\n        bytes32 guildEnsNode,\\n        bool active\\n    ) public override(ENSGuildsHumanized, IENSGuilds) onlyGuildAdmin(guildEnsNode) {\\n        guilds[guildEnsNode].active = active;\\n        emit SetActive(guildEnsNode, active);\\n    }\\n\\n    /**\\n     * @inheritdoc IENSGuilds\\n     */\\n    function tagOwner(\\n        bytes32 guildEnsNode,\\n        bytes32 tagHash\\n    ) public view override(ENSGuildsHumanized, IENSGuilds) returns (address) {\\n        bytes32 tagEnsNode = keccak256(abi.encodePacked(guildEnsNode, tagHash));\\n        // if ENSGuilds is not the owner of the tag's ENS node, then the tag itself is not valid\\n        // and therefore has no owner\\n        if (ensRegistry.owner(tagEnsNode) != address(this)) {\\n            return address(0);\\n        }\\n        return addr(tagEnsNode);\\n    }\\n\\n    function _revokeTag(bytes32 guildEnsNode, bytes32 tagHash) private {\\n        address _tagOwner = tagOwner(guildEnsNode, tagHash);\\n\\n        // check that tag exists\\n        if (_tagOwner == address(0)) {\\n            revert RevokeUnauthorized();\\n        }\\n\\n        ensRegistry.setSubnodeRecord(guildEnsNode, tagHash, address(0), address(0), 0);\\n        _burnGuildToken(guildEnsNode, tagHash, _tagOwner);\\n\\n        emit TagRevoked(guildEnsNode, tagHash);\\n    }\\n}\\n\",\"keccak256\":\"0x6bd30d15b7237532947dee33f8bff1fe7c3592481b5d8f0e3eab0348a50247d1\",\"license\":\"MIT\"},\"contracts/ensGuilds/interfaces/IENSGuilds.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddrResolver.sol\\\";\\nimport \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddressResolver.sol\\\";\\n\\ninterface IENSGuilds is IAddrResolver, IAddressResolver, IERC1155MetadataURI {\\n    /** Events */\\n    event Registered(bytes32 indexed guildHash);\\n    event Deregistered(bytes32 indexed guildHash);\\n    event TagClaimed(bytes32 indexed guildId, bytes32 indexed tagHash, address recipient);\\n    event TagRevoked(bytes32 indexed guildId, bytes32 indexed tagHash);\\n    event FeePolicyUpdated(bytes32 indexed guildId, address feePolicy);\\n    event TagsAuthPolicyUpdated(bytes32 indexed guildId, address tagsAuthPolicy);\\n    event AdminTransferred(bytes32 indexed guildId, address newAdmin);\\n    event SetActive(bytes32 indexed guildId, bool active);\\n    event TokenUriTemplateSet(bytes32 indexed guildId, string uriTemplate);\\n\\n    /* Functions */\\n\\n    /**\\n     * @notice Registers a new guild from an existing ENS domain.\\n     * Caller must be the ENS node's owner and ENSGuilds must have been designated an \\\"operator\\\" for the caller.\\n     * @param guildHash The ENS namehash of the guild's domain\\n     * @param guildAdmin The address that will administrate this guild\\n     * @param feePolicy The address of an implementation of FeePolicy to use for minting new tags within this guild\\n     * @param tagsAuthPolicy The address of an implementaition of TagsAuthPolicy to use for minting new tags within this guild\\n     */\\n    function registerGuild(bytes32 guildHash, address guildAdmin, address feePolicy, address tagsAuthPolicy) external;\\n\\n    /**\\n     * @notice Deregisters a registered guild.\\n     * Designates guild as inactive and marks all tags previously minted for that guild as eligible for revocation.\\n     * @param guildHash The ENS namehash of the guild's domain\\n     */\\n    function deregisterGuild(bytes32 guildHash) external;\\n\\n    /**\\n     * @notice Claims a guild tag\\n     * @param guildHash The namehash of the guild for which the tag should be claimed (e.g. namehash('my-guild.eth'))\\n     * @param tagHash The ENS namehash of the tag being claimed (e.g. keccak256('foo') for foo.my-guild.eth)\\n     * @param recipient The address that will receive this guild tag (usually same as the caller)\\n     * @param extraClaimArgs [Optional] Any additional arguments necessary for guild-specific logic,\\n     *  such as authorization\\n     */\\n    function claimGuildTag(\\n        bytes32 guildHash,\\n        bytes32 tagHash,\\n        address recipient,\\n        bytes calldata extraClaimArgs\\n    ) external payable;\\n\\n    /**\\n     * @notice Claims multiple tags for a guild at once\\n     * @param guildHash The ENS namehash of the guild's domain\\n     * @param tagHashes Namehashes of each tag to be claimed\\n     * @param recipients Recipients of each tag to be claimed\\n     * @param extraClaimArgs Per-tag extra arguments required for guild-specific logic, such as authorization.\\n     * Must have same length as array of tagHashes, even if each array element is itself empty bytes\\n     */\\n    function claimGuildTagsBatch(\\n        bytes32 guildHash,\\n        bytes32[] calldata tagHashes,\\n        address[] calldata recipients,\\n        bytes[] calldata extraClaimArgs\\n    ) external payable;\\n\\n    /**\\n     * @notice Returns the current owner of the given guild tag.\\n     * Returns address(0) if no such guild or tag exists, or if the guild has been deregistered.\\n     * @param guildHash The ENS namehash of the guild's domain\\n     * @param tagHash The ENS namehash of the tag (e.g. keccak256('foo') for foo.my-guild.eth)\\n     */\\n    function tagOwner(bytes32 guildHash, bytes32 tagHash) external view returns (address);\\n\\n    /**\\n     * @notice Attempts to revoke an existing guild tag, if authorized by the guild's AuthPolicy.\\n     * Deregistered guilds will bypass auth checks for revocation of all tags.\\n     * @param guildHash The ENS namehash of the guild's domain\\n     * @param tagHash The ENS namehash of the tag (e.g. keccak256('foo') for foo.my-guild.eth)\\n     * @param extraData [Optional] Any additional arguments necessary for assessing whether a tag may be revoked\\n     */\\n    function revokeGuildTag(bytes32 guildHash, bytes32 tagHash, bytes calldata extraData) external;\\n\\n    /**\\n     * @notice Attempts to revoke multiple guild tags\\n     * @param guildHash The ENS namehash of the guild's domain\\n     * @param tagHashes ENS namehashes of all tags to revoke\\n     * @param extraData Additional arguments necessary for assessing whether a tag may be revoked\\n     */\\n    function revokeGuildTagsBatch(bytes32 guildHash, bytes32[] calldata tagHashes, bytes[] calldata extraData) external;\\n\\n    /**\\n     * @notice Updates the FeePolicy for an existing guild. May only be called by the guild's registered admin.\\n     * @param guildHash The ENS namehash of the guild's domain\\n     * @param feePolicy The address of an implementation of FeePolicy to use for minting new tags within this guild\\n     */\\n    function updateGuildFeePolicy(bytes32 guildHash, address feePolicy) external;\\n\\n    /**\\n     * @notice Updates the TagsAuthPolicy for an existing guild. May only be called by the guild's registered admin.\\n     * @param guildHash The ENS namehash of the guild's domain\\n     * @param tagsAuthPolicy The address of an implementaition of TagsAuthPolicy to use for minting new tags within this guild\\n     */\\n    function updateGuildTagsAuthPolicy(bytes32 guildHash, address tagsAuthPolicy) external;\\n\\n    /**\\n     * @notice Sets the metadata URI template string for fetching metadata for a guild's tag NFTs.\\n     * May only be called by the guild's registered admin.\\n     * @param guildHash The ENS namehash of the guild's domain\\n     * @param uriTemplate The ERC1155 metadata URL template\\n     */\\n    function setGuildTokenUriTemplate(bytes32 guildHash, string calldata uriTemplate) external;\\n\\n    /**\\n     * @notice Sets a guild as active or inactive. May only be called by the guild's registered admin.\\n     * @param guildHash The ENS namehash of the guild's domain\\n     * @param active The new status\\n     */\\n    function setGuildActive(bytes32 guildHash, bool active) external;\\n\\n    /**\\n     * @notice Returns the current admin registered for the given guild.\\n     * @param guildHash The ENS namehash of the guild's domain\\n     */\\n    function guildAdmin(bytes32 guildHash) external view returns (address);\\n\\n    /**\\n     * @notice Transfers the role of guild admin to the given address. May only be called by the guild's registered admin.\\n     * @param guildHash The ENS namehash of the guild's domain\\n     * @param newAdmin The new admin\\n     */\\n    function transferGuildAdmin(bytes32 guildHash, address newAdmin) external;\\n}\\n\",\"keccak256\":\"0xbb9f80f814a5ce3152e525ffa0ab4f8da0f1fed57844dce6b4783397e6971581\",\"license\":\"MIT\"},\"contracts/ensGuilds/interfaces/IENSGuildsHumanized.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IENSGuildsHumanized {\\n    function registerGuild(\\n        string memory ensName,\\n        address guildAdmin,\\n        address feePolicy,\\n        address tagsAuthPolicy\\n    ) external;\\n\\n    function deregisterGuild(string memory guildEnsName) external;\\n\\n    function claimGuildTag(\\n        string memory guildEnsName,\\n        string memory tag,\\n        address recipient,\\n        bytes calldata extraClaimArgs\\n    ) external payable;\\n\\n    function tagOwner(string memory guildEnsName, string memory tag) external view returns (address);\\n\\n    function revokeGuildTag(string memory guildEnsName, string memory tag, bytes calldata extraData) external;\\n\\n    function updateGuildFeePolicy(string memory guildEnsName, address feePolicy) external;\\n\\n    function updateGuildTagsAuthPolicy(string memory guildEnsName, address tagsAuthPolicy) external;\\n\\n    function setGuildTokenUriTemplate(string memory guildEnsName, string calldata uriTemplate) external;\\n\\n    function setGuildActive(string memory guildEnsName, bool active) external;\\n\\n    function guildAdmin(string memory guildEnsName) external view returns (address);\\n\\n    function transferGuildAdmin(string memory guildEnsName, address newAdmin) external;\\n}\\n\",\"keccak256\":\"0x3b96a8dc7464322ae5121c5968e50a46b981b9f8ef4e1033756839c8b781bed3\",\"license\":\"MIT\"},\"contracts/ensGuilds/mixins/ENSGuildsHumanized.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../interfaces/IENSGuilds.sol\\\";\\nimport \\\"../interfaces/IENSGuildsHumanized.sol\\\";\\nimport \\\"../../libraries/ENSNamehash.sol\\\";\\n\\nabstract contract ENSGuildsHumanized is IENSGuildsHumanized {\\n    using ENSNamehash for bytes;\\n\\n    // Humanized versions\\n\\n    /**\\n     * @notice Registers a new guild from an existing ENS domain.\\n     * Caller must be the ENS node's owner and ENSGuilds must have been designated an \\\"operator\\\" for the caller.\\n     * @param ensName The guild's full domain name (e.g. 'my-guild.eth')\\n     * @param admin The address that will administrate this guild\\n     * @param feePolicy The address of an implementation of FeePolicy to use for minting new tags within this guild\\n     * @param tagsAuthPolicy The address of an implementaition of TagsAuthPolicy to use for minting new tags within this guild\\n     */\\n    function registerGuild(\\n        string memory ensName,\\n        address admin,\\n        address feePolicy,\\n        address tagsAuthPolicy\\n    ) external override {\\n        bytes32 ensNode = bytes(ensName).namehash();\\n        registerGuild(ensNode, admin, feePolicy, tagsAuthPolicy);\\n    }\\n\\n    /**\\n     * @notice Deregisters a registered guild.\\n     * Designates guild as inactive and marks all tags previously minted for that guild as eligible for revocation.\\n     * @param guildEnsName The guild's full domain name (e.g. 'my-guild.eth')\\n     */\\n    function deregisterGuild(string memory guildEnsName) external {\\n        bytes32 guildEnsNode = bytes(guildEnsName).namehash();\\n        deregisterGuild(guildEnsNode);\\n    }\\n\\n    /**\\n     * @notice Claims a guild tag\\n     * @param guildEnsName The guild's full domain name (e.g. 'my-guild.eth')\\n     * @param tag The tag to claim (e.g. 'foobar')\\n     * @param recipient The address that will receive this guild tag (usually same as the caller)\\n     * @param extraClaimArgs [Optional] Any additional arguments necessary for guild-specific logic,\\n     *  such as authorization\\n     */\\n    function claimGuildTag(\\n        string memory guildEnsName,\\n        string memory tag,\\n        address recipient,\\n        bytes calldata extraClaimArgs\\n    ) external payable override {\\n        bytes32 guildEnsNode = bytes(guildEnsName).namehash();\\n        bytes32 tagHash = keccak256(bytes(tag));\\n        claimGuildTag(guildEnsNode, tagHash, recipient, extraClaimArgs);\\n    }\\n\\n    /**\\n     * @notice Attempts to revoke an existing guild tag, if authorized by the guild's AuthPolicy.\\n     * Deregistered guilds will bypass auth checks for revocation of all tags.\\n     * @param guildEnsName The guild's full domain name (e.g. 'my-guild.eth')\\n     * @param tag The tag to revoke (e.g. 'foobar')\\n     * @param extraData [Optional] Any additional arguments necessary for assessing whether a tag may be revoked\\n     */\\n    function revokeGuildTag(string memory guildEnsName, string memory tag, bytes calldata extraData) external {\\n        bytes32 guildEnsNode = bytes(guildEnsName).namehash();\\n        bytes32 tagHash = keccak256(bytes(tag));\\n        revokeGuildTag(guildEnsNode, tagHash, extraData);\\n    }\\n\\n    /**\\n     * @notice Returns the current owner of the given guild tag.\\n     * Returns address(0) if no such guild or tag exists, or if the guild has been deregistered.\\n     * @param guildEnsName The guild's full domain name (e.g. 'my-guild.eth')\\n     * @param tag The tag (e.g. 'foobar')\\n     */\\n    function tagOwner(string memory guildEnsName, string memory tag) external view returns (address) {\\n        bytes32 guildEnsNode = bytes(guildEnsName).namehash();\\n        bytes32 tagHash = keccak256(bytes(tag));\\n        return tagOwner(guildEnsNode, tagHash);\\n    }\\n\\n    /**\\n     * @notice Updates the FeePolicy for an existing guild. May only be called by the guild's registered admin.\\n     * @param guildEnsName The guild's full domain name (e.g. 'my-guild.eth')\\n     * @param feePolicy The address of an implementation of FeePolicy to use for minting new tags within this guild\\n     */\\n    function updateGuildFeePolicy(string memory guildEnsName, address feePolicy) external {\\n        bytes32 guildEnsNode = bytes(guildEnsName).namehash();\\n        updateGuildFeePolicy(guildEnsNode, feePolicy);\\n    }\\n\\n    /**\\n     * @notice Updates the TagsAuthPolicy for an existing guild. May only be called by the guild's registered admin.\\n     * @param guildEnsName The guild's full domain name (e.g. 'my-guild.eth')\\n     * @param tagsAuthPolicy The address of an implementaition of TagsAuthPolicy to use for minting new tags within this guild\\n     */\\n    function updateGuildTagsAuthPolicy(string memory guildEnsName, address tagsAuthPolicy) external {\\n        bytes32 guildEnsNode = bytes(guildEnsName).namehash();\\n        updateGuildTagsAuthPolicy(guildEnsNode, tagsAuthPolicy);\\n    }\\n\\n    /**\\n     * @notice Sets the metadata URI template string for fetching metadata for a guild's tag NFTs.\\n     * May only be called by the guild's registered admin.\\n     * @param guildEnsName The guild's full domain name (e.g. 'my-guild.eth')\\n     * @param uriTemplate The ERC1155 metadata URL template\\n     */\\n    function setGuildTokenUriTemplate(string memory guildEnsName, string calldata uriTemplate) external {\\n        bytes32 guildEnsNode = bytes(guildEnsName).namehash();\\n        setGuildTokenUriTemplate(guildEnsNode, uriTemplate);\\n    }\\n\\n    /**\\n     * @notice Sets a guild as active or inactive. May only be called by the guild's registered admin.\\n     * @param guildEnsName The guild's full domain name (e.g. 'my-guild.eth')\\n     * @param active The new status\\n     */\\n    function setGuildActive(string memory guildEnsName, bool active) external {\\n        bytes32 guildEnsNode = bytes(guildEnsName).namehash();\\n        setGuildActive(guildEnsNode, active);\\n    }\\n\\n    /**\\n     * @notice Returns the current admin registered for the given guild.\\n     * @param guildEnsName The guild's full domain name (e.g. 'my-guild.eth')\\n     */\\n    function guildAdmin(string memory guildEnsName) external view returns (address) {\\n        bytes32 guildEnsNode = bytes(guildEnsName).namehash();\\n        return guildAdmin(guildEnsNode);\\n    }\\n\\n    /**\\n     * @notice Transfers the role of guild admin to the given address. May only be called by the guild's registered admin.\\n     * @param guildEnsName The guild's full domain name (e.g. 'my-guild.eth')\\n     * @param newAdmin The new admin\\n     */\\n    function transferGuildAdmin(string memory guildEnsName, address newAdmin) external {\\n        bytes32 guildEnsNode = bytes(guildEnsName).namehash();\\n        transferGuildAdmin(guildEnsNode, newAdmin);\\n    }\\n\\n    // Original versions\\n\\n    function registerGuild(bytes32, address, address, address) public virtual;\\n\\n    function deregisterGuild(bytes32) public virtual;\\n\\n    function claimGuildTag(bytes32, bytes32, address, bytes calldata) public payable virtual;\\n\\n    function revokeGuildTag(bytes32, bytes32, bytes calldata) public virtual;\\n\\n    function tagOwner(bytes32, bytes32) public view virtual returns (address);\\n\\n    function updateGuildFeePolicy(bytes32, address) public virtual;\\n\\n    function updateGuildTagsAuthPolicy(bytes32, address) public virtual;\\n\\n    function setGuildTokenUriTemplate(bytes32, string calldata) public virtual;\\n\\n    function setGuildActive(bytes32, bool) public virtual;\\n\\n    function guildAdmin(bytes32) public view virtual returns (address);\\n\\n    function transferGuildAdmin(bytes32, address) public virtual;\\n}\\n\",\"keccak256\":\"0x1e1a8ab9eb46d9973969f7406d86fdca1c730b3cdfa43b323850d39d0aff57d4\",\"license\":\"MIT\"},\"contracts/ensGuilds/mixins/ENSGuildsToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\nabstract contract ENSGuildsToken is ERC1155 {\\n    using Counters for Counters.Counter;\\n\\n    error GuildsTokenTransferNotAllowed();\\n\\n    uint256 internal constant GUILD_ID_MASK = uint256(~uint128(0)) << 128;\\n\\n    struct GuildTokenInfo {\\n        Counters.Counter tokenIdTracker;\\n        string templateURI;\\n        mapping(bytes32 => uint256) guildTagsToTokenIds;\\n    }\\n\\n    // maps the top 128 bits of each guild's GuildID (ensNode) to its metadataURI and token ID counter\\n    mapping(bytes16 => GuildTokenInfo) private guilds;\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC1155) returns (bool) {\\n        return ERC1155.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     * @param tokenId The token whose URI is returned\\n     */\\n    function uri(uint256 tokenId) public view virtual override returns (string memory) {\\n        // calculate truncated guildHash from first 128 bits of tokenId\\n        uint256 truncatedGuildHashUint = tokenId & GUILD_ID_MASK;\\n        bytes16 truncatedGuildHash = bytes16(bytes32(truncatedGuildHashUint));\\n\\n        // return guild-specific URI if exists\\n        string storage guildTemplateURI = guilds[truncatedGuildHash].templateURI;\\n        if (bytes(guildTemplateURI).length != 0) {\\n            return guildTemplateURI;\\n        }\\n\\n        // return default URI shared by all guilds\\n        return ERC1155.uri(tokenId);\\n    }\\n\\n    function _mintNewGuildToken(bytes32 guildHash, bytes32 tagHash, address to) internal {\\n        bytes16 truncatedGuildHash = bytes16(guildHash);\\n\\n        uint256 tokenCounterCurrent = guilds[truncatedGuildHash].tokenIdTracker.current();\\n        require(tokenCounterCurrent < type(uint128).max, \\\"tokenCounterOverflow\\\");\\n\\n        guilds[truncatedGuildHash].tokenIdTracker.increment();\\n\\n        uint256 truncatedGuildHashUint = uint256(guildHash) & GUILD_ID_MASK;\\n        uint256 fullTokenId = truncatedGuildHashUint + tokenCounterCurrent;\\n\\n        bytes memory emptyData;\\n        _mint(to, fullTokenId, 1, emptyData);\\n\\n        guilds[truncatedGuildHash].guildTagsToTokenIds[tagHash] = fullTokenId;\\n    }\\n\\n    function _burnGuildToken(bytes32 guildHash, bytes32 tagHash, address tagOwner) internal {\\n        bytes16 truncatedGuildHash = bytes16(guildHash);\\n        uint256 tokenId = guilds[truncatedGuildHash].guildTagsToTokenIds[tagHash];\\n\\n        _burn(tagOwner, tokenId, 1);\\n    }\\n\\n    function _setGuildTokenURITemplate(bytes32 guildHash, string calldata templateURI) internal {\\n        bytes16 truncatedGuildHash = bytes16(guildHash);\\n        guilds[truncatedGuildHash].templateURI = templateURI;\\n    }\\n\\n    /**\\n     * @dev ENSGuilds NFTs are non-transferrable and may only be directly minted and burned\\n     * with their corresonding guild tags.\\n     */\\n    function safeTransferFrom(address, address, uint256, uint256, bytes memory) public virtual override {\\n        revert GuildsTokenTransferNotAllowed();\\n    }\\n}\\n\",\"keccak256\":\"0x242b2db00940af2a9450ba1986b24bf74f2fb9a5a161da4521254c0e3fa4aecb\",\"license\":\"MIT\"},\"contracts/ensGuilds/mixins/ENSResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddrResolver.sol\\\";\\nimport \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddressResolver.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nabstract contract ENSResolver is IAddrResolver, IAddressResolver, ERC165 {\\n    uint256 private constant COIN_TYPE_ETH = 60;\\n\\n    mapping(bytes32 => address) public addresses;\\n\\n    /**\\n     * Sets the address associated with an ENS node.\\n     * May only be called by descendants of this contract\\n     */\\n    function _setEnsForwardRecord(bytes32 node, address a) internal {\\n        addresses[node] = a;\\n        emit AddrChanged(node, a);\\n        emit AddressChanged(node, COIN_TYPE_ETH, addressToBytes(a));\\n    }\\n\\n    /**\\n     * @notice Returns the address associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated address.\\n     */\\n    function addr(bytes32 node) public view override returns (address payable) {\\n        bytes memory a = addr(node, COIN_TYPE_ETH);\\n        if (a.length == 0) {\\n            return payable(0);\\n        }\\n        return bytesToAddress(a);\\n    }\\n\\n    /**\\n     * @notice Returns the address associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @param coinType The coin type\\n     * @return The associated address.\\n     */\\n    function addr(bytes32 node, uint256 coinType) public view override returns (bytes memory) {\\n        bytes memory emptyBytes;\\n\\n        if (coinType != COIN_TYPE_ETH) {\\n            return emptyBytes;\\n        }\\n\\n        address a = addresses[node];\\n        if (a == address(0)) {\\n            return emptyBytes;\\n        }\\n        return addressToBytes(a);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceID) public view virtual override(ERC165) returns (bool) {\\n        return\\n            interfaceID == type(IAddrResolver).interfaceId ||\\n            interfaceID == type(IAddressResolver).interfaceId ||\\n            super.supportsInterface(interfaceID);\\n    }\\n\\n    // solhint-disable\\n    // Source: https://github.com/ensdomains/ens-contracts/blob/340a6d05cd00d078ae40edbc58c139eb7048189a/contracts/resolvers/profiles/AddrResolver.sol#L85\\n    function bytesToAddress(bytes memory b) internal pure returns (address payable a) {\\n        require(b.length == 20);\\n        assembly {\\n            a := div(mload(add(b, 32)), exp(256, 12)) // cspell:disable-line\\n        }\\n    }\\n\\n    // Source: https://github.com/ensdomains/ens-contracts/blob/340a6d05cd00d078ae40edbc58c139eb7048189a/contracts/resolvers/profiles/AddrResolver.sol#L96\\n    function addressToBytes(address a) internal pure returns (bytes memory b) {\\n        b = new bytes(20);\\n        assembly {\\n            mstore(add(b, 32), mul(a, exp(256, 12))) // cspell:disable-line\\n        }\\n    }\\n    // solhint-enable\\n}\\n\",\"keccak256\":\"0xc80076c6dbb35bbb5964873254984f0738e440f55af216850efee3c397642e99\",\"license\":\"MIT\"},\"contracts/feePolicies/FeePolicy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @title FeePolicy\\n * @notice An interface for Guilds to implement that will specify how fees must be paid for guild tag mints\\n */\\nabstract contract FeePolicy is ERC165 {\\n    function supportsInterface(bytes4 interfaceID) public view virtual override(ERC165) returns (bool) {\\n        return interfaceID == type(FeePolicy).interfaceId || super.supportsInterface(interfaceID);\\n    }\\n\\n    /**\\n     * @notice Returns the fee required to mint the given guild tag by the given minter\\n     * @param guildHash The ENS namehash of the guild's domain\\n     * @param tagHash The ENS namehash of the tag being claimed (e.g. keccak256('foo') for foo.my-guild.eth)\\n     * @param claimant The address attempting to claim the tag (not necessarily the address that will receive it)\\n     * @param extraClaimArgs Any additional arguments that would be passed by the minter to the claimGuildTag() function\\n     * @return tokenContract The token contract the fee must be paid in (if any). Address(0) designates native Ether.\\n     * @return fee The amount (in base unit) that must be paid\\n     * @return feePaidTo The address that should receive payment of the fee\\n     */\\n    function tagClaimFee(\\n        bytes32 guildHash,\\n        bytes32 tagHash,\\n        address claimant,\\n        bytes calldata extraClaimArgs\\n    ) external view virtual returns (address tokenContract, uint256 fee, address feePaidTo);\\n}\\n\",\"keccak256\":\"0x184912c4d1de8f141634b08ea14600cc513c451077eb94693a190521645186b9\",\"license\":\"MIT\"},\"contracts/libraries/ENSNamehash.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Source: https://github.com/JonahGroendal/ens-namehash/blob/master/contracts/ENSNamehash.sol\\n\\npragma solidity ^0.8.4;\\n\\n/*\\n * @dev Solidity implementation of the ENS namehash algorithm.\\n *\\n * Warning! Does not normalize or validate names before hashing.\\n */\\nlibrary ENSNamehash {\\n    function namehash(bytes memory domain) internal pure returns (bytes32) {\\n        return namehash(domain, 0);\\n    }\\n\\n    function namehash(bytes memory domain, uint i) internal pure returns (bytes32) {\\n        if (domain.length <= i) return 0x0000000000000000000000000000000000000000000000000000000000000000;\\n\\n        uint len = LabelLength(domain, i);\\n\\n        return keccak256(abi.encodePacked(namehash(domain, i + len + 1), keccak(domain, i, len)));\\n    }\\n\\n    function LabelLength(bytes memory domain, uint i) private pure returns (uint) {\\n        uint len;\\n        while (i + len != domain.length && domain[i + len] != 0x2e) {\\n            len++;\\n        }\\n        return len;\\n    }\\n\\n    function keccak(bytes memory data, uint offset, uint len) private pure returns (bytes32 ret) {\\n        require(offset + len <= data.length);\\n        assembly {\\n            ret := keccak256(add(add(data, 32), offset), len)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2e0ef9e175164347b4c80c0f6d2e03212cabbcae8f36e8ced03f66042aca011a\",\"license\":\"MIT\"},\"contracts/tagsAuthPolicies/ITagsAuthPolicy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title TagsAuthPolicy\\n * @notice An interface for Guilds to implement that will control authorization for minting tags within that guild\\n */\\ninterface ITagsAuthPolicy is IERC165 {\\n    /**\\n     * @notice Checks whether a certain address (claimant) may claim a given guild tag\\n     * @param guildHash The ENS namehash of the guild's domain\\n     * @param tagHash The ENS namehash of the tag being claimed (e.g. keccak256('foo') for foo.my-guild.eth)\\n     * @param claimant The address attempting to claim the tag (not necessarily the address that will receive it)\\n     * @param recipient The address that would receive the tag\\n     * @param extraClaimArgs [Optional] Any guild-specific additional arguments required\\n     */\\n    function canClaimTag(\\n        bytes32 guildHash,\\n        bytes32 tagHash,\\n        address claimant,\\n        address recipient,\\n        bytes calldata extraClaimArgs\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Called by ENSGuilds once a tag has been claimed.\\n     * Provided for auth policies to update local state, such as erasing an address from an allowlist after that\\n     * address has successfully minted a tag.\\n     * @param guildHash The ENS namehash of the guild's domain\\n     * @param tagHash The ENS namehash of the tag being claimed (e.g. keccak256('foo') for foo.my-guild.eth)\\n     * @param claimant The address that claimed the tag (not necessarily the address that received it)\\n     * @param recipient The address that received receive the tag\\n     * @param extraClaimArgs [Optional] Any guild-specific additional arguments required\\n     */\\n    function onTagClaimed(\\n        bytes32 guildHash,\\n        bytes32 tagHash,\\n        address claimant,\\n        address recipient,\\n        bytes calldata extraClaimArgs\\n    ) external returns (bytes32 tagToRevoke);\\n\\n    /**\\n     * @notice Checks whether a given guild tag is elligible to be revoked\\n     * @param revokedBy The address that would attempt to revoke it\\n     * @param guildHash The ENS namehash of the guild's domain\\n     * @param tagHash The ENS namehash of the tag being claimed (e.g. keccak256('foo') for foo.my-guild.eth)\\n     * @param extraRevokeArgs Any additional arguments necessary for assessing whether a tag may be revoked\\n     */\\n    function tagCanBeRevoked(\\n        address revokedBy,\\n        bytes32 guildHash,\\n        bytes32 tagHash,\\n        bytes calldata extraRevokeArgs\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xd38f3aa557e56bfd6b15c48e11d134123bc766ee041c59ba9fba0c1ba7b93788\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162003fbb38038062003fbb8339810160408190526200003491620000b2565b8162000040816200006d565b506001600555600680546001600160a01b0319166001600160a01b039290921691909117905550620002f5565b60026200007b828262000229565b5050565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b0381168114620000ad57600080fd5b919050565b60008060408385031215620000c657600080fd5b82516001600160401b0380821115620000de57600080fd5b818501915085601f830112620000f357600080fd5b8151818111156200010857620001086200007f565b604051601f8201601f19908116603f011681019083821181831017156200013357620001336200007f565b816040528281526020935088848487010111156200015057600080fd5b600091505b8282101562000174578482018401518183018501529083019062000155565b60008484830101528096505050506200018f81860162000095565b925050509250929050565b600181811c90821680620001af57607f821691505b602082108103620001d057634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200022457600081815260208120601f850160051c81016020861015620001ff5750805b601f850160051c820191505b8181101562000220578281556001016200020b565b5050505b505050565b81516001600160401b038111156200024557620002456200007f565b6200025d816200025684546200019a565b84620001d6565b602080601f8311600181146200029557600084156200027c5750858301515b600019600386901b1c1916600185901b17855562000220565b600085815260208120601f198616915b82811015620002c657888601518255948401946001909101908401620002a5565b5085821015620002e55787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b613cb680620003056000396000f3fe6080604052600436106102695760003560e01c80637d73b23111610153578063bb2b1e82116100cb578063e985e9c51161007f578063f1cb7e0611610064578063f1cb7e06146107ad578063f242432a146107cd578063fdfb410c146107ed57600080fd5b8063e985e9c514610751578063edc147a41461079a57600080fd5b8063d4ec5bbc116100b0578063d4ec5bbc14610677578063d919713f14610697578063defa45af1461073157600080fd5b8063bb2b1e8214610637578063cf4c5d691461065757600080fd5b80639c9925f511610122578063a062d1f711610107578063a062d1f7146105d7578063a22cb465146105f7578063a484fba61461061757600080fd5b80639c9925f5146105a45780639e5388ba146105c457600080fd5b80637d73b231146105245780637e653612146105445780638308af03146105645780638a86edba1461058457600080fd5b80633f774c4d116101e65780636913ba89116101b5578063734d33481161019a578063734d3348146104c4578063784609f8146104e4578063784beff21461050457600080fd5b80636913ba891461046e578063699f200f1461048e57600080fd5b80633f774c4d146103ee5780634e1273f41461040e578063516877f61461043b578063620440e81461045b57600080fd5b80630e89341c1161023d5780632eb2c2d6116102225780632eb2c2d61461038e578063348f18f7146103ae5780633b3b57de146103ce57600080fd5b80630e89341c1461034157806310c68cd81461036e57600080fd5b8062fdd58e1461026e57806301ffc9a7146102a1578063022c977f146102d15780630e0a51ef1461031f575b600080fd5b34801561027a57600080fd5b5061028e610289366004612cb0565b61080d565b6040519081526020015b60405180910390f35b3480156102ad57600080fd5b506102c16102bc366004612cf2565b6108b9565b6040519015158152602001610298565b3480156102dd57600080fd5b506103076102ec366004612d0f565b6000908152600760205260409020546001600160a01b031690565b6040516001600160a01b039091168152602001610298565b34801561032b57600080fd5b5061033f61033a366004612d74565b61090c565b005b34801561034d57600080fd5b5061036161035c366004612d0f565b610972565b6040516102989190612e34565b34801561037a57600080fd5b5061033f610389366004612efe565b610a4e565b34801561039a57600080fd5b5061033f6103a9366004613008565b610a6e565b3480156103ba57600080fd5b5061033f6103c93660046130b6565b610b09565b3480156103da57600080fd5b506103076103e9366004612d0f565b610b25565b3480156103fa57600080fd5b5061033f6104093660046130b6565b610b57565b34801561041a57600080fd5b5061042e610429366004613108565b610b6e565b6040516102989190613210565b34801561044757600080fd5b5061033f610456366004613265565b610cac565b61033f6104693660046132f0565b610ccd565b34801561047a57600080fd5b50610307610489366004613383565b610cf8565b34801561049a57600080fd5b506103076104a9366004612d0f565b6004602052600090815260409020546001600160a01b031681565b3480156104d057600080fd5b506103076104df3660046133dd565b610d14565b3480156104f057600080fd5b5061033f6104ff36600461340d565b610de4565b34801561051057600080fd5b5061033f61051f366004613432565b610ea3565b34801561053057600080fd5b50600654610307906001600160a01b031681565b34801561055057600080fd5b5061033f61055f366004613479565b610f8e565b34801561057057600080fd5b5061033f61057f3660046134ae565b610fa8565b34801561059057600080fd5b5061033f61059f3660046130b6565b610fbf565b3480156105b057600080fd5b5061033f6105bf3660046134f5565b610fd2565b61033f6105d236600461351a565b6110ad565b3480156105e357600080fd5b5061033f6105f2366004613573565b6115c7565b34801561060357600080fd5b5061033f6106123660046135bf565b61164b565b34801561062357600080fd5b5061033f6106323660046135ed565b611656565b34801561064357600080fd5b50610307610652366004613479565b61166e565b34801561066357600080fd5b5061033f610672366004613649565b61169a565b34801561068357600080fd5b5061033f6106923660046134f5565b6119a4565b3480156106a357600080fd5b506106f66106b2366004612d0f565b6007602052600090815260409020805460018201546002909201546001600160a01b039182169282169181169060ff600160a01b8204811691600160a81b90041685565b604080516001600160a01b0396871681529486166020860152929094169183019190915215156060820152901515608082015260a001610298565b34801561073d57600080fd5b5061033f61074c366004612d0f565b611a3a565b34801561075d57600080fd5b506102c161076c366004613671565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b61033f6107a836600461369f565b611af6565b3480156107b957600080fd5b506103616107c83660046133dd565b611b85565b3480156107d957600080fd5b5061033f6107e8366004613743565b611bc5565b3480156107f957600080fd5b5061033f6108083660046134f5565b611bde565b60006001600160a01b0383166108905760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201527f616c6964206f776e65720000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b03198216630115c55760e31b14806108de57506108de82611cb9565b806108ed57506108ed82611cf5565b806108b357506301ffc9a760e01b6001600160e01b03198316146108b3565b60005b8381101561096a576109588686868481811061092d5761092d6137ac565b90506020020135858585818110610946576109466137ac565b905060200281019061051f91906137c2565b806109628161381f565b91505061090f565b505050505050565b6001600160801b031981166000818152600360205260409020600101805460609291829181906109a190613838565b159050610a3c578080546109b490613838565b80601f01602080910402602001604051908101604052809291908181526020018280546109e090613838565b8015610a2d5780601f10610a0257610100808354040283529160200191610a2d565b820191906000526020600020905b815481529060010190602001808311610a1057829003601f168201915b50505050509350505050919050565b610a4585611d00565b95945050505050565b6000610a5985611d94565b9050610a678185858561169a565b5050505050565b6001600160a01b038516331480610a8a5750610a8a853361076c565b610afc5760405162461bcd60e51b815260206004820152602e60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206f7220617070726f7665640000000000000000000000000000000000006064820152608401610887565b610a678585858585611da1565b6000610b1483611d94565b9050610b2081836119a4565b505050565b600080610b3383603c611b85565b90508051600003610b475750600092915050565b610b5081612037565b9392505050565b6000610b6283611d94565b9050610b208183611bde565b60608151835114610be75760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d6174636800000000000000000000000000000000000000000000006064820152608401610887565b6000835167ffffffffffffffff811115610c0357610c03612e47565b604051908082528060200260200182016040528015610c2c578160200160208202803683370190505b50905060005b8451811015610ca457610c77858281518110610c5057610c506137ac565b6020026020010151858381518110610c6a57610c6a6137ac565b602002602001015161080d565b828281518110610c8957610c896137ac565b6020908102919091010152610c9d8161381f565b9050610c32565b509392505050565b6000610cb785611d94565b8451602086012090915061096a82828686610ea3565b6000610cd886611d94565b85516020870120909150610cef82828787876110ad565b50505050505050565b600080610d0484611d94565b83516020850120909150610a4582825b6000808383604051602001610d33929190918252602082015260400190565b60408051808303601f190181529082905280516020909101206006546302571be360e01b83526004830182905290925030916001600160a01b03909116906302571be390602401602060405180830381865afa158015610d97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dbb9190613872565b6001600160a01b031614610dd35760009150506108b3565b610ddc81610b25565b949350505050565b60008281526007602052604090205482906001600160a01b03163314610e1d57604051630e64a9cf60e21b815260040160405180910390fd5b600083815260076020526040908190206002018054841515600160a01b027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff9091161790555183907fcddecc2f17a0c961cfad3af69d94ee8d5ece1542dc95fd53f898ab77781272c490610e9690851515815260200190565b60405180910390a2505050565b610eab61205f565b600084815260076020526040902060028101546001600160a01b03811690600160a81b900460ff16158015610f545750604051636e083a8160e11b81526001600160a01b0382169063dc10750290610f0f9033908a908a908a908a906004016138b8565b6020604051808303816000875af1158015610f2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5291906138e7565b155b15610f725760405163645b259360e11b815260040160405180910390fd5b610f7c86866120b8565b5050610f886001600555565b50505050565b6000610f9982611d94565b9050610fa481611a3a565b5050565b6000610fb383611d94565b9050610b208183610de4565b6000610fca83611d94565b9050610b2081835b60008281526007602052604090205482906001600160a01b0316331461100b57604051630e64a9cf60e21b815260040160405180910390fd5b6110256001600160a01b038316632763ed8d60e21b6121a4565b61104d5760405163592e05dd60e11b81526001600160a01b0383166004820152602401610887565b60008381526007602090815260409182902060010180546001600160a01b0319166001600160a01b038616908117909155915191825284917fe3e6191059989ec6f70a99fca0dfbb5c0cac787bba9232a0f364180133d3e7159101610e96565b6110b561205f565b600085815260076020526040902060020154600160a01b900460ff166110ee57604051634db8e46160e01b815260040160405180910390fd5b604080516020810187905290810185905260009060600160408051808303601f190181529082905280516020909101206006546302571be360e01b8352600483018290529092506000916001600160a01b03909116906302571be390602401602060405180830381865afa15801561116a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118e9190613872565b6001600160a01b0316146111b557604051630344c41960e11b815260040160405180910390fd5b6000868152600760205260409020600201546001600160a01b03168063f02cbfbb8888338989896040518763ffffffff1660e01b81526004016111fd96959493929190613904565b6020604051808303816000875af115801561121c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124091906138e7565b61125d576040516302b7adcd60e11b815260040160405180910390fd5b600087815260076020526040812060010154819081906001600160a01b0316639c707f938b8b338b8b6040518663ffffffff1660e01b81526004016112a6959493929190613949565b606060405180830381865afa1580156112c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e79190613978565b9250925092508160001461145b576001600160a01b03831661139d57813414611323576040516320c4d7fb60e21b815260040160405180910390fd5b6000816001600160a01b03163460405160006040518083038185875af1925050503d8060008114611370576040519150601f19603f3d011682016040523d82523d6000602084013e611375565b606091505b5050905080611397576040516320c4d7fb60e21b815260040160405180910390fd5b5061145b565b6001600160a01b0383166323b872dd336040516001600160e01b031960e084901b1681526001600160a01b0391821660048201529084166024820152604481018590526064016020604051808303816000875af192505050801561141e575060408051601f3d908101601f1916820190925261141b918101906138e7565b60015b61143b576040516320c4d7fb60e21b815260040160405180910390fd5b80611459576040516320c4d7fb60e21b815260040160405180910390fd5b505b6114668a8a8a6121c0565b604051638fcae51d60e01b81526000906001600160a01b03861690638fcae51d9061149f908e908e9033908f908f908f90600401613904565b6020604051808303816000875af11580156114be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e291906139bb565b905080156114f4576114f48b826120b8565b6006546040516305ef2c7f60e41b8152600481018d9052602481018c905230604482018190526064820152600060848201526001600160a01b0390911690635ef2c7f09060a401600060405180830381600087803b15801561155557600080fd5b505af1158015611569573d6000803e3d6000fd5b50505050611577868a6122b9565b6040516001600160a01b038a1681528a908c907fe8a6fa6264fd384a35210116a2a84bba9f414551a0c0a794dacbf8092d8e99b19060200160405180910390a3505050505050610a676001600555565b60008381526007602052604090205483906001600160a01b0316331461160057604051630e64a9cf60e21b815260040160405180910390fd5b61160b848484612360565b837fcb4872a5cd0e451374911e618bccf95b2ee0f2a1d952582d1721aeff3635217d848460405161163d9291906139d4565b60405180910390a250505050565b610fa4338383612389565b600061166184611d94565b9050610f888184846115c7565b60008061167a83611d94565b6000818152600760205260409020549091506001600160a01b0316610b50565b336006546040516302571be360e01b8152600481018790526001600160a01b0392831692909116906302571be390602401602060405180830381865afa1580156116e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170c9190613872565b6001600160a01b031614611733576040516326fdee4b60e11b815260040160405180910390fd5b6000848152600760205260409020600101546001600160a01b03161561176c57604051630ea075bf60e21b815260040160405180910390fd5b6006546001600160a01b031663e985e9c5336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604401602060405180830381865afa1580156117c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ec91906138e7565b61180957604051636fd1a8ab60e01b815260040160405180910390fd5b6118236001600160a01b038316632763ed8d60e21b6121a4565b61184b5760405163592e05dd60e11b81526001600160a01b0383166004820152602401610887565b6118656001600160a01b0382166328fd8be960e21b6121a4565b61188d5760405163592e05dd60e11b81526001600160a01b0382166004820152602401610887565b6040805160a0810182526001600160a01b03808616825284811660208084019182528583168486019081526001606086018181526000608088018181528d82526007909552888120975188549088166001600160a01b0319918216178955955192880180549388169390961692909217909455905160029095018054935192511515600160a81b027fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff931515600160a01b027fffffffffffffffffffffff0000000000000000000000000000000000000000009095169690951695909517929092171691909117909155905185917f10906fae603eebfac53ddc0f103bee8a044dd7643c425c7a90f921dfa15ef62c91a250505050565b60008281526007602052604090205482906001600160a01b031633146119dd57604051630e64a9cf60e21b815260040160405180910390fd5b60008381526007602090815260409182902080546001600160a01b0319166001600160a01b038616908117909155915191825284917f44ae681d782ebebc775c8c23cc18621486d68ac94ae4a8271f59892d6c8cec239101610e96565b60008181526007602052604090205481906001600160a01b03163314611a7357604051630e64a9cf60e21b815260040160405180910390fd5b60008281526007602052604080822080546001600160a01b03199081168255600182018054909116905560020180547fffffffffffffffffffff0000000000000000000000000000000000000000000016600160a81b1790555183917fa8167a993f10ce22abac512a74e81171d978a9d52acc66d0a46d3ff05f21ca0b91a25050565b60005b85811015611b7b57611b6988888884818110611b1757611b176137ac565b90506020020135878785818110611b3057611b306137ac565b9050602002016020810190611b4591906139e8565b868686818110611b5757611b576137ac565b90506020028101906105d291906137c2565b80611b738161381f565b915050611af9565b5050505050505050565b606080603c8314611b975790506108b3565b6000848152600460205260409020546001600160a01b031680611bbc575090506108b3565b610a458161247d565b6040516338730eb560e11b815260040160405180910390fd5b60008281526007602052604090205482906001600160a01b03163314611c1757604051630e64a9cf60e21b815260040160405180910390fd5b611c316001600160a01b0383166328fd8be960e21b6121a4565b611c595760405163592e05dd60e11b81526001600160a01b0383166004820152602401610887565b60008381526007602090815260409182902060020180546001600160a01b0319166001600160a01b038616908117909155915191825284917f276dcdaae75cd5831871106265565c93b5a5ba18286a11f7f661826476a89e5d9101610e96565b60006001600160e01b03198216631d9dabef60e11b1480611cea57506001600160e01b031982166378e5bf0360e11b145b806108b357506108b3825b60006108b3826124b6565b606060028054611d0f90613838565b80601f0160208091040260200160405190810160405280929190818152602001828054611d3b90613838565b8015611d885780601f10611d5d57610100808354040283529160200191611d88565b820191906000526020600020905b815481529060010190602001808311611d6b57829003601f168201915b50505050509050919050565b60006108b3826000612505565b8151835114611e185760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060448201527f6d69736d617463680000000000000000000000000000000000000000000000006064820152608401610887565b6001600160a01b038416611e945760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610887565b3360005b8451811015611fd1576000858281518110611eb557611eb56137ac565b602002602001015190506000858381518110611ed357611ed36137ac565b602090810291909101810151600084815280835260408082206001600160a01b038e168352909352919091205490915081811015611f795760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201527f72207472616e73666572000000000000000000000000000000000000000000006064820152608401610887565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611fb6908490613a05565b9250508190555050505080611fca9061381f565b9050611e98565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051612021929190613a18565b60405180910390a461096a81878787878761257f565b6000815160141461204757600080fd5b50602001516c01000000000000000000000000900490565b6002600554036120b15760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610887565b6002600555565b60006120c48383610d14565b90506001600160a01b0381166120ed5760405163645b259360e11b815260040160405180910390fd5b6006546040516305ef2c7f60e41b815260048101859052602481018490526000604482018190526064820181905260848201526001600160a01b0390911690635ef2c7f09060a401600060405180830381600087803b15801561214f57600080fd5b505af1158015612163573d6000803e3d6000fd5b50505050612172838383612724565b604051829084907f208d25d051d04de1de9bf0b973d43dcab4e9f7aad493f0768689beace7864e1790600090a3505050565b60006121af8361275a565b8015610b505750610b50838361278d565b6001600160801b0319831660009081526003602052604090205483906fffffffffffffffffffffffffffffffff811061223b5760405162461bcd60e51b815260206004820152601460248201527f746f6b656e436f756e7465724f766572666c6f770000000000000000000000006044820152606401610887565b6001600160801b031982166000908152600360205260409020805460010190556001600160801b0319851660006122728383613a05565b90506060612283868360018461282b565b506001600160801b0319909316600090815260036020908152604080832097835260029097019052949094209190915550505050565b60008281526004602090815260409182902080546001600160a01b0319166001600160a01b038516908117909155915191825283917f52d7d861f09ab3d26239d492e8968629f95e9e318cf0b73bfddc441522a15fd2910160405180910390a2817f65412581168e88a1e60c6459d7f44ae83ad0832e670826c05a4e2476b57af752603c6123468461247d565b604051612354929190613a3d565b60405180910390a25050565b6001600160801b0319831660009081526003602052604090208390600101610a67838583613a9c565b816001600160a01b0316836001600160a01b0316036124105760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c6600000000000000000000000000000000000000000000006064820152608401610887565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6040805160148082528183019092526060916020820181803683375050506c010000000000000000000000009290920260208301525090565b60006001600160e01b03198216636cdb3d1360e11b14806108ed57506001600160e01b031982166303a24d0760e21b14806108b357506301ffc9a760e01b6001600160e01b03198316146108b3565b600081835111612517575060006108b3565b60006125238484612936565b9050612543846125338386613a05565b61253e906001613a05565b612505565b61254e8585846129b1565b6040805160208101939093528201526060016040516020818303038152906040528051906020012091505092915050565b6001600160a01b0384163b1561096a5760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906125c39089908990889088908890600401613b5c565b6020604051808303816000875af19250505080156125fe575060408051601f3d908101601f191682019092526125fb91810190613bae565b60015b6126b35761260a613bcb565b806308c379a003612643575061261e613be7565b806126295750612645565b8060405162461bcd60e51b81526004016108879190612e34565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d4552433131353560448201527f526563656976657220696d706c656d656e7465720000000000000000000000006064820152608401610887565b6001600160e01b0319811663bc197c8160e01b14610cef5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b6064820152608401610887565b6001600160801b0319831660009081526003602090815260408083208584526002019091529020548390610a67838260016129d5565b600061276d826301ffc9a760e01b61278d565b80156108b35750612786826001600160e01b031961278d565b1592915050565b604080516001600160e01b03198316602480830191909152825180830390910181526044909101909152602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166301ffc9a760e01b178152825160009392849283928392918391908a617530fa92503d91506000519050828015612814575060208210155b80156128205750600081115b979650505050505050565b6001600160a01b03841661288b5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610887565b33600061289785612b51565b905060006128a485612b51565b90506000868152602081815260408083206001600160a01b038b168452909152812080548792906128d6908490613a05565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610cef83600089898989612b9c565b6000805b83516129468285613a05565b1415801561299a57508361295a8285613a05565b8151811061296a5761296a6137ac565b6020910101517fff0000000000000000000000000000000000000000000000000000000000000016601760f91b14155b15610b5057806129a98161381f565b91505061293a565b82516000906129c08385613a05565b11156129cb57600080fd5b5091016020012090565b6001600160a01b038316612a375760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b6064820152608401610887565b336000612a4384612b51565b90506000612a5084612b51565b60408051602080820183526000918290528882528181528282206001600160a01b038b1683529052205490915084811015612ad95760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b6064820152608401610887565b6000868152602081815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4604080516020810190915260009052610cef565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110612b8b57612b8b6137ac565b602090810291909101015292915050565b6001600160a01b0384163b1561096a5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190612be09089908990889088908890600401613c71565b6020604051808303816000875af1925050508015612c1b575060408051601f3d908101601f19168201909252612c1891810190613bae565b60015b612c275761260a613bcb565b6001600160e01b0319811663f23a6e6160e01b14610cef5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b6064820152608401610887565b6001600160a01b0381168114612cad57600080fd5b50565b60008060408385031215612cc357600080fd5b8235612cce81612c98565b946020939093013593505050565b6001600160e01b031981168114612cad57600080fd5b600060208284031215612d0457600080fd5b8135610b5081612cdc565b600060208284031215612d2157600080fd5b5035919050565b60008083601f840112612d3a57600080fd5b50813567ffffffffffffffff811115612d5257600080fd5b6020830191508360208260051b8501011115612d6d57600080fd5b9250929050565b600080600080600060608688031215612d8c57600080fd5b85359450602086013567ffffffffffffffff80821115612dab57600080fd5b612db789838a01612d28565b90965094506040880135915080821115612dd057600080fd5b50612ddd88828901612d28565b969995985093965092949392505050565b6000815180845260005b81811015612e1457602081850181015186830182015201612df8565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000610b506020830184612dee565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715612e8357612e83612e47565b6040525050565b600082601f830112612e9b57600080fd5b813567ffffffffffffffff811115612eb557612eb5612e47565b604051612ecc601f8301601f191660200182612e5d565b818152846020838601011115612ee157600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215612f1457600080fd5b843567ffffffffffffffff811115612f2b57600080fd5b612f3787828801612e8a565b9450506020850135612f4881612c98565b92506040850135612f5881612c98565b91506060850135612f6881612c98565b939692955090935050565b600067ffffffffffffffff821115612f8d57612f8d612e47565b5060051b60200190565b600082601f830112612fa857600080fd5b81356020612fb582612f73565b604051612fc28282612e5d565b83815260059390931b8501820192828101915086841115612fe257600080fd5b8286015b84811015612ffd5780358352918301918301612fe6565b509695505050505050565b600080600080600060a0868803121561302057600080fd5b853561302b81612c98565b9450602086013561303b81612c98565b9350604086013567ffffffffffffffff8082111561305857600080fd5b61306489838a01612f97565b9450606088013591508082111561307a57600080fd5b61308689838a01612f97565b9350608088013591508082111561309c57600080fd5b506130a988828901612e8a565b9150509295509295909350565b600080604083850312156130c957600080fd5b823567ffffffffffffffff8111156130e057600080fd5b6130ec85828601612e8a565b92505060208301356130fd81612c98565b809150509250929050565b6000806040838503121561311b57600080fd5b823567ffffffffffffffff8082111561313357600080fd5b818501915085601f83011261314757600080fd5b8135602061315482612f73565b6040516131618282612e5d565b83815260059390931b850182019282810191508984111561318157600080fd5b948201945b838610156131a857853561319981612c98565b82529482019490820190613186565b965050860135925050808211156131be57600080fd5b506131cb85828601612f97565b9150509250929050565b600081518084526020808501945080840160005b83811015613205578151875295820195908201906001016131e9565b509495945050505050565b602081526000610b5060208301846131d5565b60008083601f84011261323557600080fd5b50813567ffffffffffffffff81111561324d57600080fd5b602083019150836020828501011115612d6d57600080fd5b6000806000806060858703121561327b57600080fd5b843567ffffffffffffffff8082111561329357600080fd5b61329f88838901612e8a565b955060208701359150808211156132b557600080fd5b6132c188838901612e8a565b945060408701359150808211156132d757600080fd5b506132e487828801613223565b95989497509550505050565b60008060008060006080868803121561330857600080fd5b853567ffffffffffffffff8082111561332057600080fd5b61332c89838a01612e8a565b9650602088013591508082111561334257600080fd5b61334e89838a01612e8a565b95506040880135915061336082612c98565b9093506060870135908082111561337657600080fd5b50612ddd88828901613223565b6000806040838503121561339657600080fd5b823567ffffffffffffffff808211156133ae57600080fd5b6133ba86838701612e8a565b935060208501359150808211156133d057600080fd5b506131cb85828601612e8a565b600080604083850312156133f057600080fd5b50508035926020909101359150565b8015158114612cad57600080fd5b6000806040838503121561342057600080fd5b8235915060208301356130fd816133ff565b6000806000806060858703121561344857600080fd5b8435935060208501359250604085013567ffffffffffffffff81111561346d57600080fd5b6132e487828801613223565b60006020828403121561348b57600080fd5b813567ffffffffffffffff8111156134a257600080fd5b610ddc84828501612e8a565b600080604083850312156134c157600080fd5b823567ffffffffffffffff8111156134d857600080fd5b6134e485828601612e8a565b92505060208301356130fd816133ff565b6000806040838503121561350857600080fd5b8235915060208301356130fd81612c98565b60008060008060006080868803121561353257600080fd5b8535945060208601359350604086013561354b81612c98565b9250606086013567ffffffffffffffff81111561356757600080fd5b612ddd88828901613223565b60008060006040848603121561358857600080fd5b83359250602084013567ffffffffffffffff8111156135a657600080fd5b6135b286828701613223565b9497909650939450505050565b600080604083850312156135d257600080fd5b82356135dd81612c98565b915060208301356130fd816133ff565b60008060006040848603121561360257600080fd5b833567ffffffffffffffff8082111561361a57600080fd5b61362687838801612e8a565b9450602086013591508082111561363c57600080fd5b506135b286828701613223565b6000806000806080858703121561365f57600080fd5b843593506020850135612f4881612c98565b6000806040838503121561368457600080fd5b823561368f81612c98565b915060208301356130fd81612c98565b60008060008060008060006080888a0312156136ba57600080fd5b87359650602088013567ffffffffffffffff808211156136d957600080fd5b6136e58b838c01612d28565b909850965060408a01359150808211156136fe57600080fd5b61370a8b838c01612d28565b909650945060608a013591508082111561372357600080fd5b506137308a828b01612d28565b989b979a50959850939692959293505050565b600080600080600060a0868803121561375b57600080fd5b853561376681612c98565b9450602086013561377681612c98565b93506040860135925060608601359150608086013567ffffffffffffffff8111156137a057600080fd5b6130a988828901612e8a565b634e487b7160e01b600052603260045260246000fd5b6000808335601e198436030181126137d957600080fd5b83018035915067ffffffffffffffff8211156137f457600080fd5b602001915036819003821315612d6d57600080fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161383157613831613809565b5060010190565b600181811c9082168061384c57607f821691505b60208210810361386c57634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561388457600080fd5b8151610b5081612c98565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b038616815284602082015283604082015260806060820152600061282060808301848661388f565b6000602082840312156138f957600080fd5b8151610b50816133ff565b86815285602082015260006001600160a01b03808716604084015280861660608401525060a0608083015261393d60a08301848661388f565b98975050505050505050565b8581528460208201526001600160a01b038416604082015260806060820152600061282060808301848661388f565b60008060006060848603121561398d57600080fd5b835161399881612c98565b6020850151604086015191945092506139b081612c98565b809150509250925092565b6000602082840312156139cd57600080fd5b5051919050565b602081526000610ddc60208301848661388f565b6000602082840312156139fa57600080fd5b8135610b5081612c98565b808201808211156108b3576108b3613809565b604081526000613a2b60408301856131d5565b8281036020840152610a4581856131d5565b828152604060208201526000610ddc6040830184612dee565b601f821115610b2057600081815260208120601f850160051c81016020861015613a7d5750805b601f850160051c820191505b8181101561096a57828155600101613a89565b67ffffffffffffffff831115613ab457613ab4612e47565b613ac883613ac28354613838565b83613a56565b6000601f841160018114613afc5760008515613ae45750838201355b600019600387901b1c1916600186901b178355610a67565b600083815260209020601f19861690835b82811015613b2d5786850135825560209485019460019092019101613b0d565b5086821015613b4a5760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b60006001600160a01b03808816835280871660208401525060a06040830152613b8860a08301866131d5565b8281036060840152613b9a81866131d5565b9050828103608084015261393d8185612dee565b600060208284031215613bc057600080fd5b8151610b5081612cdc565b600060033d1115613be45760046000803e5060005160e01c5b90565b600060443d1015613bf55790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715613c2557505050505090565b8285019150815181811115613c3d5750505050505090565b843d8701016020828501011115613c575750505050505090565b613c6660208286010187612e5d565b509095945050505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a0608083015261282060a0830184612dee56fea164736f6c6343000811000a",
  "deployedBytecode": "0x6080604052600436106102695760003560e01c80637d73b23111610153578063bb2b1e82116100cb578063e985e9c51161007f578063f1cb7e0611610064578063f1cb7e06146107ad578063f242432a146107cd578063fdfb410c146107ed57600080fd5b8063e985e9c514610751578063edc147a41461079a57600080fd5b8063d4ec5bbc116100b0578063d4ec5bbc14610677578063d919713f14610697578063defa45af1461073157600080fd5b8063bb2b1e8214610637578063cf4c5d691461065757600080fd5b80639c9925f511610122578063a062d1f711610107578063a062d1f7146105d7578063a22cb465146105f7578063a484fba61461061757600080fd5b80639c9925f5146105a45780639e5388ba146105c457600080fd5b80637d73b231146105245780637e653612146105445780638308af03146105645780638a86edba1461058457600080fd5b80633f774c4d116101e65780636913ba89116101b5578063734d33481161019a578063734d3348146104c4578063784609f8146104e4578063784beff21461050457600080fd5b80636913ba891461046e578063699f200f1461048e57600080fd5b80633f774c4d146103ee5780634e1273f41461040e578063516877f61461043b578063620440e81461045b57600080fd5b80630e89341c1161023d5780632eb2c2d6116102225780632eb2c2d61461038e578063348f18f7146103ae5780633b3b57de146103ce57600080fd5b80630e89341c1461034157806310c68cd81461036e57600080fd5b8062fdd58e1461026e57806301ffc9a7146102a1578063022c977f146102d15780630e0a51ef1461031f575b600080fd5b34801561027a57600080fd5b5061028e610289366004612cb0565b61080d565b6040519081526020015b60405180910390f35b3480156102ad57600080fd5b506102c16102bc366004612cf2565b6108b9565b6040519015158152602001610298565b3480156102dd57600080fd5b506103076102ec366004612d0f565b6000908152600760205260409020546001600160a01b031690565b6040516001600160a01b039091168152602001610298565b34801561032b57600080fd5b5061033f61033a366004612d74565b61090c565b005b34801561034d57600080fd5b5061036161035c366004612d0f565b610972565b6040516102989190612e34565b34801561037a57600080fd5b5061033f610389366004612efe565b610a4e565b34801561039a57600080fd5b5061033f6103a9366004613008565b610a6e565b3480156103ba57600080fd5b5061033f6103c93660046130b6565b610b09565b3480156103da57600080fd5b506103076103e9366004612d0f565b610b25565b3480156103fa57600080fd5b5061033f6104093660046130b6565b610b57565b34801561041a57600080fd5b5061042e610429366004613108565b610b6e565b6040516102989190613210565b34801561044757600080fd5b5061033f610456366004613265565b610cac565b61033f6104693660046132f0565b610ccd565b34801561047a57600080fd5b50610307610489366004613383565b610cf8565b34801561049a57600080fd5b506103076104a9366004612d0f565b6004602052600090815260409020546001600160a01b031681565b3480156104d057600080fd5b506103076104df3660046133dd565b610d14565b3480156104f057600080fd5b5061033f6104ff36600461340d565b610de4565b34801561051057600080fd5b5061033f61051f366004613432565b610ea3565b34801561053057600080fd5b50600654610307906001600160a01b031681565b34801561055057600080fd5b5061033f61055f366004613479565b610f8e565b34801561057057600080fd5b5061033f61057f3660046134ae565b610fa8565b34801561059057600080fd5b5061033f61059f3660046130b6565b610fbf565b3480156105b057600080fd5b5061033f6105bf3660046134f5565b610fd2565b61033f6105d236600461351a565b6110ad565b3480156105e357600080fd5b5061033f6105f2366004613573565b6115c7565b34801561060357600080fd5b5061033f6106123660046135bf565b61164b565b34801561062357600080fd5b5061033f6106323660046135ed565b611656565b34801561064357600080fd5b50610307610652366004613479565b61166e565b34801561066357600080fd5b5061033f610672366004613649565b61169a565b34801561068357600080fd5b5061033f6106923660046134f5565b6119a4565b3480156106a357600080fd5b506106f66106b2366004612d0f565b6007602052600090815260409020805460018201546002909201546001600160a01b039182169282169181169060ff600160a01b8204811691600160a81b90041685565b604080516001600160a01b0396871681529486166020860152929094169183019190915215156060820152901515608082015260a001610298565b34801561073d57600080fd5b5061033f61074c366004612d0f565b611a3a565b34801561075d57600080fd5b506102c161076c366004613671565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b61033f6107a836600461369f565b611af6565b3480156107b957600080fd5b506103616107c83660046133dd565b611b85565b3480156107d957600080fd5b5061033f6107e8366004613743565b611bc5565b3480156107f957600080fd5b5061033f6108083660046134f5565b611bde565b60006001600160a01b0383166108905760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201527f616c6964206f776e65720000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b03198216630115c55760e31b14806108de57506108de82611cb9565b806108ed57506108ed82611cf5565b806108b357506301ffc9a760e01b6001600160e01b03198316146108b3565b60005b8381101561096a576109588686868481811061092d5761092d6137ac565b90506020020135858585818110610946576109466137ac565b905060200281019061051f91906137c2565b806109628161381f565b91505061090f565b505050505050565b6001600160801b031981166000818152600360205260409020600101805460609291829181906109a190613838565b159050610a3c578080546109b490613838565b80601f01602080910402602001604051908101604052809291908181526020018280546109e090613838565b8015610a2d5780601f10610a0257610100808354040283529160200191610a2d565b820191906000526020600020905b815481529060010190602001808311610a1057829003601f168201915b50505050509350505050919050565b610a4585611d00565b95945050505050565b6000610a5985611d94565b9050610a678185858561169a565b5050505050565b6001600160a01b038516331480610a8a5750610a8a853361076c565b610afc5760405162461bcd60e51b815260206004820152602e60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206f7220617070726f7665640000000000000000000000000000000000006064820152608401610887565b610a678585858585611da1565b6000610b1483611d94565b9050610b2081836119a4565b505050565b600080610b3383603c611b85565b90508051600003610b475750600092915050565b610b5081612037565b9392505050565b6000610b6283611d94565b9050610b208183611bde565b60608151835114610be75760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d6174636800000000000000000000000000000000000000000000006064820152608401610887565b6000835167ffffffffffffffff811115610c0357610c03612e47565b604051908082528060200260200182016040528015610c2c578160200160208202803683370190505b50905060005b8451811015610ca457610c77858281518110610c5057610c506137ac565b6020026020010151858381518110610c6a57610c6a6137ac565b602002602001015161080d565b828281518110610c8957610c896137ac565b6020908102919091010152610c9d8161381f565b9050610c32565b509392505050565b6000610cb785611d94565b8451602086012090915061096a82828686610ea3565b6000610cd886611d94565b85516020870120909150610cef82828787876110ad565b50505050505050565b600080610d0484611d94565b83516020850120909150610a4582825b6000808383604051602001610d33929190918252602082015260400190565b60408051808303601f190181529082905280516020909101206006546302571be360e01b83526004830182905290925030916001600160a01b03909116906302571be390602401602060405180830381865afa158015610d97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dbb9190613872565b6001600160a01b031614610dd35760009150506108b3565b610ddc81610b25565b949350505050565b60008281526007602052604090205482906001600160a01b03163314610e1d57604051630e64a9cf60e21b815260040160405180910390fd5b600083815260076020526040908190206002018054841515600160a01b027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff9091161790555183907fcddecc2f17a0c961cfad3af69d94ee8d5ece1542dc95fd53f898ab77781272c490610e9690851515815260200190565b60405180910390a2505050565b610eab61205f565b600084815260076020526040902060028101546001600160a01b03811690600160a81b900460ff16158015610f545750604051636e083a8160e11b81526001600160a01b0382169063dc10750290610f0f9033908a908a908a908a906004016138b8565b6020604051808303816000875af1158015610f2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5291906138e7565b155b15610f725760405163645b259360e11b815260040160405180910390fd5b610f7c86866120b8565b5050610f886001600555565b50505050565b6000610f9982611d94565b9050610fa481611a3a565b5050565b6000610fb383611d94565b9050610b208183610de4565b6000610fca83611d94565b9050610b2081835b60008281526007602052604090205482906001600160a01b0316331461100b57604051630e64a9cf60e21b815260040160405180910390fd5b6110256001600160a01b038316632763ed8d60e21b6121a4565b61104d5760405163592e05dd60e11b81526001600160a01b0383166004820152602401610887565b60008381526007602090815260409182902060010180546001600160a01b0319166001600160a01b038616908117909155915191825284917fe3e6191059989ec6f70a99fca0dfbb5c0cac787bba9232a0f364180133d3e7159101610e96565b6110b561205f565b600085815260076020526040902060020154600160a01b900460ff166110ee57604051634db8e46160e01b815260040160405180910390fd5b604080516020810187905290810185905260009060600160408051808303601f190181529082905280516020909101206006546302571be360e01b8352600483018290529092506000916001600160a01b03909116906302571be390602401602060405180830381865afa15801561116a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118e9190613872565b6001600160a01b0316146111b557604051630344c41960e11b815260040160405180910390fd5b6000868152600760205260409020600201546001600160a01b03168063f02cbfbb8888338989896040518763ffffffff1660e01b81526004016111fd96959493929190613904565b6020604051808303816000875af115801561121c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124091906138e7565b61125d576040516302b7adcd60e11b815260040160405180910390fd5b600087815260076020526040812060010154819081906001600160a01b0316639c707f938b8b338b8b6040518663ffffffff1660e01b81526004016112a6959493929190613949565b606060405180830381865afa1580156112c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e79190613978565b9250925092508160001461145b576001600160a01b03831661139d57813414611323576040516320c4d7fb60e21b815260040160405180910390fd5b6000816001600160a01b03163460405160006040518083038185875af1925050503d8060008114611370576040519150601f19603f3d011682016040523d82523d6000602084013e611375565b606091505b5050905080611397576040516320c4d7fb60e21b815260040160405180910390fd5b5061145b565b6001600160a01b0383166323b872dd336040516001600160e01b031960e084901b1681526001600160a01b0391821660048201529084166024820152604481018590526064016020604051808303816000875af192505050801561141e575060408051601f3d908101601f1916820190925261141b918101906138e7565b60015b61143b576040516320c4d7fb60e21b815260040160405180910390fd5b80611459576040516320c4d7fb60e21b815260040160405180910390fd5b505b6114668a8a8a6121c0565b604051638fcae51d60e01b81526000906001600160a01b03861690638fcae51d9061149f908e908e9033908f908f908f90600401613904565b6020604051808303816000875af11580156114be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e291906139bb565b905080156114f4576114f48b826120b8565b6006546040516305ef2c7f60e41b8152600481018d9052602481018c905230604482018190526064820152600060848201526001600160a01b0390911690635ef2c7f09060a401600060405180830381600087803b15801561155557600080fd5b505af1158015611569573d6000803e3d6000fd5b50505050611577868a6122b9565b6040516001600160a01b038a1681528a908c907fe8a6fa6264fd384a35210116a2a84bba9f414551a0c0a794dacbf8092d8e99b19060200160405180910390a3505050505050610a676001600555565b60008381526007602052604090205483906001600160a01b0316331461160057604051630e64a9cf60e21b815260040160405180910390fd5b61160b848484612360565b837fcb4872a5cd0e451374911e618bccf95b2ee0f2a1d952582d1721aeff3635217d848460405161163d9291906139d4565b60405180910390a250505050565b610fa4338383612389565b600061166184611d94565b9050610f888184846115c7565b60008061167a83611d94565b6000818152600760205260409020549091506001600160a01b0316610b50565b336006546040516302571be360e01b8152600481018790526001600160a01b0392831692909116906302571be390602401602060405180830381865afa1580156116e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170c9190613872565b6001600160a01b031614611733576040516326fdee4b60e11b815260040160405180910390fd5b6000848152600760205260409020600101546001600160a01b03161561176c57604051630ea075bf60e21b815260040160405180910390fd5b6006546001600160a01b031663e985e9c5336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604401602060405180830381865afa1580156117c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ec91906138e7565b61180957604051636fd1a8ab60e01b815260040160405180910390fd5b6118236001600160a01b038316632763ed8d60e21b6121a4565b61184b5760405163592e05dd60e11b81526001600160a01b0383166004820152602401610887565b6118656001600160a01b0382166328fd8be960e21b6121a4565b61188d5760405163592e05dd60e11b81526001600160a01b0382166004820152602401610887565b6040805160a0810182526001600160a01b03808616825284811660208084019182528583168486019081526001606086018181526000608088018181528d82526007909552888120975188549088166001600160a01b0319918216178955955192880180549388169390961692909217909455905160029095018054935192511515600160a81b027fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff931515600160a01b027fffffffffffffffffffffff0000000000000000000000000000000000000000009095169690951695909517929092171691909117909155905185917f10906fae603eebfac53ddc0f103bee8a044dd7643c425c7a90f921dfa15ef62c91a250505050565b60008281526007602052604090205482906001600160a01b031633146119dd57604051630e64a9cf60e21b815260040160405180910390fd5b60008381526007602090815260409182902080546001600160a01b0319166001600160a01b038616908117909155915191825284917f44ae681d782ebebc775c8c23cc18621486d68ac94ae4a8271f59892d6c8cec239101610e96565b60008181526007602052604090205481906001600160a01b03163314611a7357604051630e64a9cf60e21b815260040160405180910390fd5b60008281526007602052604080822080546001600160a01b03199081168255600182018054909116905560020180547fffffffffffffffffffff0000000000000000000000000000000000000000000016600160a81b1790555183917fa8167a993f10ce22abac512a74e81171d978a9d52acc66d0a46d3ff05f21ca0b91a25050565b60005b85811015611b7b57611b6988888884818110611b1757611b176137ac565b90506020020135878785818110611b3057611b306137ac565b9050602002016020810190611b4591906139e8565b868686818110611b5757611b576137ac565b90506020028101906105d291906137c2565b80611b738161381f565b915050611af9565b5050505050505050565b606080603c8314611b975790506108b3565b6000848152600460205260409020546001600160a01b031680611bbc575090506108b3565b610a458161247d565b6040516338730eb560e11b815260040160405180910390fd5b60008281526007602052604090205482906001600160a01b03163314611c1757604051630e64a9cf60e21b815260040160405180910390fd5b611c316001600160a01b0383166328fd8be960e21b6121a4565b611c595760405163592e05dd60e11b81526001600160a01b0383166004820152602401610887565b60008381526007602090815260409182902060020180546001600160a01b0319166001600160a01b038616908117909155915191825284917f276dcdaae75cd5831871106265565c93b5a5ba18286a11f7f661826476a89e5d9101610e96565b60006001600160e01b03198216631d9dabef60e11b1480611cea57506001600160e01b031982166378e5bf0360e11b145b806108b357506108b3825b60006108b3826124b6565b606060028054611d0f90613838565b80601f0160208091040260200160405190810160405280929190818152602001828054611d3b90613838565b8015611d885780601f10611d5d57610100808354040283529160200191611d88565b820191906000526020600020905b815481529060010190602001808311611d6b57829003601f168201915b50505050509050919050565b60006108b3826000612505565b8151835114611e185760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060448201527f6d69736d617463680000000000000000000000000000000000000000000000006064820152608401610887565b6001600160a01b038416611e945760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610887565b3360005b8451811015611fd1576000858281518110611eb557611eb56137ac565b602002602001015190506000858381518110611ed357611ed36137ac565b602090810291909101810151600084815280835260408082206001600160a01b038e168352909352919091205490915081811015611f795760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201527f72207472616e73666572000000000000000000000000000000000000000000006064820152608401610887565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611fb6908490613a05565b9250508190555050505080611fca9061381f565b9050611e98565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051612021929190613a18565b60405180910390a461096a81878787878761257f565b6000815160141461204757600080fd5b50602001516c01000000000000000000000000900490565b6002600554036120b15760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610887565b6002600555565b60006120c48383610d14565b90506001600160a01b0381166120ed5760405163645b259360e11b815260040160405180910390fd5b6006546040516305ef2c7f60e41b815260048101859052602481018490526000604482018190526064820181905260848201526001600160a01b0390911690635ef2c7f09060a401600060405180830381600087803b15801561214f57600080fd5b505af1158015612163573d6000803e3d6000fd5b50505050612172838383612724565b604051829084907f208d25d051d04de1de9bf0b973d43dcab4e9f7aad493f0768689beace7864e1790600090a3505050565b60006121af8361275a565b8015610b505750610b50838361278d565b6001600160801b0319831660009081526003602052604090205483906fffffffffffffffffffffffffffffffff811061223b5760405162461bcd60e51b815260206004820152601460248201527f746f6b656e436f756e7465724f766572666c6f770000000000000000000000006044820152606401610887565b6001600160801b031982166000908152600360205260409020805460010190556001600160801b0319851660006122728383613a05565b90506060612283868360018461282b565b506001600160801b0319909316600090815260036020908152604080832097835260029097019052949094209190915550505050565b60008281526004602090815260409182902080546001600160a01b0319166001600160a01b038516908117909155915191825283917f52d7d861f09ab3d26239d492e8968629f95e9e318cf0b73bfddc441522a15fd2910160405180910390a2817f65412581168e88a1e60c6459d7f44ae83ad0832e670826c05a4e2476b57af752603c6123468461247d565b604051612354929190613a3d565b60405180910390a25050565b6001600160801b0319831660009081526003602052604090208390600101610a67838583613a9c565b816001600160a01b0316836001600160a01b0316036124105760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c6600000000000000000000000000000000000000000000006064820152608401610887565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6040805160148082528183019092526060916020820181803683375050506c010000000000000000000000009290920260208301525090565b60006001600160e01b03198216636cdb3d1360e11b14806108ed57506001600160e01b031982166303a24d0760e21b14806108b357506301ffc9a760e01b6001600160e01b03198316146108b3565b600081835111612517575060006108b3565b60006125238484612936565b9050612543846125338386613a05565b61253e906001613a05565b612505565b61254e8585846129b1565b6040805160208101939093528201526060016040516020818303038152906040528051906020012091505092915050565b6001600160a01b0384163b1561096a5760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906125c39089908990889088908890600401613b5c565b6020604051808303816000875af19250505080156125fe575060408051601f3d908101601f191682019092526125fb91810190613bae565b60015b6126b35761260a613bcb565b806308c379a003612643575061261e613be7565b806126295750612645565b8060405162461bcd60e51b81526004016108879190612e34565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d4552433131353560448201527f526563656976657220696d706c656d656e7465720000000000000000000000006064820152608401610887565b6001600160e01b0319811663bc197c8160e01b14610cef5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b6064820152608401610887565b6001600160801b0319831660009081526003602090815260408083208584526002019091529020548390610a67838260016129d5565b600061276d826301ffc9a760e01b61278d565b80156108b35750612786826001600160e01b031961278d565b1592915050565b604080516001600160e01b03198316602480830191909152825180830390910181526044909101909152602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166301ffc9a760e01b178152825160009392849283928392918391908a617530fa92503d91506000519050828015612814575060208210155b80156128205750600081115b979650505050505050565b6001600160a01b03841661288b5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610887565b33600061289785612b51565b905060006128a485612b51565b90506000868152602081815260408083206001600160a01b038b168452909152812080548792906128d6908490613a05565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610cef83600089898989612b9c565b6000805b83516129468285613a05565b1415801561299a57508361295a8285613a05565b8151811061296a5761296a6137ac565b6020910101517fff0000000000000000000000000000000000000000000000000000000000000016601760f91b14155b15610b5057806129a98161381f565b91505061293a565b82516000906129c08385613a05565b11156129cb57600080fd5b5091016020012090565b6001600160a01b038316612a375760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b6064820152608401610887565b336000612a4384612b51565b90506000612a5084612b51565b60408051602080820183526000918290528882528181528282206001600160a01b038b1683529052205490915084811015612ad95760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b6064820152608401610887565b6000868152602081815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4604080516020810190915260009052610cef565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110612b8b57612b8b6137ac565b602090810291909101015292915050565b6001600160a01b0384163b1561096a5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190612be09089908990889088908890600401613c71565b6020604051808303816000875af1925050508015612c1b575060408051601f3d908101601f19168201909252612c1891810190613bae565b60015b612c275761260a613bcb565b6001600160e01b0319811663f23a6e6160e01b14610cef5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b6064820152608401610887565b6001600160a01b0381168114612cad57600080fd5b50565b60008060408385031215612cc357600080fd5b8235612cce81612c98565b946020939093013593505050565b6001600160e01b031981168114612cad57600080fd5b600060208284031215612d0457600080fd5b8135610b5081612cdc565b600060208284031215612d2157600080fd5b5035919050565b60008083601f840112612d3a57600080fd5b50813567ffffffffffffffff811115612d5257600080fd5b6020830191508360208260051b8501011115612d6d57600080fd5b9250929050565b600080600080600060608688031215612d8c57600080fd5b85359450602086013567ffffffffffffffff80821115612dab57600080fd5b612db789838a01612d28565b90965094506040880135915080821115612dd057600080fd5b50612ddd88828901612d28565b969995985093965092949392505050565b6000815180845260005b81811015612e1457602081850181015186830182015201612df8565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000610b506020830184612dee565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715612e8357612e83612e47565b6040525050565b600082601f830112612e9b57600080fd5b813567ffffffffffffffff811115612eb557612eb5612e47565b604051612ecc601f8301601f191660200182612e5d565b818152846020838601011115612ee157600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215612f1457600080fd5b843567ffffffffffffffff811115612f2b57600080fd5b612f3787828801612e8a565b9450506020850135612f4881612c98565b92506040850135612f5881612c98565b91506060850135612f6881612c98565b939692955090935050565b600067ffffffffffffffff821115612f8d57612f8d612e47565b5060051b60200190565b600082601f830112612fa857600080fd5b81356020612fb582612f73565b604051612fc28282612e5d565b83815260059390931b8501820192828101915086841115612fe257600080fd5b8286015b84811015612ffd5780358352918301918301612fe6565b509695505050505050565b600080600080600060a0868803121561302057600080fd5b853561302b81612c98565b9450602086013561303b81612c98565b9350604086013567ffffffffffffffff8082111561305857600080fd5b61306489838a01612f97565b9450606088013591508082111561307a57600080fd5b61308689838a01612f97565b9350608088013591508082111561309c57600080fd5b506130a988828901612e8a565b9150509295509295909350565b600080604083850312156130c957600080fd5b823567ffffffffffffffff8111156130e057600080fd5b6130ec85828601612e8a565b92505060208301356130fd81612c98565b809150509250929050565b6000806040838503121561311b57600080fd5b823567ffffffffffffffff8082111561313357600080fd5b818501915085601f83011261314757600080fd5b8135602061315482612f73565b6040516131618282612e5d565b83815260059390931b850182019282810191508984111561318157600080fd5b948201945b838610156131a857853561319981612c98565b82529482019490820190613186565b965050860135925050808211156131be57600080fd5b506131cb85828601612f97565b9150509250929050565b600081518084526020808501945080840160005b83811015613205578151875295820195908201906001016131e9565b509495945050505050565b602081526000610b5060208301846131d5565b60008083601f84011261323557600080fd5b50813567ffffffffffffffff81111561324d57600080fd5b602083019150836020828501011115612d6d57600080fd5b6000806000806060858703121561327b57600080fd5b843567ffffffffffffffff8082111561329357600080fd5b61329f88838901612e8a565b955060208701359150808211156132b557600080fd5b6132c188838901612e8a565b945060408701359150808211156132d757600080fd5b506132e487828801613223565b95989497509550505050565b60008060008060006080868803121561330857600080fd5b853567ffffffffffffffff8082111561332057600080fd5b61332c89838a01612e8a565b9650602088013591508082111561334257600080fd5b61334e89838a01612e8a565b95506040880135915061336082612c98565b9093506060870135908082111561337657600080fd5b50612ddd88828901613223565b6000806040838503121561339657600080fd5b823567ffffffffffffffff808211156133ae57600080fd5b6133ba86838701612e8a565b935060208501359150808211156133d057600080fd5b506131cb85828601612e8a565b600080604083850312156133f057600080fd5b50508035926020909101359150565b8015158114612cad57600080fd5b6000806040838503121561342057600080fd5b8235915060208301356130fd816133ff565b6000806000806060858703121561344857600080fd5b8435935060208501359250604085013567ffffffffffffffff81111561346d57600080fd5b6132e487828801613223565b60006020828403121561348b57600080fd5b813567ffffffffffffffff8111156134a257600080fd5b610ddc84828501612e8a565b600080604083850312156134c157600080fd5b823567ffffffffffffffff8111156134d857600080fd5b6134e485828601612e8a565b92505060208301356130fd816133ff565b6000806040838503121561350857600080fd5b8235915060208301356130fd81612c98565b60008060008060006080868803121561353257600080fd5b8535945060208601359350604086013561354b81612c98565b9250606086013567ffffffffffffffff81111561356757600080fd5b612ddd88828901613223565b60008060006040848603121561358857600080fd5b83359250602084013567ffffffffffffffff8111156135a657600080fd5b6135b286828701613223565b9497909650939450505050565b600080604083850312156135d257600080fd5b82356135dd81612c98565b915060208301356130fd816133ff565b60008060006040848603121561360257600080fd5b833567ffffffffffffffff8082111561361a57600080fd5b61362687838801612e8a565b9450602086013591508082111561363c57600080fd5b506135b286828701613223565b6000806000806080858703121561365f57600080fd5b843593506020850135612f4881612c98565b6000806040838503121561368457600080fd5b823561368f81612c98565b915060208301356130fd81612c98565b60008060008060008060006080888a0312156136ba57600080fd5b87359650602088013567ffffffffffffffff808211156136d957600080fd5b6136e58b838c01612d28565b909850965060408a01359150808211156136fe57600080fd5b61370a8b838c01612d28565b909650945060608a013591508082111561372357600080fd5b506137308a828b01612d28565b989b979a50959850939692959293505050565b600080600080600060a0868803121561375b57600080fd5b853561376681612c98565b9450602086013561377681612c98565b93506040860135925060608601359150608086013567ffffffffffffffff8111156137a057600080fd5b6130a988828901612e8a565b634e487b7160e01b600052603260045260246000fd5b6000808335601e198436030181126137d957600080fd5b83018035915067ffffffffffffffff8211156137f457600080fd5b602001915036819003821315612d6d57600080fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161383157613831613809565b5060010190565b600181811c9082168061384c57607f821691505b60208210810361386c57634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561388457600080fd5b8151610b5081612c98565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b038616815284602082015283604082015260806060820152600061282060808301848661388f565b6000602082840312156138f957600080fd5b8151610b50816133ff565b86815285602082015260006001600160a01b03808716604084015280861660608401525060a0608083015261393d60a08301848661388f565b98975050505050505050565b8581528460208201526001600160a01b038416604082015260806060820152600061282060808301848661388f565b60008060006060848603121561398d57600080fd5b835161399881612c98565b6020850151604086015191945092506139b081612c98565b809150509250925092565b6000602082840312156139cd57600080fd5b5051919050565b602081526000610ddc60208301848661388f565b6000602082840312156139fa57600080fd5b8135610b5081612c98565b808201808211156108b3576108b3613809565b604081526000613a2b60408301856131d5565b8281036020840152610a4581856131d5565b828152604060208201526000610ddc6040830184612dee565b601f821115610b2057600081815260208120601f850160051c81016020861015613a7d5750805b601f850160051c820191505b8181101561096a57828155600101613a89565b67ffffffffffffffff831115613ab457613ab4612e47565b613ac883613ac28354613838565b83613a56565b6000601f841160018114613afc5760008515613ae45750838201355b600019600387901b1c1916600186901b178355610a67565b600083815260209020601f19861690835b82811015613b2d5786850135825560209485019460019092019101613b0d565b5086821015613b4a5760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b60006001600160a01b03808816835280871660208401525060a06040830152613b8860a08301866131d5565b8281036060840152613b9a81866131d5565b9050828103608084015261393d8185612dee565b600060208284031215613bc057600080fd5b8151610b5081612cdc565b600060033d1115613be45760046000803e5060005160e01c5b90565b600060443d1015613bf55790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715613c2557505050505090565b8285019150815181811115613c3d5750505050505090565b843d8701016020828501011115613c575750505050505090565b613c6660208286010187612e5d565b509095945050505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a0608083015261282060a0830184612dee56fea164736f6c6343000811000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addr(bytes32)": {
        "params": {
          "node": "The ENS node to query."
        },
        "returns": {
          "_0": "The associated address."
        }
      },
      "addr(bytes32,uint256)": {
        "params": {
          "coinType": "The coin type",
          "node": "The ENS node to query."
        },
        "returns": {
          "_0": "The associated address."
        }
      },
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "claimGuildTag(bytes32,bytes32,address,bytes)": {
        "params": {
          "extraClaimArgs": "[Optional] Any additional arguments necessary for guild-specific logic,  such as authorization",
          "guildHash": "The namehash of the guild for which the tag should be claimed (e.g. namehash('my-guild.eth'))",
          "recipient": "The address that will receive this guild tag (usually same as the caller)",
          "tagHash": "The ENS namehash of the tag being claimed (e.g. keccak256('foo') for foo.my-guild.eth)"
        }
      },
      "claimGuildTag(string,string,address,bytes)": {
        "params": {
          "extraClaimArgs": "[Optional] Any additional arguments necessary for guild-specific logic,  such as authorization",
          "guildEnsName": "The guild's full domain name (e.g. 'my-guild.eth')",
          "recipient": "The address that will receive this guild tag (usually same as the caller)",
          "tag": "The tag to claim (e.g. 'foobar')"
        }
      },
      "claimGuildTagsBatch(bytes32,bytes32[],address[],bytes[])": {
        "params": {
          "extraClaimArgs": "Per-tag extra arguments required for guild-specific logic, such as authorization. Must have same length as array of tagHashes, even if each array element is itself empty bytes",
          "guildHash": "The ENS namehash of the guild's domain",
          "recipients": "Recipients of each tag to be claimed",
          "tagHashes": "Namehashes of each tag to be claimed"
        }
      },
      "deregisterGuild(bytes32)": {
        "params": {
          "guildHash": "The ENS namehash of the guild's domain"
        }
      },
      "deregisterGuild(string)": {
        "params": {
          "guildEnsName": "The guild's full domain name (e.g. 'my-guild.eth')"
        }
      },
      "guildAdmin(bytes32)": {
        "params": {
          "guildHash": "The ENS namehash of the guild's domain"
        }
      },
      "guildAdmin(string)": {
        "params": {
          "guildEnsName": "The guild's full domain name (e.g. 'my-guild.eth')"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "registerGuild(bytes32,address,address,address)": {
        "params": {
          "feePolicy": "The address of an implementation of FeePolicy to use for minting new tags within this guild",
          "guildAdmin": "The address that will administrate this guild",
          "guildHash": "The ENS namehash of the guild's domain",
          "tagsAuthPolicy": "The address of an implementaition of TagsAuthPolicy to use for minting new tags within this guild"
        }
      },
      "registerGuild(string,address,address,address)": {
        "params": {
          "admin": "The address that will administrate this guild",
          "ensName": "The guild's full domain name (e.g. 'my-guild.eth')",
          "feePolicy": "The address of an implementation of FeePolicy to use for minting new tags within this guild",
          "tagsAuthPolicy": "The address of an implementaition of TagsAuthPolicy to use for minting new tags within this guild"
        }
      },
      "revokeGuildTag(bytes32,bytes32,bytes)": {
        "params": {
          "extraData": "[Optional] Any additional arguments necessary for assessing whether a tag may be revoked",
          "guildHash": "The ENS namehash of the guild's domain",
          "tagHash": "The ENS namehash of the tag (e.g. keccak256('foo') for foo.my-guild.eth)"
        }
      },
      "revokeGuildTag(string,string,bytes)": {
        "params": {
          "extraData": "[Optional] Any additional arguments necessary for assessing whether a tag may be revoked",
          "guildEnsName": "The guild's full domain name (e.g. 'my-guild.eth')",
          "tag": "The tag to revoke (e.g. 'foobar')"
        }
      },
      "revokeGuildTagsBatch(bytes32,bytes32[],bytes[])": {
        "params": {
          "extraData": "Additional arguments necessary for assessing whether a tag may be revoked",
          "guildHash": "The ENS namehash of the guild's domain",
          "tagHashes": "ENS namehashes of all tags to revoke"
        }
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "ENSGuilds NFTs are non-transferrable and may only be directly minted and burned with their corresonding guild tags."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "setGuildActive(bytes32,bool)": {
        "params": {
          "active": "The new status",
          "guildHash": "The ENS namehash of the guild's domain"
        }
      },
      "setGuildActive(string,bool)": {
        "params": {
          "active": "The new status",
          "guildEnsName": "The guild's full domain name (e.g. 'my-guild.eth')"
        }
      },
      "setGuildTokenUriTemplate(bytes32,string)": {
        "params": {
          "guildHash": "The ENS namehash of the guild's domain",
          "uriTemplate": "The ERC1155 metadata URL template"
        }
      },
      "setGuildTokenUriTemplate(string,string)": {
        "params": {
          "guildEnsName": "The guild's full domain name (e.g. 'my-guild.eth')",
          "uriTemplate": "The ERC1155 metadata URL template"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "tagOwner(bytes32,bytes32)": {
        "params": {
          "guildHash": "The ENS namehash of the guild's domain",
          "tagHash": "The ENS namehash of the tag (e.g. keccak256('foo') for foo.my-guild.eth)"
        }
      },
      "tagOwner(string,string)": {
        "params": {
          "guildEnsName": "The guild's full domain name (e.g. 'my-guild.eth')",
          "tag": "The tag (e.g. 'foobar')"
        }
      },
      "transferGuildAdmin(bytes32,address)": {
        "params": {
          "guildHash": "The ENS namehash of the guild's domain",
          "newAdmin": "The new admin"
        }
      },
      "transferGuildAdmin(string,address)": {
        "params": {
          "guildEnsName": "The guild's full domain name (e.g. 'my-guild.eth')",
          "newAdmin": "The new admin"
        }
      },
      "updateGuildFeePolicy(bytes32,address)": {
        "params": {
          "feePolicy": "The address of an implementation of FeePolicy to use for minting new tags within this guild",
          "guildHash": "The ENS namehash of the guild's domain"
        }
      },
      "updateGuildFeePolicy(string,address)": {
        "params": {
          "feePolicy": "The address of an implementation of FeePolicy to use for minting new tags within this guild",
          "guildEnsName": "The guild's full domain name (e.g. 'my-guild.eth')"
        }
      },
      "updateGuildTagsAuthPolicy(bytes32,address)": {
        "params": {
          "guildHash": "The ENS namehash of the guild's domain",
          "tagsAuthPolicy": "The address of an implementaition of TagsAuthPolicy to use for minting new tags within this guild"
        }
      },
      "updateGuildTagsAuthPolicy(string,address)": {
        "params": {
          "guildEnsName": "The guild's full domain name (e.g. 'my-guild.eth')",
          "tagsAuthPolicy": "The address of an implementaition of TagsAuthPolicy to use for minting new tags within this guild"
        }
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}.",
        "params": {
          "tokenId": "The token whose URI is returned"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "AlreadyRegistered()": [
        {
          "notice": "Errors "
        }
      ]
    },
    "events": {
      "Registered(bytes32)": {
        "notice": "Events "
      }
    },
    "kind": "user",
    "methods": {
      "addr(bytes32)": {
        "notice": "Returns the address associated with an ENS node."
      },
      "addr(bytes32,uint256)": {
        "notice": "Returns the address associated with an ENS node."
      },
      "claimGuildTag(bytes32,bytes32,address,bytes)": {
        "notice": "Claims a guild tag"
      },
      "claimGuildTag(string,string,address,bytes)": {
        "notice": "Claims a guild tag"
      },
      "claimGuildTagsBatch(bytes32,bytes32[],address[],bytes[])": {
        "notice": "Claims multiple tags for a guild at once"
      },
      "deregisterGuild(bytes32)": {
        "notice": "Deregisters a registered guild. Designates guild as inactive and marks all tags previously minted for that guild as eligible for revocation."
      },
      "deregisterGuild(string)": {
        "notice": "Deregisters a registered guild. Designates guild as inactive and marks all tags previously minted for that guild as eligible for revocation."
      },
      "ensRegistry()": {
        "notice": "State "
      },
      "guildAdmin(bytes32)": {
        "notice": "Returns the current admin registered for the given guild."
      },
      "guildAdmin(string)": {
        "notice": "Returns the current admin registered for the given guild."
      },
      "registerGuild(bytes32,address,address,address)": {
        "notice": "Registers a new guild from an existing ENS domain. Caller must be the ENS node's owner and ENSGuilds must have been designated an \"operator\" for the caller."
      },
      "registerGuild(string,address,address,address)": {
        "notice": "Registers a new guild from an existing ENS domain. Caller must be the ENS node's owner and ENSGuilds must have been designated an \"operator\" for the caller."
      },
      "revokeGuildTag(bytes32,bytes32,bytes)": {
        "notice": "Attempts to revoke an existing guild tag, if authorized by the guild's AuthPolicy. Deregistered guilds will bypass auth checks for revocation of all tags."
      },
      "revokeGuildTag(string,string,bytes)": {
        "notice": "Attempts to revoke an existing guild tag, if authorized by the guild's AuthPolicy. Deregistered guilds will bypass auth checks for revocation of all tags."
      },
      "revokeGuildTagsBatch(bytes32,bytes32[],bytes[])": {
        "notice": "Attempts to revoke multiple guild tags"
      },
      "setGuildActive(bytes32,bool)": {
        "notice": "Sets a guild as active or inactive. May only be called by the guild's registered admin."
      },
      "setGuildActive(string,bool)": {
        "notice": "Sets a guild as active or inactive. May only be called by the guild's registered admin."
      },
      "setGuildTokenUriTemplate(bytes32,string)": {
        "notice": "Sets the metadata URI template string for fetching metadata for a guild's tag NFTs. May only be called by the guild's registered admin."
      },
      "setGuildTokenUriTemplate(string,string)": {
        "notice": "Sets the metadata URI template string for fetching metadata for a guild's tag NFTs. May only be called by the guild's registered admin."
      },
      "tagOwner(bytes32,bytes32)": {
        "notice": "Returns the current owner of the given guild tag. Returns address(0) if no such guild or tag exists, or if the guild has been deregistered."
      },
      "tagOwner(string,string)": {
        "notice": "Returns the current owner of the given guild tag. Returns address(0) if no such guild or tag exists, or if the guild has been deregistered."
      },
      "transferGuildAdmin(bytes32,address)": {
        "notice": "Transfers the role of guild admin to the given address. May only be called by the guild's registered admin."
      },
      "transferGuildAdmin(string,address)": {
        "notice": "Transfers the role of guild admin to the given address. May only be called by the guild's registered admin."
      },
      "updateGuildFeePolicy(bytes32,address)": {
        "notice": "Updates the FeePolicy for an existing guild. May only be called by the guild's registered admin."
      },
      "updateGuildFeePolicy(string,address)": {
        "notice": "Updates the FeePolicy for an existing guild. May only be called by the guild's registered admin."
      },
      "updateGuildTagsAuthPolicy(bytes32,address)": {
        "notice": "Updates the TagsAuthPolicy for an existing guild. May only be called by the guild's registered admin."
      },
      "updateGuildTagsAuthPolicy(string,address)": {
        "notice": "Updates the TagsAuthPolicy for an existing guild. May only be called by the guild's registered admin."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 258,
        "contract": "contracts/ensGuilds/ENSGuilds.sol:ENSGuilds",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 264,
        "contract": "contracts/ensGuilds/ENSGuilds.sol:ENSGuilds",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 266,
        "contract": "contracts/ensGuilds/ENSGuilds.sol:ENSGuilds",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 3985,
        "contract": "contracts/ensGuilds/ENSGuilds.sol:ENSGuilds",
        "label": "guilds",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes16,t_struct(GuildTokenInfo)3980_storage)"
      },
      {
        "astId": 4219,
        "contract": "contracts/ensGuilds/ENSGuilds.sol:ENSGuilds",
        "label": "addresses",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 189,
        "contract": "contracts/ensGuilds/ENSGuilds.sol:ENSGuilds",
        "label": "_status",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2409,
        "contract": "contracts/ensGuilds/ENSGuilds.sol:ENSGuilds",
        "label": "ensRegistry",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(ENS)136"
      },
      {
        "astId": 2414,
        "contract": "contracts/ensGuilds/ENSGuilds.sol:ENSGuilds",
        "label": "guilds",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_struct(GuildInfo)2402_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes16": {
        "encoding": "inplace",
        "label": "bytes16",
        "numberOfBytes": "16"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ENS)136": {
        "encoding": "inplace",
        "label": "contract ENS",
        "numberOfBytes": "20"
      },
      "t_contract(FeePolicy)4430": {
        "encoding": "inplace",
        "label": "contract FeePolicy",
        "numberOfBytes": "20"
      },
      "t_contract(ITagsAuthPolicy)4598": {
        "encoding": "inplace",
        "label": "contract ITagsAuthPolicy",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes16,t_struct(GuildTokenInfo)3980_storage)": {
        "encoding": "mapping",
        "key": "t_bytes16",
        "label": "mapping(bytes16 => struct ENSGuildsToken.GuildTokenInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(GuildTokenInfo)3980_storage"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_struct(GuildInfo)2402_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ENSGuilds.GuildInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(GuildInfo)2402_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)2069_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2068,
            "contract": "contracts/ensGuilds/ENSGuilds.sol:ENSGuilds",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(GuildInfo)2402_storage": {
        "encoding": "inplace",
        "label": "struct ENSGuilds.GuildInfo",
        "members": [
          {
            "astId": 2391,
            "contract": "contracts/ensGuilds/ENSGuilds.sol:ENSGuilds",
            "label": "admin",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2394,
            "contract": "contracts/ensGuilds/ENSGuilds.sol:ENSGuilds",
            "label": "feePolicy",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(FeePolicy)4430"
          },
          {
            "astId": 2397,
            "contract": "contracts/ensGuilds/ENSGuilds.sol:ENSGuilds",
            "label": "tagsAuthPolicy",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(ITagsAuthPolicy)4598"
          },
          {
            "astId": 2399,
            "contract": "contracts/ensGuilds/ENSGuilds.sol:ENSGuilds",
            "label": "active",
            "offset": 20,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 2401,
            "contract": "contracts/ensGuilds/ENSGuilds.sol:ENSGuilds",
            "label": "deregistered",
            "offset": 21,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(GuildTokenInfo)3980_storage": {
        "encoding": "inplace",
        "label": "struct ENSGuildsToken.GuildTokenInfo",
        "members": [
          {
            "astId": 3973,
            "contract": "contracts/ensGuilds/ENSGuilds.sol:ENSGuilds",
            "label": "tokenIdTracker",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Counter)2069_storage"
          },
          {
            "astId": 3975,
            "contract": "contracts/ensGuilds/ENSGuilds.sol:ENSGuilds",
            "label": "templateURI",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 3979,
            "contract": "contracts/ensGuilds/ENSGuilds.sol:ENSGuilds",
            "label": "guildTagsToTokenIds",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
