{
  "address": "0x21Ca61a68969620A326431e17a72a292b19F5edF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "defaultTokenMetadataUri",
          "type": "string"
        },
        {
          "internalType": "contract ENS",
          "name": "_ensRegistry",
          "type": "address"
        },
        {
          "internalType": "contract IAddressResolver",
          "name": "_fallbackEnsResolver",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyRegistered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClaimUnauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ENSGuildsIsNotRegisteredOperator",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FeeError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GuildAdminOnly",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GuildNotActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GuildsTokenTransferNotAllowed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "InvalidPolicy",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotDomainOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RevokeUnauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TagAlreadyClaimed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "a",
          "type": "address"
        }
      ],
      "name": "AddrChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "coinType",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "newAddress",
          "type": "bytes"
        }
      ],
      "name": "AddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "guildId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "guildHash",
          "type": "bytes32"
        }
      ],
      "name": "Deregistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "guildId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "feePolicy",
          "type": "address"
        }
      ],
      "name": "FeePolicyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "guildHash",
          "type": "bytes32"
        }
      ],
      "name": "Registered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "guildId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "name": "SetActive",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "guildId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "tagHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "TagClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "guildId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tagsAuthPolicy",
          "type": "address"
        }
      ],
      "name": "TagsAuthPolicyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "addr",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "coinType",
          "type": "uint256"
        }
      ],
      "name": "addr",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "addresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "guildEnsName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tag",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "extraClaimArgs",
          "type": "bytes"
        }
      ],
      "name": "claimGuildTag",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "guildEnsNode",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "tagHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "extraClaimArgs",
          "type": "bytes"
        }
      ],
      "name": "claimGuildTag",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "guildEnsName",
          "type": "string"
        }
      ],
      "name": "deregisterGuild",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "ensNode",
          "type": "bytes32"
        }
      ],
      "name": "deregisterGuild",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ensRegistry",
      "outputs": [
        {
          "internalType": "contract ENS",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "guildHash",
          "type": "bytes32"
        }
      ],
      "name": "guildAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "guildEnsName",
          "type": "string"
        }
      ],
      "name": "guildAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "guilds",
      "outputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "contract FeePolicy",
          "name": "feePolicy",
          "type": "address"
        },
        {
          "internalType": "contract TagsAuthPolicy",
          "name": "tagsAuthPolicy",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "ensName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "feePolicy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tagsAuthPolicy",
          "type": "address"
        }
      ],
      "name": "registerGuild",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "ensNode",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "feePolicy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tagsAuthPolicy",
          "type": "address"
        }
      ],
      "name": "registerGuild",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "guildEnsName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tag",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "revokeGuildTag",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "guildEnsNode",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "tagHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "revokeGuildTag",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "guildEnsNode",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "name": "setGuildActive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "guildEnsName",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "name": "setGuildActive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "guildEnsNode",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "uriTemplate",
          "type": "string"
        }
      ],
      "name": "setGuildTokenUriTemplate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "guildEnsName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "uriTemplate",
          "type": "string"
        }
      ],
      "name": "setGuildTokenUriTemplate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "guildEnsName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "transferGuildAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "guildEnsNode",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "transferGuildAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "guildEnsName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "feePolicy",
          "type": "address"
        }
      ],
      "name": "updateGuildFeePolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "guildEnsNode",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "feePolicy",
          "type": "address"
        }
      ],
      "name": "updateGuildFeePolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "guildEnsName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "tagsAuthPolicy",
          "type": "address"
        }
      ],
      "name": "updateGuildTagsAuthPolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "guildEnsNode",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "tagsAuthPolicy",
          "type": "address"
        }
      ],
      "name": "updateGuildTagsAuthPolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x431ccfe587a03471d44cb0e86950c6110c193f078fa3ef0625b1e7b8da1805bf",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xE72285aee8Ad0b545DD6287Aab9EbE8237D4e7Cf",
    "contractAddress": null,
    "transactionIndex": 71,
    "gasUsed": "3855524",
    "logsBloom": "0x
    "blockHash": "0xb90973051d31b0d41f38fb665038402a820323b077de19da063b90a94b93a5d6",
    "transactionHash": "0x431ccfe587a03471d44cb0e86950c6110c193f078fa3ef0625b1e7b8da1805bf",
    "logs": [
      {
        "transactionIndex": 71,
        "blockNumber": 8582103,
        "transactionHash": "0x431ccfe587a03471d44cb0e86950c6110c193f078fa3ef0625b1e7b8da1805bf",
        "address": "0x21Ca61a68969620A326431e17a72a292b19F5edF",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c"
        ],
        "data": "0x",
        "logIndex": 160,
        "blockHash": "0xb90973051d31b0d41f38fb665038402a820323b077de19da063b90a94b93a5d6"
      }
    ],
    "blockNumber": 8582103,
    "cumulativeGasUsed": "16077643",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "stubMetadataUri",
    "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
    "0x4B1488B7a6B320d2D721406204aBc3eeAa9AD329"
  ],
  "numDeployments": 1,
  "solcInputHash": "552de5a12012ac94326fe2116f1ea129",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"defaultTokenMetadataUri\",\"type\":\"string\"},{\"internalType\":\"contract ENS\",\"name\":\"_ensRegistry\",\"type\":\"address\"},{\"internalType\":\"contract IAddressResolver\",\"name\":\"_fallbackEnsResolver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClaimUnauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ENSGuildsIsNotRegisteredOperator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GuildAdminOnly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GuildNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GuildsTokenTransferNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"InvalidPolicy\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotDomainOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RevokeUnauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TagAlreadyClaimed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"AddrChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"newAddress\",\"type\":\"bytes\"}],\"name\":\"AddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"guildId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"guildHash\",\"type\":\"bytes32\"}],\"name\":\"Deregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"guildId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feePolicy\",\"type\":\"address\"}],\"name\":\"FeePolicyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"guildHash\",\"type\":\"bytes32\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"guildId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"SetActive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"guildId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tagHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"TagClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"guildId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tagsAuthPolicy\",\"type\":\"address\"}],\"name\":\"TagsAuthPolicyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"addr\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"}],\"name\":\"addr\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"addresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"guildEnsName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tag\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"extraClaimArgs\",\"type\":\"bytes\"}],\"name\":\"claimGuildTag\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"guildEnsNode\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"tagHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"extraClaimArgs\",\"type\":\"bytes\"}],\"name\":\"claimGuildTag\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"guildEnsName\",\"type\":\"string\"}],\"name\":\"deregisterGuild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ensNode\",\"type\":\"bytes32\"}],\"name\":\"deregisterGuild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ensRegistry\",\"outputs\":[{\"internalType\":\"contract ENS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"guildHash\",\"type\":\"bytes32\"}],\"name\":\"guildAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"guildEnsName\",\"type\":\"string\"}],\"name\":\"guildAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"guilds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"contract FeePolicy\",\"name\":\"feePolicy\",\"type\":\"address\"},{\"internalType\":\"contract TagsAuthPolicy\",\"name\":\"tagsAuthPolicy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ensName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feePolicy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tagsAuthPolicy\",\"type\":\"address\"}],\"name\":\"registerGuild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ensNode\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feePolicy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tagsAuthPolicy\",\"type\":\"address\"}],\"name\":\"registerGuild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"guildEnsName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tag\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"revokeGuildTag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"guildEnsNode\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"tagHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"revokeGuildTag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"guildEnsNode\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"setGuildActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"guildEnsName\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"setGuildActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"guildEnsNode\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"uriTemplate\",\"type\":\"string\"}],\"name\":\"setGuildTokenUriTemplate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"guildEnsName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uriTemplate\",\"type\":\"string\"}],\"name\":\"setGuildTokenUriTemplate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"guildEnsName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferGuildAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"guildEnsNode\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferGuildAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"guildEnsName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"feePolicy\",\"type\":\"address\"}],\"name\":\"updateGuildFeePolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"guildEnsNode\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"feePolicy\",\"type\":\"address\"}],\"name\":\"updateGuildFeePolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"guildEnsName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"tagsAuthPolicy\",\"type\":\"address\"}],\"name\":\"updateGuildTagsAuthPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"guildEnsNode\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"tagsAuthPolicy\",\"type\":\"address\"}],\"name\":\"updateGuildTagsAuthPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addr(bytes32)\":{\"params\":{\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The associated address.\"}},\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"AlreadyRegistered()\":[{\"notice\":\"Errors \"}]},\"events\":{\"Registered(bytes32)\":{\"notice\":\"Events \"}},\"kind\":\"user\",\"methods\":{\"addr(bytes32)\":{\"notice\":\"Returns the address associated with an ENS node.\"},\"ensRegistry()\":{\"notice\":\"State \"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ensGuilds/ENSGuilds.sol\":\"ENSGuilds\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@ensdomains/ens-contracts/contracts/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface ENS {\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner\\n    ) external returns (bytes32);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setOwner(bytes32 node, address owner) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function owner(bytes32 node) external view returns (address);\\n\\n    function resolver(bytes32 node) external view returns (address);\\n\\n    function ttl(bytes32 node) external view returns (uint64);\\n\\n    function recordExists(bytes32 node) external view returns (bool);\\n\\n    function isApprovedForAll(address owner, address operator)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0xf79be82c1a2eb0a77fba4e0972221912e803309081ca460fd2cf61653e55758a\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddrResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the legacy (ETH-only) addr function.\\n */\\ninterface IAddrResolver {\\n    event AddrChanged(bytes32 indexed node, address a);\\n\\n    /**\\n     * Returns the address associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated address.\\n     */\\n    function addr(bytes32 node) external view returns (address payable);\\n}\\n\",\"keccak256\":\"0x2ad7f2fc60ebe0f93745fe70247f6a854f66af732483fda2a3c5e055614445e8\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the new (multicoin) addr function.\\n */\\ninterface IAddressResolver {\\n    event AddressChanged(\\n        bytes32 indexed node,\\n        uint256 coinType,\\n        bytes newAddress\\n    );\\n\\n    function addr(bytes32 node, uint256 coinType)\\n        external\\n        view\\n        returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x37221203e063dee5aa2a067a6ab3401e9cca41cce5b15230994b6ea377f05ed5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xd917747dc87f189c6779b894f367a028f9dca4be930283cccec8f312966af820\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x0812bc73d6e30558840122fa48d6f64ae978ccc1b1fc42e616bac190c6360f46\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961\",\"license\":\"MIT\"},\"contracts/ensGuilds/ENSGuilds.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport \\\"@ensdomains/ens-contracts/contracts/registry/ENS.sol\\\";\\nimport \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddressResolver.sol\\\";\\n\\nimport \\\"./interfaces/IENSGuilds.sol\\\";\\nimport \\\"../feePolicies/FeePolicy.sol\\\";\\nimport \\\"../tagsAuthPolicies/TagsAuthPolicy.sol\\\";\\nimport \\\"./mixins/ENSResolver.sol\\\";\\nimport \\\"./mixins/ENSGuildsToken.sol\\\";\\nimport \\\"./mixins/ENSGuildsHumanized.sol\\\";\\n\\ncontract ENSGuilds is\\n    AccessControlEnumerable,\\n    IENSGuilds,\\n    ENSGuildsHumanized,\\n    ENSGuildsToken,\\n    Pausable,\\n    ENSResolver,\\n    ReentrancyGuard\\n{\\n    struct GuildInfo {\\n        address admin;\\n        FeePolicy feePolicy;\\n        TagsAuthPolicy tagsAuthPolicy;\\n        bool active;\\n    }\\n\\n    using ERC165Checker for address;\\n\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    /** State */\\n    ENS public ensRegistry;\\n    mapping(bytes32 => GuildInfo) public guilds;\\n\\n    /** Errors */\\n    error AlreadyRegistered();\\n    error ENSGuildsIsNotRegisteredOperator();\\n    error NotDomainOwner();\\n    error InvalidPolicy(address);\\n    error GuildNotActive();\\n    error ClaimUnauthorized();\\n    error RevokeUnauthorized();\\n    error GuildAdminOnly();\\n    error TagAlreadyClaimed();\\n    error FeeError();\\n\\n    modifier onlyGuildAdmin(bytes32 guildHash) {\\n        if (guilds[guildHash].admin != _msgSender()) {\\n            revert GuildAdminOnly();\\n        }\\n        _;\\n    }\\n\\n    constructor(\\n        string memory defaultTokenMetadataUri,\\n        ENS _ensRegistry,\\n        IAddressResolver _fallbackEnsResolver\\n    ) ERC1155(defaultTokenMetadataUri) ENSResolver(_fallbackEnsResolver) {\\n        _setupRole(PAUSER_ROLE, _msgSender());\\n        ensRegistry = _ensRegistry;\\n    }\\n\\n    function pause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ENSGuilds: must have pauser role to pause\\\");\\n        _pause();\\n    }\\n\\n    function unpause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ENSGuilds: must have pauser role to unpause\\\");\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(AccessControlEnumerable, ENSResolver, ENSGuildsToken, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IENSGuilds).interfaceId ||\\n            ENSResolver.supportsInterface(interfaceId) ||\\n            ENSGuildsToken.supportsInterface(interfaceId) ||\\n            AccessControlEnumerable.supportsInterface(interfaceId) ||\\n            ERC165.supportsInterface(interfaceId);\\n    }\\n\\n    function registerGuild(\\n        bytes32 ensNode,\\n        address admin,\\n        address feePolicy,\\n        address tagsAuthPolicy\\n    ) public override(ENSGuildsHumanized, IENSGuilds) {\\n        // Check caller is owner of domain\\n        if (ensRegistry.owner(ensNode) != _msgSender()) {\\n            revert NotDomainOwner();\\n        }\\n\\n        // Check guild not yet registered\\n        if (address(guilds[ensNode].feePolicy) != address(0)) {\\n            revert AlreadyRegistered();\\n        }\\n\\n        // Check ENSGuilds contract has been configured as ENS resolver for the guild\\n        if (!ensRegistry.isApprovedForAll(_msgSender(), address(this))) {\\n            revert ENSGuildsIsNotRegisteredOperator();\\n        }\\n\\n        // Check for valid fee/tagsAuth policies\\n        if (!feePolicy.supportsInterface(type(FeePolicy).interfaceId)) {\\n            revert InvalidPolicy(feePolicy);\\n        }\\n        if (!tagsAuthPolicy.supportsInterface(type(TagsAuthPolicy).interfaceId)) {\\n            revert InvalidPolicy(tagsAuthPolicy);\\n        }\\n\\n        guilds[ensNode] = GuildInfo({\\n            admin: admin,\\n            feePolicy: FeePolicy(feePolicy),\\n            tagsAuthPolicy: TagsAuthPolicy(tagsAuthPolicy),\\n            active: true\\n        });\\n\\n        emit Registered(ensNode);\\n    }\\n\\n    function deregisterGuild(bytes32 ensNode) public override(ENSGuildsHumanized, IENSGuilds) onlyGuildAdmin(ensNode) {\\n        delete guilds[ensNode];\\n        emit Deregistered(ensNode);\\n    }\\n\\n    function claimGuildTag(\\n        bytes32 guildEnsNode,\\n        bytes32 tagHash,\\n        address recipient,\\n        bytes calldata extraClaimArgs\\n    ) public payable override(ENSGuildsHumanized, IENSGuilds) nonReentrant {\\n        // assert guild is not frozen\\n        if (!guilds[guildEnsNode].active) {\\n            revert GuildNotActive();\\n        }\\n\\n        // check tag not already claimed\\n        bytes32 ensNode = keccak256(abi.encodePacked(guildEnsNode, tagHash));\\n        if (addr(ensNode) != address(0)) {\\n            revert TagAlreadyClaimed();\\n        }\\n\\n        // check caller is authorized to claim tag\\n        TagsAuthPolicy auth = guilds[guildEnsNode].tagsAuthPolicy;\\n        if (!auth.canClaimTag(guildEnsNode, tagHash, _msgSender(), recipient, extraClaimArgs)) {\\n            revert ClaimUnauthorized();\\n        }\\n\\n        // fees\\n        (address feeToken, uint256 fee, address feePaidTo) = guilds[guildEnsNode].feePolicy.tagClaimFee(\\n            guildEnsNode,\\n            tagHash,\\n            _msgSender(),\\n            extraClaimArgs\\n        );\\n        if (fee != 0) {\\n            if (feeToken == address(0)) {\\n                if (msg.value != fee) {\\n                    revert FeeError();\\n                }\\n                // solhint-disable-next-line avoid-low-level-calls\\n                (bool sent, ) = feePaidTo.call{ value: msg.value }(\\\"\\\");\\n                if (!sent) revert FeeError();\\n            } else {\\n                try IERC20(feeToken).transferFrom(_msgSender(), feePaidTo, fee) returns (bool sent) {\\n                    if (!sent) revert FeeError();\\n                } catch {\\n                    revert FeeError();\\n                }\\n            }\\n        }\\n\\n        // NFT mint\\n        _mintNewGuildToken(guildEnsNode, recipient);\\n\\n        // inform auth contract that tag was claimed, optionally revoking an existing tag in the process\\n        bytes32 tagToRevoke = auth.onTagClaimed(guildEnsNode, tagHash, _msgSender(), recipient, extraClaimArgs);\\n        if (tagToRevoke != bytes32(0)) {\\n            _revokeTag(guildEnsNode, tagToRevoke);\\n        }\\n\\n        // Register this new name in ENS\\n        ensRegistry.setSubnodeRecord(guildEnsNode, tagHash, address(this), address(this), 0);\\n\\n        // Set forward record in ENS resolver\\n        _setEnsForwardRecord(ensNode, recipient);\\n    }\\n\\n    // function claimGuildTagsBatch(\\n    //     bytes32 guildEnsNode,\\n    //     bytes32[] calldata tagHashes,\\n    //     address[] calldata recipients,\\n    //     bytes[] calldata extraClaimArgs\\n    // ) external payable override {}\\n\\n    function guildAdmin(bytes32 guildHash) public view override(ENSGuildsHumanized, IENSGuilds) returns (address) {\\n        return guilds[guildHash].admin;\\n    }\\n\\n    function revokeGuildTag(\\n        bytes32 guildEnsNode,\\n        bytes32 tagHash,\\n        bytes calldata extraData\\n    ) public override(ENSGuildsHumanized, IENSGuilds) {\\n        TagsAuthPolicy auth = guilds[guildEnsNode].tagsAuthPolicy;\\n        if (!auth.tagCanBeRevoked(guildEnsNode, tagHash, extraData)) {\\n            revert RevokeUnauthorized();\\n        }\\n        _revokeTag(guildEnsNode, tagHash);\\n    }\\n\\n    function updateGuildFeePolicy(\\n        bytes32 guildEnsNode,\\n        address feePolicy\\n    ) public override(ENSGuildsHumanized, IENSGuilds) onlyGuildAdmin(guildEnsNode) {\\n        if (!feePolicy.supportsInterface(type(FeePolicy).interfaceId)) {\\n            revert InvalidPolicy(feePolicy);\\n        }\\n        guilds[guildEnsNode].feePolicy = FeePolicy(feePolicy);\\n        emit FeePolicyUpdated(guildEnsNode, feePolicy);\\n    }\\n\\n    function updateGuildTagsAuthPolicy(\\n        bytes32 guildEnsNode,\\n        address tagsAuthPolicy\\n    ) public override(ENSGuildsHumanized, IENSGuilds) onlyGuildAdmin(guildEnsNode) {\\n        if (!tagsAuthPolicy.supportsInterface(type(TagsAuthPolicy).interfaceId)) {\\n            revert InvalidPolicy(tagsAuthPolicy);\\n        }\\n        guilds[guildEnsNode].tagsAuthPolicy = TagsAuthPolicy(tagsAuthPolicy);\\n        emit TagsAuthPolicyUpdated(guildEnsNode, tagsAuthPolicy);\\n    }\\n\\n    function transferGuildAdmin(\\n        bytes32 guildEnsNode,\\n        address newAdmin\\n    ) public override(ENSGuildsHumanized, IENSGuilds) onlyGuildAdmin(guildEnsNode) {\\n        guilds[guildEnsNode].admin = newAdmin;\\n        emit AdminTransferred(guildEnsNode, newAdmin);\\n    }\\n\\n    function setGuildTokenUriTemplate(\\n        bytes32 guildEnsNode,\\n        string calldata uriTemplate\\n    ) public override(ENSGuildsHumanized, IENSGuilds) onlyGuildAdmin(guildEnsNode) {\\n        _setGuildTokenURITemplate(guildEnsNode, uriTemplate);\\n    }\\n\\n    function setGuildActive(\\n        bytes32 guildEnsNode,\\n        bool active\\n    ) public override(ENSGuildsHumanized, IENSGuilds) onlyGuildAdmin(guildEnsNode) {\\n        guilds[guildEnsNode].active = active;\\n        emit SetActive(guildEnsNode, active);\\n    }\\n\\n    function _revokeTag(bytes32 guildEnsNode, bytes32 tagHash) private {\\n        bytes32 ensNode = keccak256(abi.encodePacked(tagHash, guildEnsNode));\\n        // erase ENS forward record\\n        _setEnsForwardRecord(ensNode, address(0));\\n        // TODO: burn NFT\\n        // TODO: erase ENS reverse record?\\n    }\\n}\\n\",\"keccak256\":\"0x7e7d4a0676674e753ce1c012e00854d7a9c2da4bb23ab8d0f28e7001e2820d87\",\"license\":\"MIT\"},\"contracts/ensGuilds/interfaces/IENSGuilds.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddrResolver.sol\\\";\\nimport \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddressResolver.sol\\\";\\n\\ninterface IENSGuilds is IAddrResolver, IAddressResolver, IERC1155MetadataURI {\\n    /** Events */\\n    event Registered(bytes32 indexed guildHash);\\n    event Deregistered(bytes32 indexed guildHash);\\n    event TagClaimed(bytes32 indexed guildId, bytes32 indexed tagHash, address recipient);\\n    event FeePolicyUpdated(bytes32 indexed guildId, address feePolicy);\\n    event TagsAuthPolicyUpdated(bytes32 indexed guildId, address tagsAuthPolicy);\\n    event AdminTransferred(bytes32 indexed guildId, address newAdmin);\\n    event SetActive(bytes32 indexed guildId, bool active);\\n\\n    /** Functions */\\n\\n    function registerGuild(bytes32 guildHash, address guildAdmin, address feePolicy, address tagsAuthPolicy) external;\\n\\n    function deregisterGuild(bytes32 guildHash) external;\\n\\n    /**\\n     * Claims a guild tag\\n     * @param guildHash The namehash of the guild for which the tag should be claimed (e.g. namehash('my-guild.eth'))\\n     * @param tagHash The ENS namehash of the tag being claimed (e.g. keccak256('foo') for foo.my-guild.eth)\\n     * @param recipient The address that will receive this guild tag\\n     * @param extraClaimArgs [Optional] Any additional arguments necessary for guild-specific logic,\\n     *  such as authorization\\n     */\\n    function claimGuildTag(\\n        bytes32 guildHash,\\n        bytes32 tagHash,\\n        address recipient,\\n        bytes calldata extraClaimArgs\\n    ) external payable;\\n\\n    // function claimGuildTagsBatch(\\n    //     bytes32 guildHash,\\n    //     bytes32[] calldata tagHashes,\\n    //     address[] calldata recipients,\\n    //     bytes[] calldata extraClaimArgs\\n    // ) external payable;\\n\\n    function revokeGuildTag(bytes32 guildHash, bytes32 tagHash, bytes calldata extraData) external;\\n\\n    function updateGuildFeePolicy(bytes32 guildHash, address feePolicy) external;\\n\\n    function updateGuildTagsAuthPolicy(bytes32 guildHash, address tagsAuthPolicy) external;\\n\\n    function setGuildTokenUriTemplate(bytes32 guildHash, string calldata uriTemplate) external;\\n\\n    function setGuildActive(bytes32 guildHash, bool active) external;\\n\\n    function guildAdmin(bytes32 guildHash) external view returns (address);\\n\\n    function transferGuildAdmin(bytes32 guildHash, address newAdmin) external;\\n}\\n\",\"keccak256\":\"0xc4b7706dac1c1118765a24cd423f22fcfb6a407a5d937e137fe0aa238bd482ed\",\"license\":\"MIT\"},\"contracts/ensGuilds/interfaces/IENSGuildsHumanized.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IENSGuildsHumanized {\\n    function registerGuild(\\n        string memory ensName,\\n        address guildAdmin,\\n        address feePolicy,\\n        address tagsAuthPolicy\\n    ) external;\\n\\n    function deregisterGuild(string memory guildEnsName) external;\\n\\n    function claimGuildTag(\\n        string memory guildEnsName,\\n        string memory tag,\\n        address recipient,\\n        bytes calldata extraClaimArgs\\n    ) external payable;\\n\\n    function revokeGuildTag(string memory guildEnsName, string memory tag, bytes calldata extraData) external;\\n\\n    function updateGuildFeePolicy(string memory guildEnsName, address feePolicy) external;\\n\\n    function updateGuildTagsAuthPolicy(string memory guildEnsName, address tagsAuthPolicy) external;\\n\\n    function setGuildTokenUriTemplate(string memory guildEnsName, string calldata uriTemplate) external;\\n\\n    function setGuildActive(string memory guildEnsName, bool active) external;\\n\\n    function guildAdmin(string memory guildEnsName) external view returns (address);\\n\\n    function transferGuildAdmin(string memory guildEnsName, address newAdmin) external;\\n}\\n\",\"keccak256\":\"0xcbf01af84f5d41dc3bca1ee76be9d20aa4dc3c11395f7f1e6bbfadcb7a569c0b\",\"license\":\"MIT\"},\"contracts/ensGuilds/mixins/ENSGuildsHumanized.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../interfaces/IENSGuilds.sol\\\";\\nimport \\\"../interfaces/IENSGuildsHumanized.sol\\\";\\nimport \\\"../../libraries/ENSNamehash.sol\\\";\\n\\nabstract contract ENSGuildsHumanized is IENSGuildsHumanized {\\n    using ENSNamehash for bytes;\\n\\n    // Humanized versions\\n\\n    function registerGuild(\\n        string memory ensName,\\n        address admin,\\n        address feePolicy,\\n        address tagsAuthPolicy\\n    ) external override {\\n        bytes32 ensNode = bytes(ensName).namehash();\\n        registerGuild(ensNode, admin, feePolicy, tagsAuthPolicy);\\n    }\\n\\n    function deregisterGuild(string memory guildEnsName) external {\\n        bytes32 guildEnsNode = bytes(guildEnsName).namehash();\\n        deregisterGuild(guildEnsNode);\\n    }\\n\\n    function claimGuildTag(\\n        string memory guildEnsName,\\n        string memory tag,\\n        address recipient,\\n        bytes calldata extraClaimArgs\\n    ) external payable override {\\n        bytes32 guildEnsNode = bytes(guildEnsName).namehash();\\n        bytes32 tagHash = keccak256(bytes(tag));\\n        claimGuildTag(guildEnsNode, tagHash, recipient, extraClaimArgs);\\n    }\\n\\n    function revokeGuildTag(string memory guildEnsName, string memory tag, bytes calldata extraData) external {\\n        bytes32 guildEnsNode = bytes(guildEnsName).namehash();\\n        bytes32 tagHash = keccak256(bytes(tag));\\n        revokeGuildTag(guildEnsNode, tagHash, extraData);\\n    }\\n\\n    function updateGuildFeePolicy(string memory guildEnsName, address feePolicy) external {\\n        bytes32 guildEnsNode = bytes(guildEnsName).namehash();\\n        updateGuildFeePolicy(guildEnsNode, feePolicy);\\n    }\\n\\n    function updateGuildTagsAuthPolicy(string memory guildEnsName, address tagsAuthPolicy) external {\\n        bytes32 guildEnsNode = bytes(guildEnsName).namehash();\\n        updateGuildTagsAuthPolicy(guildEnsNode, tagsAuthPolicy);\\n    }\\n\\n    function setGuildTokenUriTemplate(string memory guildEnsName, string calldata uriTemplate) external {\\n        bytes32 guildEnsNode = bytes(guildEnsName).namehash();\\n        setGuildTokenUriTemplate(guildEnsNode, uriTemplate);\\n    }\\n\\n    function setGuildActive(string memory guildEnsName, bool active) external {\\n        bytes32 guildEnsNode = bytes(guildEnsName).namehash();\\n        setGuildActive(guildEnsNode, active);\\n    }\\n\\n    function guildAdmin(string memory guildEnsName) external view returns (address) {\\n        bytes32 guildEnsNode = bytes(guildEnsName).namehash();\\n        return guildAdmin(guildEnsNode);\\n    }\\n\\n    function transferGuildAdmin(string memory guildEnsName, address newAdmin) external {\\n        bytes32 guildEnsNode = bytes(guildEnsName).namehash();\\n        transferGuildAdmin(guildEnsNode, newAdmin);\\n    }\\n\\n    // Original versions\\n\\n    function registerGuild(bytes32, address, address, address) public virtual;\\n\\n    function deregisterGuild(bytes32) public virtual;\\n\\n    function claimGuildTag(bytes32, bytes32, address, bytes calldata) public payable virtual;\\n\\n    function revokeGuildTag(bytes32, bytes32, bytes calldata) public virtual;\\n\\n    function updateGuildFeePolicy(bytes32, address) public virtual;\\n\\n    function updateGuildTagsAuthPolicy(bytes32, address) public virtual;\\n\\n    function setGuildTokenUriTemplate(bytes32, string calldata) public virtual;\\n\\n    function setGuildActive(bytes32, bool) public virtual;\\n\\n    function guildAdmin(bytes32) public view virtual returns (address);\\n\\n    function transferGuildAdmin(bytes32, address) public virtual;\\n}\\n\",\"keccak256\":\"0x2a144c92d350fadda7c91c4d7fb213c1dfb25d3e6aaa0fa3a3a2dd6bd6e2bf1c\",\"license\":\"MIT\"},\"contracts/ensGuilds/mixins/ENSGuildsToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\nabstract contract ENSGuildsToken is ERC1155 {\\n    using Counters for Counters.Counter;\\n\\n    error GuildsTokenTransferNotAllowed();\\n\\n    uint256 internal constant GUILD_ID_MASK = uint256(~uint128(0)) << 128;\\n\\n    struct GuildTokenInfo {\\n        Counters.Counter tokenIdTracker;\\n        string templateURI;\\n    }\\n\\n    // maps the top 128 bits of each guild's GuildID (ensNode) to its metadataURI and token ID counter\\n    mapping(bytes16 => GuildTokenInfo) private guilds;\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC1155) returns (bool) {\\n        return ERC1155.supportsInterface(interfaceId);\\n    }\\n\\n    function uri(uint256 tokenId) public view virtual override returns (string memory) {\\n        // calculate truncated guildHash from first 128 bits of tokenId\\n        uint256 truncatedGuildHashUint = tokenId & GUILD_ID_MASK;\\n        bytes16 truncatedGuildHash = bytes16(bytes32(truncatedGuildHashUint));\\n\\n        // return guild-specific URI if exists\\n        string storage guildTemplateURI = guilds[truncatedGuildHash].templateURI;\\n        if (bytes(guildTemplateURI).length != 0) {\\n            return guildTemplateURI;\\n        }\\n\\n        // return default URI shared by all guilds\\n        return ERC1155.uri(tokenId);\\n    }\\n\\n    function _mintNewGuildToken(bytes32 guildHash, address to) internal {\\n        bytes16 truncatedGuildHash = bytes16(guildHash);\\n\\n        uint256 tokenCounterCurrent = guilds[truncatedGuildHash].tokenIdTracker.current();\\n        require(tokenCounterCurrent < type(uint128).max, \\\"tokenCounterOverflow\\\");\\n\\n        guilds[truncatedGuildHash].tokenIdTracker.increment();\\n\\n        uint256 truncatedGuildHashUint = uint256(guildHash) & GUILD_ID_MASK;\\n        uint256 fullTokenId = truncatedGuildHashUint + tokenCounterCurrent;\\n\\n        bytes memory emptyData;\\n        _mint(to, fullTokenId, 1, emptyData);\\n    }\\n\\n    function _setGuildTokenURITemplate(bytes32 guildHash, string calldata templateURI) internal {\\n        bytes16 truncatedGuildHash = bytes16(guildHash);\\n        guilds[truncatedGuildHash].templateURI = templateURI;\\n    }\\n\\n    function safeTransferFrom(address, address, uint256, uint256, bytes memory) public virtual override {\\n        revert GuildsTokenTransferNotAllowed();\\n    }\\n}\\n\",\"keccak256\":\"0x261bb4c6923d5b78fefb505c76c45c57ec723d4340199123df356302cc24694f\",\"license\":\"MIT\"},\"contracts/ensGuilds/mixins/ENSResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddrResolver.sol\\\";\\nimport \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddressResolver.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nabstract contract ENSResolver is IAddrResolver, IAddressResolver, ERC165 {\\n    uint256 private constant COIN_TYPE_ETH = 60;\\n    IAddressResolver private fallbackResolver;\\n\\n    mapping(bytes32 => address) public addresses;\\n\\n    constructor(IAddressResolver _fallbackResolver) {\\n        fallbackResolver = _fallbackResolver;\\n    }\\n\\n    /**\\n     * Sets the address associated with an ENS node.\\n     * May only be called by descendants of this contract\\n     */\\n    function _setEnsForwardRecord(bytes32 node, address a) internal {\\n        addresses[node] = a;\\n    }\\n\\n    function addr(bytes32 node) public view override returns (address payable) {\\n        bytes memory a = addr(node, COIN_TYPE_ETH);\\n        if (a.length == 0) {\\n            return payable(0);\\n        }\\n        return bytesToAddress(a);\\n    }\\n\\n    function addr(bytes32 node, uint256 coinType) public view override returns (bytes memory) {\\n        address a = addresses[node];\\n        if (a == address(0)) {\\n            return fallbackResolver.addr(node, coinType);\\n        }\\n        return addressToBytes(a);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceID) public view virtual override(ERC165) returns (bool) {\\n        return\\n            interfaceID == type(IAddrResolver).interfaceId ||\\n            interfaceID == type(IAddressResolver).interfaceId ||\\n            super.supportsInterface(interfaceID);\\n    }\\n\\n    // solhint-disable\\n    // Source: https://github.com/ensdomains/ens-contracts/blob/340a6d05cd00d078ae40edbc58c139eb7048189a/contracts/resolvers/profiles/AddrResolver.sol#L85\\n    function bytesToAddress(bytes memory b) internal pure returns (address payable a) {\\n        require(b.length == 20);\\n        assembly {\\n            a := div(mload(add(b, 32)), exp(256, 12)) // cspell:disable-line\\n        }\\n    }\\n\\n    // Source: https://github.com/ensdomains/ens-contracts/blob/340a6d05cd00d078ae40edbc58c139eb7048189a/contracts/resolvers/profiles/AddrResolver.sol#L96\\n    function addressToBytes(address a) internal pure returns (bytes memory b) {\\n        b = new bytes(20);\\n        assembly {\\n            mstore(add(b, 32), mul(a, exp(256, 12))) // cspell:disable-line\\n        }\\n    }\\n    // solhint-enable\\n}\\n\",\"keccak256\":\"0x027b627d0c01fa431165c4476444f928f271516dad3342466a71b64f17dbe248\",\"license\":\"MIT\"},\"contracts/feePolicies/FeePolicy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nabstract contract FeePolicy is ERC165 {\\n    function supportsInterface(bytes4 interfaceID) public view virtual override(ERC165) returns (bool) {\\n        return interfaceID == type(FeePolicy).interfaceId || super.supportsInterface(interfaceID);\\n    }\\n\\n    // tokenContract(0) == ETH\\n    function tagClaimFee(\\n        bytes32 guildHash,\\n        bytes32 tagHash,\\n        address claimant,\\n        bytes calldata extraClaimArgs\\n    ) external view virtual returns (address tokenContract, uint256 fee, address feePaidTo);\\n}\\n\",\"keccak256\":\"0x3f8320e32bda46340d5c96a1ce14e2754f82887a0a3b9d8aa5ab9378f6132cad\",\"license\":\"MIT\"},\"contracts/libraries/ENSNamehash.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Source: https://github.com/JonahGroendal/ens-namehash/blob/master/contracts/ENSNamehash.sol\\n\\npragma solidity ^0.8.4;\\n\\n/*\\n * @dev Solidity implementation of the ENS namehash algorithm.\\n *\\n * Warning! Does not normalize or validate names before hashing.\\n */\\nlibrary ENSNamehash {\\n    function namehash(bytes memory domain) internal pure returns (bytes32) {\\n        return namehash(domain, 0);\\n    }\\n\\n    function namehash(bytes memory domain, uint i) internal pure returns (bytes32) {\\n        if (domain.length <= i) return 0x0000000000000000000000000000000000000000000000000000000000000000;\\n\\n        uint len = LabelLength(domain, i);\\n\\n        return keccak256(abi.encodePacked(namehash(domain, i + len + 1), keccak(domain, i, len)));\\n    }\\n\\n    function LabelLength(bytes memory domain, uint i) private pure returns (uint) {\\n        uint len;\\n        while (i + len != domain.length && domain[i + len] != 0x2e) {\\n            len++;\\n        }\\n        return len;\\n    }\\n\\n    function keccak(bytes memory data, uint offset, uint len) private pure returns (bytes32 ret) {\\n        require(offset + len <= data.length);\\n        assembly {\\n            ret := keccak256(add(add(data, 32), offset), len)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2e0ef9e175164347b4c80c0f6d2e03212cabbcae8f36e8ced03f66042aca011a\",\"license\":\"MIT\"},\"contracts/tagsAuthPolicies/TagsAuthPolicy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nabstract contract TagsAuthPolicy is ERC165 {\\n    function supportsInterface(bytes4 interfaceID) public view virtual override(ERC165) returns (bool) {\\n        return interfaceID == type(TagsAuthPolicy).interfaceId || super.supportsInterface(interfaceID);\\n    }\\n\\n    function canClaimTag(\\n        bytes32 guildHash,\\n        bytes32 tagHash,\\n        address claimant,\\n        address recipient,\\n        bytes calldata extraClaimArgs\\n    ) external virtual returns (bool);\\n\\n    function onTagClaimed(\\n        bytes32 guildHash,\\n        bytes32 tagHash,\\n        address claimant,\\n        address recipient,\\n        bytes calldata extraClaimArgs\\n    ) external virtual returns (bytes32 tagToRevoke);\\n\\n    function tagCanBeRevoked(\\n        bytes32 guildHash,\\n        bytes32 tagHash,\\n        bytes calldata extraRevokeArgs\\n    ) external virtual returns (bool);\\n}\\n\",\"keccak256\":\"0xcbca4bd92ff12c0d3435243691be2dd6e29e6318aeb66b533b919b47cca0dd7f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620045e3380380620045e3833981016040819052620000349162000267565b80836200004181620000c7565b50600680546001600160a01b03909216610100026001600160a81b031990921691909117905560016008556200009f7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a620000993390565b620000d9565b50600980546001600160a01b0319166001600160a01b039290921691909117905550620004bb565b6004620000d58282620003ef565b5050565b620000d58282620000f682826200012260201b62001e811760201c565b60008281526001602090815260409091206200011d91839062001f1f620001c2821b17901c565b505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16620000d5576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556200017e3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000620001d9836001600160a01b038416620001e2565b90505b92915050565b60008181526001830160205260408120546200022b57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155620001dc565b506000620001dc565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b03811681146200026257600080fd5b919050565b6000806000606084860312156200027d57600080fd5b83516001600160401b03808211156200029557600080fd5b818601915086601f830112620002aa57600080fd5b815181811115620002bf57620002bf62000234565b604051601f8201601f19908116603f01168101908382118183101715620002ea57620002ea62000234565b816040528281526020935089848487010111156200030757600080fd5b600091505b828210156200032b57848201840151818301850152908301906200030c565b6000848483010152809750505050620003468187016200024a565b9350505062000358604085016200024a565b90509250925092565b600181811c908216806200037657607f821691505b6020821081036200039757634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200011d57600081815260208120601f850160051c81016020861015620003c65750805b601f850160051c820191505b81811015620003e757828155600101620003d2565b505050505050565b81516001600160401b038111156200040b576200040b62000234565b62000423816200041c845462000361565b846200039d565b602080601f8311600181146200045b5760008415620004425750858301515b600019600386901b1c1916600185901b178555620003e7565b600085815260208120601f198616915b828110156200048c578886015182559484019460019091019084016200046b565b5085821015620004ab5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61411880620004cb6000396000f3fe6080604052600436106102f15760003560e01c80638308af031161018f578063bb2b1e82116100e1578063defa45af1161008a578063f1cb7e0611610064578063f1cb7e0614610951578063f242432a14610971578063fdfb410c1461099157600080fd5b8063defa45af146108b4578063e63ab1e9146108d4578063e985e9c51461090857600080fd5b8063d4ec5bbc116100bb578063d4ec5bbc146107ea578063d547741f1461080a578063d919713f1461082a57600080fd5b8063bb2b1e821461078a578063ca15c873146107aa578063cf4c5d69146107ca57600080fd5b80639c9925f511610143578063a217fddf1161011d578063a217fddf14610735578063a22cb4651461074a578063a484fba61461076a57600080fd5b80639c9925f5146106e25780639e5388ba14610702578063a062d1f71461071557600080fd5b80638a86edba116101745780638a86edba1461065e5780639010d07c1461067e57806391d148541461069e57600080fd5b80638308af03146106295780638456cb591461064957600080fd5b80633f4ba83a11610248578063620440e8116101fc578063784beff2116101d6578063784beff2146105c95780637d73b231146105e95780637e6536121461060957600080fd5b8063620440e814610560578063699f200f14610573578063784609f8146105a957600080fd5b80634e1273f41161022d5780634e1273f4146104fb578063516877f6146105285780635c975abb1461054857600080fd5b80633f4ba83a146104c65780633f774c4d146104db57600080fd5b8063248a9ca3116102aa578063348f18f711610284578063348f18f71461046657806336568abe146104865780633b3b57de146104a657600080fd5b8063248a9ca3146103f65780632eb2c2d6146104265780632f2ff15d1461044657600080fd5b8063022c977f116102db578063022c977f146103595780630e89341c146103a757806310c68cd8146103d457600080fd5b8062fdd58e146102f657806301ffc9a714610329575b600080fd5b34801561030257600080fd5b506103166103113660046131ea565b6109b1565b6040519081526020015b60405180910390f35b34801561033557600080fd5b5061034961034436600461322c565b610a5f565b6040519015158152602001610320565b34801561036557600080fd5b5061038f610374366004613249565b6000908152600a60205260409020546001600160a01b031690565b6040516001600160a01b039091168152602001610320565b3480156103b357600080fd5b506103c76103c2366004613249565b610ac1565b60405161032091906132b2565b3480156103e057600080fd5b506103f46103ef36600461338c565b610ba6565b005b34801561040257600080fd5b50610316610411366004613249565b60009081526020819052604090206001015490565b34801561043257600080fd5b506103f4610441366004613496565b610bc6565b34801561045257600080fd5b506103f4610461366004613544565b610c61565b34801561047257600080fd5b506103f4610481366004613574565b610c8b565b34801561049257600080fd5b506103f46104a1366004613544565b610ca2565b3480156104b257600080fd5b5061038f6104c1366004613249565b610d2e565b3480156104d257600080fd5b506103f4610d60565b3480156104e757600080fd5b506103f46104f6366004613574565b610e06565b34801561050757600080fd5b5061051b6105163660046135bb565b610e1d565b60405161032091906136c3565b34801561053457600080fd5b506103f461054336600461371f565b610f5b565b34801561055457600080fd5b5060065460ff16610349565b6103f461056e3660046137aa565b610f84565b34801561057f57600080fd5b5061038f61058e366004613249565b6007602052600090815260409020546001600160a01b031681565b3480156105b557600080fd5b506103f46105c436600461385c565b610faf565b3480156105d557600080fd5b506103f46105e4366004613881565b61106e565b3480156105f557600080fd5b5060095461038f906001600160a01b031681565b34801561061557600080fd5b506103f46106243660046138c8565b61115f565b34801561063557600080fd5b506103f46106443660046138fd565b611175565b34801561065557600080fd5b506103f461118c565b34801561066a57600080fd5b506103f4610679366004613574565b611230565b34801561068a57600080fd5b5061038f610699366004613944565b611247565b3480156106aa57600080fd5b506103496106b9366004613544565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b3480156106ee57600080fd5b506103f46106fd366004613544565b61125f565b6103f4610710366004613966565b61133a565b34801561072157600080fd5b506103f46107303660046139bf565b6117fe565b34801561074157600080fd5b50610316600081565b34801561075657600080fd5b506103f4610765366004613a0b565b611848565b34801561077657600080fd5b506103f4610785366004613a39565b611853565b34801561079657600080fd5b5061038f6107a53660046138c8565b61186b565b3480156107b657600080fd5b506103166107c5366004613249565b611897565b3480156107d657600080fd5b506103f46107e5366004613a95565b6118ae565b3480156107f657600080fd5b506103f4610805366004613544565b611b71565b34801561081657600080fd5b506103f4610825366004613544565b611c07565b34801561083657600080fd5b5061087f610845366004613249565b600a602052600090815260409020805460018201546002909201546001600160a01b0391821692821691811690600160a01b900460ff1684565b60405161032094939291906001600160a01b039485168152928416602084015292166040820152901515606082015260800190565b3480156108c057600080fd5b506103f46108cf366004613249565b611c2c565b3480156108e057600080fd5b506103167f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b34801561091457600080fd5b50610349610923366004613abd565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205460ff1690565b34801561095d57600080fd5b506103c761096c366004613944565b611cd8565b34801561097d57600080fd5b506103f461098c366004613aeb565b611d8d565b34801561099d57600080fd5b506103f46109ac366004613544565b611da6565b60006001600160a01b038316610a345760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201527f616c6964206f776e65720000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b5060008181526002602090815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b031982166398280fbb60e01b1480610a845750610a8482611f34565b80610a935750610a9382611f70565b80610aa25750610aa282611f7b565b80610a5957506301ffc9a760e01b6001600160e01b0319831614610a59565b6fffffffffffffffffffffffffffffffff198116600081815260056020526040902060010180546060929182918190610af990613b54565b159050610b9457808054610b0c90613b54565b80601f0160208091040260200160405190810160405280929190818152602001828054610b3890613b54565b8015610b855780601f10610b5a57610100808354040283529160200191610b85565b820191906000526020600020905b815481529060010190602001808311610b6857829003601f168201915b50505050509350505050919050565b610b9d85611fa0565b95945050505050565b6000610bb185612034565b9050610bbf818585856118ae565b5050505050565b6001600160a01b038516331480610be25750610be28533610923565b610c545760405162461bcd60e51b815260206004820152602e60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206f7220617070726f7665640000000000000000000000000000000000006064820152608401610a2b565b610bbf8585858585612041565b600082815260208190526040902060010154610c7c816122da565b610c8683836122e7565b505050565b6000610c9683612034565b9050610c868183611b71565b6001600160a01b0381163314610d205760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610a2b565b610d2a8282612309565b5050565b600080610d3c83603c611cd8565b90508051600003610d505750600092915050565b610d598161232b565b9392505050565b610d8a7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a336106b9565b610dfc5760405162461bcd60e51b815260206004820152602b60248201527f454e534775696c64733a206d75737420686176652070617573657220726f6c6560448201527f20746f20756e70617573650000000000000000000000000000000000000000006064820152608401610a2b565b610e04612353565b565b6000610e1183612034565b9050610c868183611da6565b60608151835114610e965760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d6174636800000000000000000000000000000000000000000000006064820152608401610a2b565b6000835167ffffffffffffffff811115610eb257610eb26132c5565b604051908082528060200260200182016040528015610edb578160200160208202803683370190505b50905060005b8451811015610f5357610f26858281518110610eff57610eff613b8e565b6020026020010151858381518110610f1957610f19613b8e565b60200260200101516109b1565b828281518110610f3857610f38613b8e565b6020908102919091010152610f4c81613bba565b9050610ee1565b509392505050565b6000610f6685612034565b84516020860120909150610f7c8282868661106e565b505050505050565b6000610f8f86612034565b85516020870120909150610fa6828287878761133a565b50505050505050565b6000828152600a602052604090205482906001600160a01b03163314610fe857604051630e64a9cf60e21b815260040160405180910390fd5b6000838152600a6020526040908190206002018054841515600160a01b027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff9091161790555183907fcddecc2f17a0c961cfad3af69d94ee8d5ece1542dc95fd53f898ab77781272c49061106190851515815260200190565b60405180910390a2505050565b6000848152600a602052604090819020600201549051630c5f23c360e41b81526001600160a01b0390911690819063c5f23c30906110b6908890889088908890600401613bfc565b6020604051808303816000875af11580156110d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f99190613c26565b6111165760405163645b259360e11b815260040160405180910390fd5b60408051602080820187905281830188905282518083038401815260609092018352815191810191909120600090815260079091522080546001600160a01b0319169055610bbf565b600061116a82612034565b9050610d2a81611c2c565b600061118083612034565b9050610c868183610faf565b6111b67f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a336106b9565b6112285760405162461bcd60e51b815260206004820152602960248201527f454e534775696c64733a206d75737420686176652070617573657220726f6c6560448201527f20746f20706175736500000000000000000000000000000000000000000000006064820152608401610a2b565b610e046123a5565b600061123b83612034565b9050610c86818361125f565b6000828152600160205260408120610d5990836123e2565b6000828152600a602052604090205482906001600160a01b0316331461129857604051630e64a9cf60e21b815260040160405180910390fd5b6112b26001600160a01b038316632763ed8d60e21b6123ee565b6112da5760405163592e05dd60e11b81526001600160a01b0383166004820152602401610a2b565b6000838152600a602090815260409182902060010180546001600160a01b0319166001600160a01b038616908117909155915191825284917fe3e6191059989ec6f70a99fca0dfbb5c0cac787bba9232a0f364180133d3e7159101611061565b61134261240a565b6000858152600a6020526040902060020154600160a01b900460ff1661137b57604051634db8e46160e01b815260040160405180910390fd5b6040805160208082018890528183018790528251808303840181526060909201909252805191012060006113ae82610d2e565b6001600160a01b0316146113d557604051630344c41960e11b815260040160405180910390fd5b6000868152600a60205260409020600201546001600160a01b03168063f02cbfbb8888338989896040518763ffffffff1660e01b815260040161141d96959493929190613c43565b6020604051808303816000875af115801561143c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114609190613c26565b61147d576040516302b7adcd60e11b815260040160405180910390fd5b6000878152600a6020526040812060010154819081906001600160a01b0316639c707f938b8b338b8b6040518663ffffffff1660e01b81526004016114c6959493929190613c88565b606060405180830381865afa1580156114e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115079190613cb7565b9250925092508160001461167b576001600160a01b0383166115bd57813414611543576040516320c4d7fb60e21b815260040160405180910390fd5b6000816001600160a01b03163460405160006040518083038185875af1925050503d8060008114611590576040519150601f19603f3d011682016040523d82523d6000602084013e611595565b606091505b50509050806115b7576040516320c4d7fb60e21b815260040160405180910390fd5b5061167b565b6001600160a01b0383166323b872dd336040516001600160e01b031960e084901b1681526001600160a01b0391821660048201529084166024820152604481018590526064016020604051808303816000875af192505050801561163e575060408051601f3d908101601f1916820190925261163b91810190613c26565b60015b61165b576040516320c4d7fb60e21b815260040160405180910390fd5b80611679576040516320c4d7fb60e21b815260040160405180910390fd5b505b6116858a89612463565b604051638fcae51d60e01b81526000906001600160a01b03861690638fcae51d906116be908e908e9033908f908f908f90600401613c43565b6020604051808303816000875af11580156116dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117019190613cfa565b9050801561174e576040805160208082018490528183018e905282518083038401815260609092018352815191810191909120600090815260079091522080546001600160a01b03191690555b6009546040516305ef2c7f60e41b8152600481018d9052602481018c905230604482018190526064820152600060848201526001600160a01b0390911690635ef2c7f09060a401600060405180830381600087803b1580156117af57600080fd5b505af11580156117c3573d6000803e3d6000fd5b505050600087815260076020526040902080546001600160a01b0319166001600160a01b038c1617905550505050505050610bbf6001600855565b6000838152600a602052604090205483906001600160a01b0316331461183757604051630e64a9cf60e21b815260040160405180910390fd5b611842848484612541565b50505050565b610d2a338383612573565b600061185e84612034565b90506118428184846117fe565b60008061187783612034565b6000818152600a60205260409020549091506001600160a01b0316610d59565b6000818152600160205260408120610a5990612667565b336009546040516302571be360e01b8152600481018790526001600160a01b0392831692909116906302571be390602401602060405180830381865afa1580156118fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119209190613d13565b6001600160a01b031614611947576040516326fdee4b60e11b815260040160405180910390fd5b6000848152600a60205260409020600101546001600160a01b03161561198057604051630ea075bf60e21b815260040160405180910390fd5b6009546001600160a01b031663e985e9c5336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604401602060405180830381865afa1580156119dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a009190613c26565b611a1d57604051636fd1a8ab60e01b815260040160405180910390fd5b611a376001600160a01b038316632763ed8d60e21b6123ee565b611a5f5760405163592e05dd60e11b81526001600160a01b0383166004820152602401610a2b565b611a796001600160a01b03821663bbebaf3160e01b6123ee565b611aa15760405163592e05dd60e11b81526001600160a01b0382166004820152602401610a2b565b604080516080810182526001600160a01b038086168252848116602080840191825285831684860190815260016060860181815260008c8152600a909452878420965187549087166001600160a01b0319918216178855945191870180549287169290951691909117909355516002909401805492511515600160a01b0274ffffffffffffffffffffffffffffffffffffffffff199093169490931693909317179055905185917f10906fae603eebfac53ddc0f103bee8a044dd7643c425c7a90f921dfa15ef62c91a250505050565b6000828152600a602052604090205482906001600160a01b03163314611baa57604051630e64a9cf60e21b815260040160405180910390fd5b6000838152600a602090815260409182902080546001600160a01b0319166001600160a01b038616908117909155915191825284917f44ae681d782ebebc775c8c23cc18621486d68ac94ae4a8271f59892d6c8cec239101611061565b600082815260208190526040902060010154611c22816122da565b610c868383612309565b6000818152600a602052604090205481906001600160a01b03163314611c6557604051630e64a9cf60e21b815260040160405180910390fd5b6000828152600a602052604080822080546001600160a01b031990811682556001820180549091169055600201805474ffffffffffffffffffffffffffffffffffffffffff191690555183917fa8167a993f10ce22abac512a74e81171d978a9d52acc66d0a46d3ff05f21ca0b91a25050565b6000828152600760205260409020546060906001600160a01b031680611d7c576006546040516378e5bf0360e11b815260048101869052602481018590526101009091046001600160a01b03169063f1cb7e0690604401600060405180830381865afa158015611d4c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611d749190810190613d30565b915050610a59565b611d8581612671565b949350505050565b6040516338730eb560e11b815260040160405180910390fd5b6000828152600a602052604090205482906001600160a01b03163314611ddf57604051630e64a9cf60e21b815260040160405180910390fd5b611df96001600160a01b03831663bbebaf3160e01b6123ee565b611e215760405163592e05dd60e11b81526001600160a01b0383166004820152602401610a2b565b6000838152600a602090815260409182902060020180546001600160a01b0319166001600160a01b038616908117909155915191825284917f276dcdaae75cd5831871106265565c93b5a5ba18286a11f7f661826476a89e5d9101611061565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16610d2a576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055611edb3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610d59836001600160a01b0384166126aa565b60006001600160e01b03198216631d9dabef60e11b1480611f6557506001600160e01b031982166378e5bf0360e11b145b80610a595750610a59825b6000610a59826126f9565b60006001600160e01b03198216635a05180f60e01b1480610a595750610a5982612739565b606060048054611faf90613b54565b80601f0160208091040260200160405190810160405280929190818152602001828054611fdb90613b54565b80156120285780601f10611ffd57610100808354040283529160200191612028565b820191906000526020600020905b81548152906001019060200180831161200b57829003601f168201915b50505050509050919050565b6000610a5982600061276e565b81518351146120b85760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060448201527f6d69736d617463680000000000000000000000000000000000000000000000006064820152608401610a2b565b6001600160a01b0384166121345760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610a2b565b3360005b845181101561227457600085828151811061215557612155613b8e565b60200260200101519050600085838151811061217357612173613b8e565b60209081029190910181015160008481526002835260408082206001600160a01b038e16835290935291909120549091508181101561221a5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201527f72207472616e73666572000000000000000000000000000000000000000000006064820152608401610a2b565b60008381526002602090815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290612259908490613da8565b925050819055505050508061226d90613bba565b9050612138565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516122c4929190613dbb565b60405180910390a4610f7c8187878787876127e8565b6122e4813361298d565b50565b6122f18282611e81565b6000828152600160205260409020610c869082611f1f565b6123138282612a00565b6000828152600160205260409020610c869082612a7f565b6000815160141461233b57600080fd5b50602001516c01000000000000000000000000900490565b61235b612a94565b6006805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6123ad612ae6565b6006805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586123883390565b6000610d598383612b39565b60006123f983612b63565b8015610d595750610d598383612b96565b60026008540361245c5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a2b565b6002600855565b6fffffffffffffffffffffffffffffffff19821660009081526005602052604090205482906fffffffffffffffffffffffffffffffff81106124e75760405162461bcd60e51b815260206004820152601460248201527f746f6b656e436f756e7465724f766572666c6f770000000000000000000000006044820152606401610a2b565b6fffffffffffffffffffffffffffffffff1982166000908152600560205260409020805460010190556fffffffffffffffffffffffffffffffff19841660006125308383613da8565b90506060610fa68683600184612c34565b6fffffffffffffffffffffffffffffffff19831660009081526005602052604090208390600101610bbf838583613e26565b816001600160a01b0316836001600160a01b0316036125fa5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c6600000000000000000000000000000000000000000000006064820152608401610a2b565b6001600160a01b03838116600081815260036020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6000610a59825490565b6040805160148082528183019092526060916020820181803683375050506c010000000000000000000000009290920260208301525090565b60008181526001830160205260408120546126f157508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610a59565b506000610a59565b60006001600160e01b03198216636cdb3d1360e11b148061272a57506001600160e01b031982166303a24d0760e21b145b80610a595750610a5982611f7b565b60006001600160e01b03198216637965db0b60e01b1480610a5957506301ffc9a760e01b6001600160e01b0319831614610a59565b60008183511161278057506000610a59565b600061278c8484612d41565b90506127ac8461279c8386613da8565b6127a7906001613da8565b61276e565b6127b7858584612dbc565b6040805160208101939093528201526060016040516020818303038152906040528051906020012091505092915050565b6001600160a01b0384163b15610f7c5760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061282c9089908990889088908890600401613ee6565b6020604051808303816000875af1925050508015612867575060408051601f3d908101601f1916820190925261286491810190613f38565b60015b61291c57612873613f55565b806308c379a0036128ac5750612887613f71565b8061289257506128ae565b8060405162461bcd60e51b8152600401610a2b91906132b2565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d4552433131353560448201527f526563656976657220696d706c656d656e7465720000000000000000000000006064820152608401610a2b565b6001600160e01b0319811663bc197c8160e01b14610fa65760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b6064820152608401610a2b565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16610d2a576129be81612de0565b6129c9836020612df2565b6040516020016129da929190613ffb565b60408051601f198184030181529082905262461bcd60e51b8252610a2b916004016132b2565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1615610d2a576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610d59836001600160a01b038416612f9b565b60065460ff16610e045760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610a2b565b60065460ff1615610e045760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610a2b565b6000826000018281548110612b5057612b50613b8e565b9060005260206000200154905092915050565b6000612b76826301ffc9a760e01b612b96565b8015610a595750612b8f826001600160e01b0319612b96565b1592915050565b604080516001600160e01b03198316602480830191909152825180830390910181526044909101909152602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166301ffc9a760e01b178152825160009392849283928392918391908a617530fa92503d91506000519050828015612c1d575060208210155b8015612c295750600081115b979650505050505050565b6001600160a01b038416612c945760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610a2b565b336000612ca08561308e565b90506000612cad8561308e565b905060008681526002602090815260408083206001600160a01b038b16845290915281208054879290612ce1908490613da8565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610fa6836000898989896130d9565b6000805b8351612d518285613da8565b14158015612da5575083612d658285613da8565b81518110612d7557612d75613b8e565b6020910101517fff0000000000000000000000000000000000000000000000000000000000000016601760f91b14155b15610d595780612db481613bba565b915050612d45565b8251600090612dcb8385613da8565b1115612dd657600080fd5b5091016020012090565b6060610a596001600160a01b03831660145b60606000612e0183600261407c565b612e0c906002613da8565b67ffffffffffffffff811115612e2457612e246132c5565b6040519080825280601f01601f191660200182016040528015612e4e576020820181803683370190505b509050600360fc1b81600081518110612e6957612e69613b8e565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612e9857612e98613b8e565b60200101906001600160f81b031916908160001a9053506000612ebc84600261407c565b612ec7906001613da8565b90505b6001811115612f4c577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110612f0857612f08613b8e565b1a60f81b828281518110612f1e57612f1e613b8e565b60200101906001600160f81b031916908160001a90535060049490941c93612f4581614093565b9050612eca565b508315610d595760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610a2b565b60008181526001830160205260408120548015613084576000612fbf6001836140aa565b8554909150600090612fd3906001906140aa565b9050818114613038576000866000018281548110612ff357612ff3613b8e565b906000526020600020015490508087600001848154811061301657613016613b8e565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080613049576130496140bd565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610a59565b6000915050610a59565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106130c8576130c8613b8e565b602090810291909101015292915050565b6001600160a01b0384163b15610f7c5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061311d90899089908890889088906004016140d3565b6020604051808303816000875af1925050508015613158575060408051601f3d908101601f1916820190925261315591810190613f38565b60015b61316457612873613f55565b6001600160e01b0319811663f23a6e6160e01b14610fa65760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b6064820152608401610a2b565b6001600160a01b03811681146122e457600080fd5b600080604083850312156131fd57600080fd5b8235613208816131d5565b946020939093013593505050565b6001600160e01b0319811681146122e457600080fd5b60006020828403121561323e57600080fd5b8135610d5981613216565b60006020828403121561325b57600080fd5b5035919050565b60005b8381101561327d578181015183820152602001613265565b50506000910152565b6000815180845261329e816020860160208601613262565b601f01601f19169290920160200192915050565b602081526000610d596020830184613286565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715613301576133016132c5565b6040525050565b600067ffffffffffffffff821115613322576133226132c5565b50601f01601f191660200190565b600082601f83011261334157600080fd5b813561334c81613308565b60405161335982826132db565b82815285602084870101111561336e57600080fd5b82602086016020830137600092810160200192909252509392505050565b600080600080608085870312156133a257600080fd5b843567ffffffffffffffff8111156133b957600080fd5b6133c587828801613330565b94505060208501356133d6816131d5565b925060408501356133e6816131d5565b915060608501356133f6816131d5565b939692955090935050565b600067ffffffffffffffff82111561341b5761341b6132c5565b5060051b60200190565b600082601f83011261343657600080fd5b8135602061344382613401565b60405161345082826132db565b83815260059390931b850182019282810191508684111561347057600080fd5b8286015b8481101561348b5780358352918301918301613474565b509695505050505050565b600080600080600060a086880312156134ae57600080fd5b85356134b9816131d5565b945060208601356134c9816131d5565b9350604086013567ffffffffffffffff808211156134e657600080fd5b6134f289838a01613425565b9450606088013591508082111561350857600080fd5b61351489838a01613425565b9350608088013591508082111561352a57600080fd5b5061353788828901613330565b9150509295509295909350565b6000806040838503121561355757600080fd5b823591506020830135613569816131d5565b809150509250929050565b6000806040838503121561358757600080fd5b823567ffffffffffffffff81111561359e57600080fd5b6135aa85828601613330565b9250506020830135613569816131d5565b600080604083850312156135ce57600080fd5b823567ffffffffffffffff808211156135e657600080fd5b818501915085601f8301126135fa57600080fd5b8135602061360782613401565b60405161361482826132db565b83815260059390931b850182019282810191508984111561363457600080fd5b948201945b8386101561365b57853561364c816131d5565b82529482019490820190613639565b9650508601359250508082111561367157600080fd5b5061367e85828601613425565b9150509250929050565b600081518084526020808501945080840160005b838110156136b85781518752958201959082019060010161369c565b509495945050505050565b602081526000610d596020830184613688565b60008083601f8401126136e857600080fd5b50813567ffffffffffffffff81111561370057600080fd5b60208301915083602082850101111561371857600080fd5b9250929050565b6000806000806060858703121561373557600080fd5b843567ffffffffffffffff8082111561374d57600080fd5b61375988838901613330565b9550602087013591508082111561376f57600080fd5b61377b88838901613330565b9450604087013591508082111561379157600080fd5b5061379e878288016136d6565b95989497509550505050565b6000806000806000608086880312156137c257600080fd5b853567ffffffffffffffff808211156137da57600080fd5b6137e689838a01613330565b965060208801359150808211156137fc57600080fd5b61380889838a01613330565b95506040880135915061381a826131d5565b9093506060870135908082111561383057600080fd5b5061383d888289016136d6565b969995985093965092949392505050565b80151581146122e457600080fd5b6000806040838503121561386f57600080fd5b8235915060208301356135698161384e565b6000806000806060858703121561389757600080fd5b8435935060208501359250604085013567ffffffffffffffff8111156138bc57600080fd5b61379e878288016136d6565b6000602082840312156138da57600080fd5b813567ffffffffffffffff8111156138f157600080fd5b611d8584828501613330565b6000806040838503121561391057600080fd5b823567ffffffffffffffff81111561392757600080fd5b61393385828601613330565b92505060208301356135698161384e565b6000806040838503121561395757600080fd5b50508035926020909101359150565b60008060008060006080868803121561397e57600080fd5b85359450602086013593506040860135613997816131d5565b9250606086013567ffffffffffffffff8111156139b357600080fd5b61383d888289016136d6565b6000806000604084860312156139d457600080fd5b83359250602084013567ffffffffffffffff8111156139f257600080fd5b6139fe868287016136d6565b9497909650939450505050565b60008060408385031215613a1e57600080fd5b8235613a29816131d5565b915060208301356135698161384e565b600080600060408486031215613a4e57600080fd5b833567ffffffffffffffff80821115613a6657600080fd5b613a7287838801613330565b94506020860135915080821115613a8857600080fd5b506139fe868287016136d6565b60008060008060808587031215613aab57600080fd5b8435935060208501356133d6816131d5565b60008060408385031215613ad057600080fd5b8235613adb816131d5565b91506020830135613569816131d5565b600080600080600060a08688031215613b0357600080fd5b8535613b0e816131d5565b94506020860135613b1e816131d5565b93506040860135925060608601359150608086013567ffffffffffffffff811115613b4857600080fd5b61353788828901613330565b600181811c90821680613b6857607f821691505b602082108103613b8857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201613bcc57613bcc613ba4565b5060010190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b848152836020820152606060408201526000613c1c606083018486613bd3565b9695505050505050565b600060208284031215613c3857600080fd5b8151610d598161384e565b86815285602082015260006001600160a01b03808716604084015280861660608401525060a06080830152613c7c60a083018486613bd3565b98975050505050505050565b8581528460208201526001600160a01b0384166040820152608060608201526000612c29608083018486613bd3565b600080600060608486031215613ccc57600080fd5b8351613cd7816131d5565b602085015160408601519194509250613cef816131d5565b809150509250925092565b600060208284031215613d0c57600080fd5b5051919050565b600060208284031215613d2557600080fd5b8151610d59816131d5565b600060208284031215613d4257600080fd5b815167ffffffffffffffff811115613d5957600080fd5b8201601f81018413613d6a57600080fd5b8051613d7581613308565b604051613d8282826132db565b828152866020848601011115613d9757600080fd5b613c1c836020830160208701613262565b80820180821115610a5957610a59613ba4565b604081526000613dce6040830185613688565b8281036020840152610b9d8185613688565b601f821115610c8657600081815260208120601f850160051c81016020861015613e075750805b601f850160051c820191505b81811015610f7c57828155600101613e13565b67ffffffffffffffff831115613e3e57613e3e6132c5565b613e5283613e4c8354613b54565b83613de0565b6000601f841160018114613e865760008515613e6e5750838201355b600019600387901b1c1916600186901b178355610bbf565b600083815260209020601f19861690835b82811015613eb75786850135825560209485019460019092019101613e97565b5086821015613ed45760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b60006001600160a01b03808816835280871660208401525060a06040830152613f1260a0830186613688565b8281036060840152613f248186613688565b90508281036080840152613c7c8185613286565b600060208284031215613f4a57600080fd5b8151610d5981613216565b600060033d1115613f6e5760046000803e5060005160e01c5b90565b600060443d1015613f7f5790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715613faf57505050505090565b8285019150815181811115613fc75750505050505090565b843d8701016020828501011115613fe15750505050505090565b613ff0602082860101876132db565b509095945050505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614033816017850160208801613262565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351614070816028840160208801613262565b01602801949350505050565b8082028115828204841417610a5957610a59613ba4565b6000816140a2576140a2613ba4565b506000190190565b81810381811115610a5957610a59613ba4565b634e487b7160e01b600052603160045260246000fd5b60006001600160a01b03808816835280871660208401525084604083015283606083015260a06080830152612c2960a083018461328656fea164736f6c6343000811000a",
  "deployedBytecode": "0x6080604052600436106102f15760003560e01c80638308af031161018f578063bb2b1e82116100e1578063defa45af1161008a578063f1cb7e0611610064578063f1cb7e0614610951578063f242432a14610971578063fdfb410c1461099157600080fd5b8063defa45af146108b4578063e63ab1e9146108d4578063e985e9c51461090857600080fd5b8063d4ec5bbc116100bb578063d4ec5bbc146107ea578063d547741f1461080a578063d919713f1461082a57600080fd5b8063bb2b1e821461078a578063ca15c873146107aa578063cf4c5d69146107ca57600080fd5b80639c9925f511610143578063a217fddf1161011d578063a217fddf14610735578063a22cb4651461074a578063a484fba61461076a57600080fd5b80639c9925f5146106e25780639e5388ba14610702578063a062d1f71461071557600080fd5b80638a86edba116101745780638a86edba1461065e5780639010d07c1461067e57806391d148541461069e57600080fd5b80638308af03146106295780638456cb591461064957600080fd5b80633f4ba83a11610248578063620440e8116101fc578063784beff2116101d6578063784beff2146105c95780637d73b231146105e95780637e6536121461060957600080fd5b8063620440e814610560578063699f200f14610573578063784609f8146105a957600080fd5b80634e1273f41161022d5780634e1273f4146104fb578063516877f6146105285780635c975abb1461054857600080fd5b80633f4ba83a146104c65780633f774c4d146104db57600080fd5b8063248a9ca3116102aa578063348f18f711610284578063348f18f71461046657806336568abe146104865780633b3b57de146104a657600080fd5b8063248a9ca3146103f65780632eb2c2d6146104265780632f2ff15d1461044657600080fd5b8063022c977f116102db578063022c977f146103595780630e89341c146103a757806310c68cd8146103d457600080fd5b8062fdd58e146102f657806301ffc9a714610329575b600080fd5b34801561030257600080fd5b506103166103113660046131ea565b6109b1565b6040519081526020015b60405180910390f35b34801561033557600080fd5b5061034961034436600461322c565b610a5f565b6040519015158152602001610320565b34801561036557600080fd5b5061038f610374366004613249565b6000908152600a60205260409020546001600160a01b031690565b6040516001600160a01b039091168152602001610320565b3480156103b357600080fd5b506103c76103c2366004613249565b610ac1565b60405161032091906132b2565b3480156103e057600080fd5b506103f46103ef36600461338c565b610ba6565b005b34801561040257600080fd5b50610316610411366004613249565b60009081526020819052604090206001015490565b34801561043257600080fd5b506103f4610441366004613496565b610bc6565b34801561045257600080fd5b506103f4610461366004613544565b610c61565b34801561047257600080fd5b506103f4610481366004613574565b610c8b565b34801561049257600080fd5b506103f46104a1366004613544565b610ca2565b3480156104b257600080fd5b5061038f6104c1366004613249565b610d2e565b3480156104d257600080fd5b506103f4610d60565b3480156104e757600080fd5b506103f46104f6366004613574565b610e06565b34801561050757600080fd5b5061051b6105163660046135bb565b610e1d565b60405161032091906136c3565b34801561053457600080fd5b506103f461054336600461371f565b610f5b565b34801561055457600080fd5b5060065460ff16610349565b6103f461056e3660046137aa565b610f84565b34801561057f57600080fd5b5061038f61058e366004613249565b6007602052600090815260409020546001600160a01b031681565b3480156105b557600080fd5b506103f46105c436600461385c565b610faf565b3480156105d557600080fd5b506103f46105e4366004613881565b61106e565b3480156105f557600080fd5b5060095461038f906001600160a01b031681565b34801561061557600080fd5b506103f46106243660046138c8565b61115f565b34801561063557600080fd5b506103f46106443660046138fd565b611175565b34801561065557600080fd5b506103f461118c565b34801561066a57600080fd5b506103f4610679366004613574565b611230565b34801561068a57600080fd5b5061038f610699366004613944565b611247565b3480156106aa57600080fd5b506103496106b9366004613544565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b3480156106ee57600080fd5b506103f46106fd366004613544565b61125f565b6103f4610710366004613966565b61133a565b34801561072157600080fd5b506103f46107303660046139bf565b6117fe565b34801561074157600080fd5b50610316600081565b34801561075657600080fd5b506103f4610765366004613a0b565b611848565b34801561077657600080fd5b506103f4610785366004613a39565b611853565b34801561079657600080fd5b5061038f6107a53660046138c8565b61186b565b3480156107b657600080fd5b506103166107c5366004613249565b611897565b3480156107d657600080fd5b506103f46107e5366004613a95565b6118ae565b3480156107f657600080fd5b506103f4610805366004613544565b611b71565b34801561081657600080fd5b506103f4610825366004613544565b611c07565b34801561083657600080fd5b5061087f610845366004613249565b600a602052600090815260409020805460018201546002909201546001600160a01b0391821692821691811690600160a01b900460ff1684565b60405161032094939291906001600160a01b039485168152928416602084015292166040820152901515606082015260800190565b3480156108c057600080fd5b506103f46108cf366004613249565b611c2c565b3480156108e057600080fd5b506103167f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b34801561091457600080fd5b50610349610923366004613abd565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205460ff1690565b34801561095d57600080fd5b506103c761096c366004613944565b611cd8565b34801561097d57600080fd5b506103f461098c366004613aeb565b611d8d565b34801561099d57600080fd5b506103f46109ac366004613544565b611da6565b60006001600160a01b038316610a345760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201527f616c6964206f776e65720000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b5060008181526002602090815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b031982166398280fbb60e01b1480610a845750610a8482611f34565b80610a935750610a9382611f70565b80610aa25750610aa282611f7b565b80610a5957506301ffc9a760e01b6001600160e01b0319831614610a59565b6fffffffffffffffffffffffffffffffff198116600081815260056020526040902060010180546060929182918190610af990613b54565b159050610b9457808054610b0c90613b54565b80601f0160208091040260200160405190810160405280929190818152602001828054610b3890613b54565b8015610b855780601f10610b5a57610100808354040283529160200191610b85565b820191906000526020600020905b815481529060010190602001808311610b6857829003601f168201915b50505050509350505050919050565b610b9d85611fa0565b95945050505050565b6000610bb185612034565b9050610bbf818585856118ae565b5050505050565b6001600160a01b038516331480610be25750610be28533610923565b610c545760405162461bcd60e51b815260206004820152602e60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206f7220617070726f7665640000000000000000000000000000000000006064820152608401610a2b565b610bbf8585858585612041565b600082815260208190526040902060010154610c7c816122da565b610c8683836122e7565b505050565b6000610c9683612034565b9050610c868183611b71565b6001600160a01b0381163314610d205760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610a2b565b610d2a8282612309565b5050565b600080610d3c83603c611cd8565b90508051600003610d505750600092915050565b610d598161232b565b9392505050565b610d8a7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a336106b9565b610dfc5760405162461bcd60e51b815260206004820152602b60248201527f454e534775696c64733a206d75737420686176652070617573657220726f6c6560448201527f20746f20756e70617573650000000000000000000000000000000000000000006064820152608401610a2b565b610e04612353565b565b6000610e1183612034565b9050610c868183611da6565b60608151835114610e965760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d6174636800000000000000000000000000000000000000000000006064820152608401610a2b565b6000835167ffffffffffffffff811115610eb257610eb26132c5565b604051908082528060200260200182016040528015610edb578160200160208202803683370190505b50905060005b8451811015610f5357610f26858281518110610eff57610eff613b8e565b6020026020010151858381518110610f1957610f19613b8e565b60200260200101516109b1565b828281518110610f3857610f38613b8e565b6020908102919091010152610f4c81613bba565b9050610ee1565b509392505050565b6000610f6685612034565b84516020860120909150610f7c8282868661106e565b505050505050565b6000610f8f86612034565b85516020870120909150610fa6828287878761133a565b50505050505050565b6000828152600a602052604090205482906001600160a01b03163314610fe857604051630e64a9cf60e21b815260040160405180910390fd5b6000838152600a6020526040908190206002018054841515600160a01b027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff9091161790555183907fcddecc2f17a0c961cfad3af69d94ee8d5ece1542dc95fd53f898ab77781272c49061106190851515815260200190565b60405180910390a2505050565b6000848152600a602052604090819020600201549051630c5f23c360e41b81526001600160a01b0390911690819063c5f23c30906110b6908890889088908890600401613bfc565b6020604051808303816000875af11580156110d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f99190613c26565b6111165760405163645b259360e11b815260040160405180910390fd5b60408051602080820187905281830188905282518083038401815260609092018352815191810191909120600090815260079091522080546001600160a01b0319169055610bbf565b600061116a82612034565b9050610d2a81611c2c565b600061118083612034565b9050610c868183610faf565b6111b67f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a336106b9565b6112285760405162461bcd60e51b815260206004820152602960248201527f454e534775696c64733a206d75737420686176652070617573657220726f6c6560448201527f20746f20706175736500000000000000000000000000000000000000000000006064820152608401610a2b565b610e046123a5565b600061123b83612034565b9050610c86818361125f565b6000828152600160205260408120610d5990836123e2565b6000828152600a602052604090205482906001600160a01b0316331461129857604051630e64a9cf60e21b815260040160405180910390fd5b6112b26001600160a01b038316632763ed8d60e21b6123ee565b6112da5760405163592e05dd60e11b81526001600160a01b0383166004820152602401610a2b565b6000838152600a602090815260409182902060010180546001600160a01b0319166001600160a01b038616908117909155915191825284917fe3e6191059989ec6f70a99fca0dfbb5c0cac787bba9232a0f364180133d3e7159101611061565b61134261240a565b6000858152600a6020526040902060020154600160a01b900460ff1661137b57604051634db8e46160e01b815260040160405180910390fd5b6040805160208082018890528183018790528251808303840181526060909201909252805191012060006113ae82610d2e565b6001600160a01b0316146113d557604051630344c41960e11b815260040160405180910390fd5b6000868152600a60205260409020600201546001600160a01b03168063f02cbfbb8888338989896040518763ffffffff1660e01b815260040161141d96959493929190613c43565b6020604051808303816000875af115801561143c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114609190613c26565b61147d576040516302b7adcd60e11b815260040160405180910390fd5b6000878152600a6020526040812060010154819081906001600160a01b0316639c707f938b8b338b8b6040518663ffffffff1660e01b81526004016114c6959493929190613c88565b606060405180830381865afa1580156114e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115079190613cb7565b9250925092508160001461167b576001600160a01b0383166115bd57813414611543576040516320c4d7fb60e21b815260040160405180910390fd5b6000816001600160a01b03163460405160006040518083038185875af1925050503d8060008114611590576040519150601f19603f3d011682016040523d82523d6000602084013e611595565b606091505b50509050806115b7576040516320c4d7fb60e21b815260040160405180910390fd5b5061167b565b6001600160a01b0383166323b872dd336040516001600160e01b031960e084901b1681526001600160a01b0391821660048201529084166024820152604481018590526064016020604051808303816000875af192505050801561163e575060408051601f3d908101601f1916820190925261163b91810190613c26565b60015b61165b576040516320c4d7fb60e21b815260040160405180910390fd5b80611679576040516320c4d7fb60e21b815260040160405180910390fd5b505b6116858a89612463565b604051638fcae51d60e01b81526000906001600160a01b03861690638fcae51d906116be908e908e9033908f908f908f90600401613c43565b6020604051808303816000875af11580156116dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117019190613cfa565b9050801561174e576040805160208082018490528183018e905282518083038401815260609092018352815191810191909120600090815260079091522080546001600160a01b03191690555b6009546040516305ef2c7f60e41b8152600481018d9052602481018c905230604482018190526064820152600060848201526001600160a01b0390911690635ef2c7f09060a401600060405180830381600087803b1580156117af57600080fd5b505af11580156117c3573d6000803e3d6000fd5b505050600087815260076020526040902080546001600160a01b0319166001600160a01b038c1617905550505050505050610bbf6001600855565b6000838152600a602052604090205483906001600160a01b0316331461183757604051630e64a9cf60e21b815260040160405180910390fd5b611842848484612541565b50505050565b610d2a338383612573565b600061185e84612034565b90506118428184846117fe565b60008061187783612034565b6000818152600a60205260409020549091506001600160a01b0316610d59565b6000818152600160205260408120610a5990612667565b336009546040516302571be360e01b8152600481018790526001600160a01b0392831692909116906302571be390602401602060405180830381865afa1580156118fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119209190613d13565b6001600160a01b031614611947576040516326fdee4b60e11b815260040160405180910390fd5b6000848152600a60205260409020600101546001600160a01b03161561198057604051630ea075bf60e21b815260040160405180910390fd5b6009546001600160a01b031663e985e9c5336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604401602060405180830381865afa1580156119dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a009190613c26565b611a1d57604051636fd1a8ab60e01b815260040160405180910390fd5b611a376001600160a01b038316632763ed8d60e21b6123ee565b611a5f5760405163592e05dd60e11b81526001600160a01b0383166004820152602401610a2b565b611a796001600160a01b03821663bbebaf3160e01b6123ee565b611aa15760405163592e05dd60e11b81526001600160a01b0382166004820152602401610a2b565b604080516080810182526001600160a01b038086168252848116602080840191825285831684860190815260016060860181815260008c8152600a909452878420965187549087166001600160a01b0319918216178855945191870180549287169290951691909117909355516002909401805492511515600160a01b0274ffffffffffffffffffffffffffffffffffffffffff199093169490931693909317179055905185917f10906fae603eebfac53ddc0f103bee8a044dd7643c425c7a90f921dfa15ef62c91a250505050565b6000828152600a602052604090205482906001600160a01b03163314611baa57604051630e64a9cf60e21b815260040160405180910390fd5b6000838152600a602090815260409182902080546001600160a01b0319166001600160a01b038616908117909155915191825284917f44ae681d782ebebc775c8c23cc18621486d68ac94ae4a8271f59892d6c8cec239101611061565b600082815260208190526040902060010154611c22816122da565b610c868383612309565b6000818152600a602052604090205481906001600160a01b03163314611c6557604051630e64a9cf60e21b815260040160405180910390fd5b6000828152600a602052604080822080546001600160a01b031990811682556001820180549091169055600201805474ffffffffffffffffffffffffffffffffffffffffff191690555183917fa8167a993f10ce22abac512a74e81171d978a9d52acc66d0a46d3ff05f21ca0b91a25050565b6000828152600760205260409020546060906001600160a01b031680611d7c576006546040516378e5bf0360e11b815260048101869052602481018590526101009091046001600160a01b03169063f1cb7e0690604401600060405180830381865afa158015611d4c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611d749190810190613d30565b915050610a59565b611d8581612671565b949350505050565b6040516338730eb560e11b815260040160405180910390fd5b6000828152600a602052604090205482906001600160a01b03163314611ddf57604051630e64a9cf60e21b815260040160405180910390fd5b611df96001600160a01b03831663bbebaf3160e01b6123ee565b611e215760405163592e05dd60e11b81526001600160a01b0383166004820152602401610a2b565b6000838152600a602090815260409182902060020180546001600160a01b0319166001600160a01b038616908117909155915191825284917f276dcdaae75cd5831871106265565c93b5a5ba18286a11f7f661826476a89e5d9101611061565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16610d2a576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055611edb3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610d59836001600160a01b0384166126aa565b60006001600160e01b03198216631d9dabef60e11b1480611f6557506001600160e01b031982166378e5bf0360e11b145b80610a595750610a59825b6000610a59826126f9565b60006001600160e01b03198216635a05180f60e01b1480610a595750610a5982612739565b606060048054611faf90613b54565b80601f0160208091040260200160405190810160405280929190818152602001828054611fdb90613b54565b80156120285780601f10611ffd57610100808354040283529160200191612028565b820191906000526020600020905b81548152906001019060200180831161200b57829003601f168201915b50505050509050919050565b6000610a5982600061276e565b81518351146120b85760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060448201527f6d69736d617463680000000000000000000000000000000000000000000000006064820152608401610a2b565b6001600160a01b0384166121345760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610a2b565b3360005b845181101561227457600085828151811061215557612155613b8e565b60200260200101519050600085838151811061217357612173613b8e565b60209081029190910181015160008481526002835260408082206001600160a01b038e16835290935291909120549091508181101561221a5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201527f72207472616e73666572000000000000000000000000000000000000000000006064820152608401610a2b565b60008381526002602090815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290612259908490613da8565b925050819055505050508061226d90613bba565b9050612138565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516122c4929190613dbb565b60405180910390a4610f7c8187878787876127e8565b6122e4813361298d565b50565b6122f18282611e81565b6000828152600160205260409020610c869082611f1f565b6123138282612a00565b6000828152600160205260409020610c869082612a7f565b6000815160141461233b57600080fd5b50602001516c01000000000000000000000000900490565b61235b612a94565b6006805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6123ad612ae6565b6006805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586123883390565b6000610d598383612b39565b60006123f983612b63565b8015610d595750610d598383612b96565b60026008540361245c5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a2b565b6002600855565b6fffffffffffffffffffffffffffffffff19821660009081526005602052604090205482906fffffffffffffffffffffffffffffffff81106124e75760405162461bcd60e51b815260206004820152601460248201527f746f6b656e436f756e7465724f766572666c6f770000000000000000000000006044820152606401610a2b565b6fffffffffffffffffffffffffffffffff1982166000908152600560205260409020805460010190556fffffffffffffffffffffffffffffffff19841660006125308383613da8565b90506060610fa68683600184612c34565b6fffffffffffffffffffffffffffffffff19831660009081526005602052604090208390600101610bbf838583613e26565b816001600160a01b0316836001600160a01b0316036125fa5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c6600000000000000000000000000000000000000000000006064820152608401610a2b565b6001600160a01b03838116600081815260036020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6000610a59825490565b6040805160148082528183019092526060916020820181803683375050506c010000000000000000000000009290920260208301525090565b60008181526001830160205260408120546126f157508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610a59565b506000610a59565b60006001600160e01b03198216636cdb3d1360e11b148061272a57506001600160e01b031982166303a24d0760e21b145b80610a595750610a5982611f7b565b60006001600160e01b03198216637965db0b60e01b1480610a5957506301ffc9a760e01b6001600160e01b0319831614610a59565b60008183511161278057506000610a59565b600061278c8484612d41565b90506127ac8461279c8386613da8565b6127a7906001613da8565b61276e565b6127b7858584612dbc565b6040805160208101939093528201526060016040516020818303038152906040528051906020012091505092915050565b6001600160a01b0384163b15610f7c5760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061282c9089908990889088908890600401613ee6565b6020604051808303816000875af1925050508015612867575060408051601f3d908101601f1916820190925261286491810190613f38565b60015b61291c57612873613f55565b806308c379a0036128ac5750612887613f71565b8061289257506128ae565b8060405162461bcd60e51b8152600401610a2b91906132b2565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d4552433131353560448201527f526563656976657220696d706c656d656e7465720000000000000000000000006064820152608401610a2b565b6001600160e01b0319811663bc197c8160e01b14610fa65760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b6064820152608401610a2b565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16610d2a576129be81612de0565b6129c9836020612df2565b6040516020016129da929190613ffb565b60408051601f198184030181529082905262461bcd60e51b8252610a2b916004016132b2565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1615610d2a576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610d59836001600160a01b038416612f9b565b60065460ff16610e045760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610a2b565b60065460ff1615610e045760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610a2b565b6000826000018281548110612b5057612b50613b8e565b9060005260206000200154905092915050565b6000612b76826301ffc9a760e01b612b96565b8015610a595750612b8f826001600160e01b0319612b96565b1592915050565b604080516001600160e01b03198316602480830191909152825180830390910181526044909101909152602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166301ffc9a760e01b178152825160009392849283928392918391908a617530fa92503d91506000519050828015612c1d575060208210155b8015612c295750600081115b979650505050505050565b6001600160a01b038416612c945760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610a2b565b336000612ca08561308e565b90506000612cad8561308e565b905060008681526002602090815260408083206001600160a01b038b16845290915281208054879290612ce1908490613da8565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610fa6836000898989896130d9565b6000805b8351612d518285613da8565b14158015612da5575083612d658285613da8565b81518110612d7557612d75613b8e565b6020910101517fff0000000000000000000000000000000000000000000000000000000000000016601760f91b14155b15610d595780612db481613bba565b915050612d45565b8251600090612dcb8385613da8565b1115612dd657600080fd5b5091016020012090565b6060610a596001600160a01b03831660145b60606000612e0183600261407c565b612e0c906002613da8565b67ffffffffffffffff811115612e2457612e246132c5565b6040519080825280601f01601f191660200182016040528015612e4e576020820181803683370190505b509050600360fc1b81600081518110612e6957612e69613b8e565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612e9857612e98613b8e565b60200101906001600160f81b031916908160001a9053506000612ebc84600261407c565b612ec7906001613da8565b90505b6001811115612f4c577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110612f0857612f08613b8e565b1a60f81b828281518110612f1e57612f1e613b8e565b60200101906001600160f81b031916908160001a90535060049490941c93612f4581614093565b9050612eca565b508315610d595760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610a2b565b60008181526001830160205260408120548015613084576000612fbf6001836140aa565b8554909150600090612fd3906001906140aa565b9050818114613038576000866000018281548110612ff357612ff3613b8e565b906000526020600020015490508087600001848154811061301657613016613b8e565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080613049576130496140bd565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610a59565b6000915050610a59565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106130c8576130c8613b8e565b602090810291909101015292915050565b6001600160a01b0384163b15610f7c5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061311d90899089908890889088906004016140d3565b6020604051808303816000875af1925050508015613158575060408051601f3d908101601f1916820190925261315591810190613f38565b60015b61316457612873613f55565b6001600160e01b0319811663f23a6e6160e01b14610fa65760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b6064820152608401610a2b565b6001600160a01b03811681146122e457600080fd5b600080604083850312156131fd57600080fd5b8235613208816131d5565b946020939093013593505050565b6001600160e01b0319811681146122e457600080fd5b60006020828403121561323e57600080fd5b8135610d5981613216565b60006020828403121561325b57600080fd5b5035919050565b60005b8381101561327d578181015183820152602001613265565b50506000910152565b6000815180845261329e816020860160208601613262565b601f01601f19169290920160200192915050565b602081526000610d596020830184613286565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715613301576133016132c5565b6040525050565b600067ffffffffffffffff821115613322576133226132c5565b50601f01601f191660200190565b600082601f83011261334157600080fd5b813561334c81613308565b60405161335982826132db565b82815285602084870101111561336e57600080fd5b82602086016020830137600092810160200192909252509392505050565b600080600080608085870312156133a257600080fd5b843567ffffffffffffffff8111156133b957600080fd5b6133c587828801613330565b94505060208501356133d6816131d5565b925060408501356133e6816131d5565b915060608501356133f6816131d5565b939692955090935050565b600067ffffffffffffffff82111561341b5761341b6132c5565b5060051b60200190565b600082601f83011261343657600080fd5b8135602061344382613401565b60405161345082826132db565b83815260059390931b850182019282810191508684111561347057600080fd5b8286015b8481101561348b5780358352918301918301613474565b509695505050505050565b600080600080600060a086880312156134ae57600080fd5b85356134b9816131d5565b945060208601356134c9816131d5565b9350604086013567ffffffffffffffff808211156134e657600080fd5b6134f289838a01613425565b9450606088013591508082111561350857600080fd5b61351489838a01613425565b9350608088013591508082111561352a57600080fd5b5061353788828901613330565b9150509295509295909350565b6000806040838503121561355757600080fd5b823591506020830135613569816131d5565b809150509250929050565b6000806040838503121561358757600080fd5b823567ffffffffffffffff81111561359e57600080fd5b6135aa85828601613330565b9250506020830135613569816131d5565b600080604083850312156135ce57600080fd5b823567ffffffffffffffff808211156135e657600080fd5b818501915085601f8301126135fa57600080fd5b8135602061360782613401565b60405161361482826132db565b83815260059390931b850182019282810191508984111561363457600080fd5b948201945b8386101561365b57853561364c816131d5565b82529482019490820190613639565b9650508601359250508082111561367157600080fd5b5061367e85828601613425565b9150509250929050565b600081518084526020808501945080840160005b838110156136b85781518752958201959082019060010161369c565b509495945050505050565b602081526000610d596020830184613688565b60008083601f8401126136e857600080fd5b50813567ffffffffffffffff81111561370057600080fd5b60208301915083602082850101111561371857600080fd5b9250929050565b6000806000806060858703121561373557600080fd5b843567ffffffffffffffff8082111561374d57600080fd5b61375988838901613330565b9550602087013591508082111561376f57600080fd5b61377b88838901613330565b9450604087013591508082111561379157600080fd5b5061379e878288016136d6565b95989497509550505050565b6000806000806000608086880312156137c257600080fd5b853567ffffffffffffffff808211156137da57600080fd5b6137e689838a01613330565b965060208801359150808211156137fc57600080fd5b61380889838a01613330565b95506040880135915061381a826131d5565b9093506060870135908082111561383057600080fd5b5061383d888289016136d6565b969995985093965092949392505050565b80151581146122e457600080fd5b6000806040838503121561386f57600080fd5b8235915060208301356135698161384e565b6000806000806060858703121561389757600080fd5b8435935060208501359250604085013567ffffffffffffffff8111156138bc57600080fd5b61379e878288016136d6565b6000602082840312156138da57600080fd5b813567ffffffffffffffff8111156138f157600080fd5b611d8584828501613330565b6000806040838503121561391057600080fd5b823567ffffffffffffffff81111561392757600080fd5b61393385828601613330565b92505060208301356135698161384e565b6000806040838503121561395757600080fd5b50508035926020909101359150565b60008060008060006080868803121561397e57600080fd5b85359450602086013593506040860135613997816131d5565b9250606086013567ffffffffffffffff8111156139b357600080fd5b61383d888289016136d6565b6000806000604084860312156139d457600080fd5b83359250602084013567ffffffffffffffff8111156139f257600080fd5b6139fe868287016136d6565b9497909650939450505050565b60008060408385031215613a1e57600080fd5b8235613a29816131d5565b915060208301356135698161384e565b600080600060408486031215613a4e57600080fd5b833567ffffffffffffffff80821115613a6657600080fd5b613a7287838801613330565b94506020860135915080821115613a8857600080fd5b506139fe868287016136d6565b60008060008060808587031215613aab57600080fd5b8435935060208501356133d6816131d5565b60008060408385031215613ad057600080fd5b8235613adb816131d5565b91506020830135613569816131d5565b600080600080600060a08688031215613b0357600080fd5b8535613b0e816131d5565b94506020860135613b1e816131d5565b93506040860135925060608601359150608086013567ffffffffffffffff811115613b4857600080fd5b61353788828901613330565b600181811c90821680613b6857607f821691505b602082108103613b8857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201613bcc57613bcc613ba4565b5060010190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b848152836020820152606060408201526000613c1c606083018486613bd3565b9695505050505050565b600060208284031215613c3857600080fd5b8151610d598161384e565b86815285602082015260006001600160a01b03808716604084015280861660608401525060a06080830152613c7c60a083018486613bd3565b98975050505050505050565b8581528460208201526001600160a01b0384166040820152608060608201526000612c29608083018486613bd3565b600080600060608486031215613ccc57600080fd5b8351613cd7816131d5565b602085015160408601519194509250613cef816131d5565b809150509250925092565b600060208284031215613d0c57600080fd5b5051919050565b600060208284031215613d2557600080fd5b8151610d59816131d5565b600060208284031215613d4257600080fd5b815167ffffffffffffffff811115613d5957600080fd5b8201601f81018413613d6a57600080fd5b8051613d7581613308565b604051613d8282826132db565b828152866020848601011115613d9757600080fd5b613c1c836020830160208701613262565b80820180821115610a5957610a59613ba4565b604081526000613dce6040830185613688565b8281036020840152610b9d8185613688565b601f821115610c8657600081815260208120601f850160051c81016020861015613e075750805b601f850160051c820191505b81811015610f7c57828155600101613e13565b67ffffffffffffffff831115613e3e57613e3e6132c5565b613e5283613e4c8354613b54565b83613de0565b6000601f841160018114613e865760008515613e6e5750838201355b600019600387901b1c1916600186901b178355610bbf565b600083815260209020601f19861690835b82811015613eb75786850135825560209485019460019092019101613e97565b5086821015613ed45760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b60006001600160a01b03808816835280871660208401525060a06040830152613f1260a0830186613688565b8281036060840152613f248186613688565b90508281036080840152613c7c8185613286565b600060208284031215613f4a57600080fd5b8151610d5981613216565b600060033d1115613f6e5760046000803e5060005160e01c5b90565b600060443d1015613f7f5790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715613faf57505050505090565b8285019150815181811115613fc75750505050505090565b843d8701016020828501011115613fe15750505050505090565b613ff0602082860101876132db565b509095945050505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614033816017850160208801613262565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351614070816028840160208801613262565b01602801949350505050565b8082028115828204841417610a5957610a59613ba4565b6000816140a2576140a2613ba4565b506000190190565b81810381811115610a5957610a59613ba4565b634e487b7160e01b600052603160045260246000fd5b60006001600160a01b03808816835280871660208401525084604083015283606083015260a06080830152612c2960a083018461328656fea164736f6c6343000811000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addr(bytes32)": {
        "params": {
          "node": "The ENS node to query."
        },
        "returns": {
          "_0": "The associated address."
        }
      },
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "AlreadyRegistered()": [
        {
          "notice": "Errors "
        }
      ]
    },
    "events": {
      "Registered(bytes32)": {
        "notice": "Events "
      }
    },
    "kind": "user",
    "methods": {
      "addr(bytes32)": {
        "notice": "Returns the address associated with an ENS node."
      },
      "ensRegistry()": {
        "notice": "State "
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 200,
        "contract": "contracts/ensGuilds/ENSGuilds.sol:ENSGuilds",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)195_storage)"
      },
      {
        "astId": 510,
        "contract": "contracts/ensGuilds/ENSGuilds.sol:ENSGuilds",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)4380_storage)"
      },
      {
        "astId": 905,
        "contract": "contracts/ensGuilds/ENSGuilds.sol:ENSGuilds",
        "label": "_balances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 911,
        "contract": "contracts/ensGuilds/ENSGuilds.sol:ENSGuilds",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 913,
        "contract": "contracts/ensGuilds/ENSGuilds.sol:ENSGuilds",
        "label": "_uri",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 6025,
        "contract": "contracts/ensGuilds/ENSGuilds.sol:ENSGuilds",
        "label": "guilds",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes16,t_struct(GuildTokenInfo)6020_storage)"
      },
      {
        "astId": 735,
        "contract": "contracts/ensGuilds/ENSGuilds.sol:ENSGuilds",
        "label": "_paused",
        "offset": 0,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 6213,
        "contract": "contracts/ensGuilds/ENSGuilds.sol:ENSGuilds",
        "label": "fallbackResolver",
        "offset": 1,
        "slot": "6",
        "type": "t_contract(IAddressResolver)175"
      },
      {
        "astId": 6217,
        "contract": "contracts/ensGuilds/ENSGuilds.sol:ENSGuilds",
        "label": "addresses",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 836,
        "contract": "contracts/ensGuilds/ENSGuilds.sol:ENSGuilds",
        "label": "_status",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 4719,
        "contract": "contracts/ensGuilds/ENSGuilds.sol:ENSGuilds",
        "label": "ensRegistry",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(ENS)136"
      },
      {
        "astId": 4724,
        "contract": "contracts/ensGuilds/ENSGuilds.sol:ENSGuilds",
        "label": "guilds",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_bytes32,t_struct(GuildInfo)4707_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes16": {
        "encoding": "inplace",
        "label": "bytes16",
        "numberOfBytes": "16"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ENS)136": {
        "encoding": "inplace",
        "label": "contract ENS",
        "numberOfBytes": "20"
      },
      "t_contract(FeePolicy)6416": {
        "encoding": "inplace",
        "label": "contract FeePolicy",
        "numberOfBytes": "20"
      },
      "t_contract(IAddressResolver)175": {
        "encoding": "inplace",
        "label": "contract IAddressResolver",
        "numberOfBytes": "20"
      },
      "t_contract(TagsAuthPolicy)6600": {
        "encoding": "inplace",
        "label": "contract TagsAuthPolicy",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes16,t_struct(GuildTokenInfo)6020_storage)": {
        "encoding": "mapping",
        "key": "t_bytes16",
        "label": "mapping(bytes16 => struct ENSGuildsToken.GuildTokenInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(GuildTokenInfo)6020_storage"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)4380_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)4380_storage"
      },
      "t_mapping(t_bytes32,t_struct(GuildInfo)4707_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ENSGuilds.GuildInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(GuildInfo)4707_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)195_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)195_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)4380_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 4379,
            "contract": "contracts/ensGuilds/ENSGuilds.sol:ENSGuilds",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)4065_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Counter)2716_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2715,
            "contract": "contracts/ensGuilds/ENSGuilds.sol:ENSGuilds",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(GuildInfo)4707_storage": {
        "encoding": "inplace",
        "label": "struct ENSGuilds.GuildInfo",
        "members": [
          {
            "astId": 4698,
            "contract": "contracts/ensGuilds/ENSGuilds.sol:ENSGuilds",
            "label": "admin",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4701,
            "contract": "contracts/ensGuilds/ENSGuilds.sol:ENSGuilds",
            "label": "feePolicy",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(FeePolicy)6416"
          },
          {
            "astId": 4704,
            "contract": "contracts/ensGuilds/ENSGuilds.sol:ENSGuilds",
            "label": "tagsAuthPolicy",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(TagsAuthPolicy)6600"
          },
          {
            "astId": 4706,
            "contract": "contracts/ensGuilds/ENSGuilds.sol:ENSGuilds",
            "label": "active",
            "offset": 20,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(GuildTokenInfo)6020_storage": {
        "encoding": "inplace",
        "label": "struct ENSGuildsToken.GuildTokenInfo",
        "members": [
          {
            "astId": 6017,
            "contract": "contracts/ensGuilds/ENSGuilds.sol:ENSGuilds",
            "label": "tokenIdTracker",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Counter)2716_storage"
          },
          {
            "astId": 6019,
            "contract": "contracts/ensGuilds/ENSGuilds.sol:ENSGuilds",
            "label": "templateURI",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)195_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 192,
            "contract": "contracts/ensGuilds/ENSGuilds.sol:ENSGuilds",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 194,
            "contract": "contracts/ensGuilds/ENSGuilds.sol:ENSGuilds",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)4065_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 4060,
            "contract": "contracts/ensGuilds/ENSGuilds.sol:ENSGuilds",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 4064,
            "contract": "contracts/ensGuilds/ENSGuilds.sol:ENSGuilds",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
