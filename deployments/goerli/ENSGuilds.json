{
  "address": "0xac0C325fDc7af8ce362E7b565e908BCc8AB4C821",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "defaultTokenMetadataUri",
          "type": "string"
        },
        {
          "internalType": "contract ENS",
          "name": "_ensRegistry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyRegistered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClaimUnauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ENSGuildsIsNotRegisteredOperator",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FeeError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GuildAdminOnly",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GuildNotActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GuildsTokenTransferNotAllowed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "InvalidPolicy",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidWildcardResolver",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotDomainOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RevokeUnauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TagAlreadyClaimed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "a",
          "type": "address"
        }
      ],
      "name": "AddrChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "coinType",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "newAddress",
          "type": "bytes"
        }
      ],
      "name": "AddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "guildId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "guildEnsNode",
          "type": "bytes32"
        }
      ],
      "name": "Deregistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "guildId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "feePolicy",
          "type": "address"
        }
      ],
      "name": "FeePolicyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "guildEnsNode",
          "type": "bytes32"
        }
      ],
      "name": "Registered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "guildId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "name": "SetActive",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "guildId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "tagHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "TagClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "guildId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "tagHash",
          "type": "bytes32"
        }
      ],
      "name": "TagRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "guildId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tagsAuthPolicy",
          "type": "address"
        }
      ],
      "name": "TagsAuthPolicyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "guildId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "uriTemplate",
          "type": "string"
        }
      ],
      "name": "TokenUriTemplateSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "addr",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "coinType",
          "type": "uint256"
        }
      ],
      "name": "addr",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "addresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "guildEnsName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tag",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "extraClaimArgs",
          "type": "bytes"
        }
      ],
      "name": "claimGuildTag",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "guildEnsNode",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "tag",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "extraClaimArgs",
          "type": "bytes"
        }
      ],
      "name": "claimGuildTag",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "guildEnsNode",
          "type": "bytes32"
        },
        {
          "internalType": "string[]",
          "name": "tags",
          "type": "string[]"
        },
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "extraClaimArgs",
          "type": "bytes[]"
        }
      ],
      "name": "claimGuildTagsBatch",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "guildEnsName",
          "type": "string"
        }
      ],
      "name": "deregisterGuild",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "ensNode",
          "type": "bytes32"
        }
      ],
      "name": "deregisterGuild",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ensRegistry",
      "outputs": [
        {
          "internalType": "contract ENS",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "guildHash",
          "type": "bytes32"
        }
      ],
      "name": "guildAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "guildEnsName",
          "type": "string"
        }
      ],
      "name": "guildAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "guilds",
      "outputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "contract FeePolicy",
          "name": "feePolicy",
          "type": "address"
        },
        {
          "internalType": "contract ITagsAuthPolicy",
          "name": "tagsAuthPolicy",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "deregistered",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "ensName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "feePolicy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tagsAuthPolicy",
          "type": "address"
        }
      ],
      "name": "registerGuild",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "ensNode",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "feePolicy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tagsAuthPolicy",
          "type": "address"
        }
      ],
      "name": "registerGuild",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "guildEnsName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tag",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "revokeGuildTag",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "guildEnsNode",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "tag",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "revokeGuildTag",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "guildHash",
          "type": "bytes32"
        },
        {
          "internalType": "string[]",
          "name": "tags",
          "type": "string[]"
        },
        {
          "internalType": "bytes[]",
          "name": "extraData",
          "type": "bytes[]"
        }
      ],
      "name": "revokeGuildTagsBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "guildEnsNode",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "name": "setGuildActive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "guildEnsName",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "name": "setGuildActive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "guildEnsNode",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "uriTemplate",
          "type": "string"
        }
      ],
      "name": "setGuildTokenUriTemplate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "guildEnsName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "uriTemplate",
          "type": "string"
        }
      ],
      "name": "setGuildTokenUriTemplate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "guildEnsNode",
          "type": "bytes32"
        },
        {
          "internalType": "contract IExtendedResolver",
          "name": "wildcardResolver",
          "type": "address"
        }
      ],
      "name": "setWildcardResolver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "guildEnsName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tag",
          "type": "string"
        }
      ],
      "name": "tagOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "guildEnsNode",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "tagHash",
          "type": "bytes32"
        }
      ],
      "name": "tagOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "guildEnsName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "transferGuildAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "guildEnsNode",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "transferGuildAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "guildEnsName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "feePolicy",
          "type": "address"
        }
      ],
      "name": "updateGuildFeePolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "guildEnsNode",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "feePolicy",
          "type": "address"
        }
      ],
      "name": "updateGuildFeePolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "guildEnsName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "tagsAuthPolicy",
          "type": "address"
        }
      ],
      "name": "updateGuildTagsAuthPolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "guildEnsNode",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "tagsAuthPolicy",
          "type": "address"
        }
      ],
      "name": "updateGuildTagsAuthPolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "args": [
    "stubMetadataUri",
    "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e"
  ],
  "numDeployments": 1,
  "solcInputHash": "3a32f099b226e81e32ffbca8f8873f42",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"defaultTokenMetadataUri\",\"type\":\"string\"},{\"internalType\":\"contract ENS\",\"name\":\"_ensRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClaimUnauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ENSGuildsIsNotRegisteredOperator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GuildAdminOnly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GuildNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GuildsTokenTransferNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"InvalidPolicy\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidWildcardResolver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotDomainOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RevokeUnauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TagAlreadyClaimed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"AddrChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"newAddress\",\"type\":\"bytes\"}],\"name\":\"AddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"guildId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"guildEnsNode\",\"type\":\"bytes32\"}],\"name\":\"Deregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"guildId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feePolicy\",\"type\":\"address\"}],\"name\":\"FeePolicyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"guildEnsNode\",\"type\":\"bytes32\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"guildId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"SetActive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"guildId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tagHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"TagClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"guildId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tagHash\",\"type\":\"bytes32\"}],\"name\":\"TagRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"guildId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tagsAuthPolicy\",\"type\":\"address\"}],\"name\":\"TagsAuthPolicyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"guildId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uriTemplate\",\"type\":\"string\"}],\"name\":\"TokenUriTemplateSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"addr\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"}],\"name\":\"addr\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"addresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"guildEnsName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tag\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"extraClaimArgs\",\"type\":\"bytes\"}],\"name\":\"claimGuildTag\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"guildEnsNode\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"tag\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"extraClaimArgs\",\"type\":\"bytes\"}],\"name\":\"claimGuildTag\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"guildEnsNode\",\"type\":\"bytes32\"},{\"internalType\":\"string[]\",\"name\":\"tags\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"extraClaimArgs\",\"type\":\"bytes[]\"}],\"name\":\"claimGuildTagsBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"guildEnsName\",\"type\":\"string\"}],\"name\":\"deregisterGuild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ensNode\",\"type\":\"bytes32\"}],\"name\":\"deregisterGuild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ensRegistry\",\"outputs\":[{\"internalType\":\"contract ENS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"guildHash\",\"type\":\"bytes32\"}],\"name\":\"guildAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"guildEnsName\",\"type\":\"string\"}],\"name\":\"guildAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"guilds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"contract FeePolicy\",\"name\":\"feePolicy\",\"type\":\"address\"},{\"internalType\":\"contract ITagsAuthPolicy\",\"name\":\"tagsAuthPolicy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"deregistered\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ensName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feePolicy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tagsAuthPolicy\",\"type\":\"address\"}],\"name\":\"registerGuild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ensNode\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feePolicy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tagsAuthPolicy\",\"type\":\"address\"}],\"name\":\"registerGuild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"guildEnsName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tag\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"revokeGuildTag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"guildEnsNode\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"tag\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"revokeGuildTag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"guildHash\",\"type\":\"bytes32\"},{\"internalType\":\"string[]\",\"name\":\"tags\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"extraData\",\"type\":\"bytes[]\"}],\"name\":\"revokeGuildTagsBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"guildEnsNode\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"setGuildActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"guildEnsName\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"setGuildActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"guildEnsNode\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"uriTemplate\",\"type\":\"string\"}],\"name\":\"setGuildTokenUriTemplate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"guildEnsName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uriTemplate\",\"type\":\"string\"}],\"name\":\"setGuildTokenUriTemplate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"guildEnsNode\",\"type\":\"bytes32\"},{\"internalType\":\"contract IExtendedResolver\",\"name\":\"wildcardResolver\",\"type\":\"address\"}],\"name\":\"setWildcardResolver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"guildEnsName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tag\",\"type\":\"string\"}],\"name\":\"tagOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"guildEnsNode\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"tagHash\",\"type\":\"bytes32\"}],\"name\":\"tagOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"guildEnsName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferGuildAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"guildEnsNode\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferGuildAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"guildEnsName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"feePolicy\",\"type\":\"address\"}],\"name\":\"updateGuildFeePolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"guildEnsNode\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"feePolicy\",\"type\":\"address\"}],\"name\":\"updateGuildFeePolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"guildEnsName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"tagsAuthPolicy\",\"type\":\"address\"}],\"name\":\"updateGuildTagsAuthPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"guildEnsNode\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"tagsAuthPolicy\",\"type\":\"address\"}],\"name\":\"updateGuildTagsAuthPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addr(bytes32)\":{\"params\":{\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The associated address.\"}},\"addr(bytes32,uint256)\":{\"params\":{\"coinType\":\"The coin type\",\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The associated address.\"}},\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"claimGuildTag(bytes32,string,address,bytes)\":{\"params\":{\"extraClaimArgs\":\"[Optional] Any additional arguments necessary for guild-specific logic,  such as authorization\",\"guildEnsNode\":\"The namehash of the guild for which the tag should be claimed (e.g. namehash('my-guild.eth'))\",\"recipient\":\"The address that will receive this guild tag (usually same as the caller)\",\"tag\":\"The tag name to claim (e.g. 'foo' for foo.my-guild.eth). Assumes `tag` is already normalized per            ENS Name Processing rules\"}},\"claimGuildTag(string,string,address,bytes)\":{\"params\":{\"extraClaimArgs\":\"[Optional] Any additional arguments necessary for guild-specific logic,  such as authorization\",\"guildEnsName\":\"The guild's full domain name (e.g. 'my-guild.eth')\",\"recipient\":\"The address that will receive this guild tag (usually same as the caller)\",\"tag\":\"The tag to claim (e.g. 'foobar')\"}},\"claimGuildTagsBatch(bytes32,string[],address[],bytes[])\":{\"params\":{\"extraClaimArgs\":\"Per-tag extra arguments required for guild-specific logic, such as authorization. Must have same length as array of tagHashes, even if each array element is itself empty bytes\",\"guildEnsNode\":\"The ENS namehash of the guild's domain\",\"recipients\":\"Recipients of each tag to be claimed\",\"tags\":\"Tags to be claimed\"}},\"deregisterGuild(bytes32)\":{\"params\":{\"guildEnsNode\":\"The ENS namehash of the guild's domain\"}},\"deregisterGuild(string)\":{\"params\":{\"guildEnsName\":\"The guild's full domain name (e.g. 'my-guild.eth')\"}},\"guildAdmin(bytes32)\":{\"params\":{\"guildEnsNode\":\"The ENS namehash of the guild's domain\"}},\"guildAdmin(string)\":{\"params\":{\"guildEnsName\":\"The guild's full domain name (e.g. 'my-guild.eth')\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"registerGuild(bytes32,address,address,address)\":{\"params\":{\"feePolicy\":\"The address of an implementation of FeePolicy to use for minting new tags within this guild\",\"guildAdmin\":\"The address that will administrate this guild\",\"guildEnsNode\":\"The ENS namehash of the guild's domain\",\"tagsAuthPolicy\":\"The address of an implementation of TagsAuthPolicy to use for minting new tags within this guild\"}},\"registerGuild(string,address,address,address)\":{\"params\":{\"admin\":\"The address that will administrate this guild\",\"ensName\":\"The guild's full domain name (e.g. 'my-guild.eth')\",\"feePolicy\":\"The address of an implementation of FeePolicy to use for minting new tags within this guild\",\"tagsAuthPolicy\":\"The address of an implementation of TagsAuthPolicy to use for minting new tags within this guild\"}},\"revokeGuildTag(bytes32,string,bytes)\":{\"params\":{\"extraData\":\"[Optional] Any additional arguments necessary for assessing whether a tag may be revoked\",\"guildEnsNode\":\"The ENS namehash of the guild's domain\",\"tag\":\"The tag to revoke\"}},\"revokeGuildTag(string,string,bytes)\":{\"params\":{\"extraData\":\"[Optional] Any additional arguments necessary for assessing whether a tag may be revoked\",\"guildEnsName\":\"The guild's full domain name (e.g. 'my-guild.eth')\",\"tag\":\"The tag to revoke (e.g. 'foobar')\"}},\"revokeGuildTagsBatch(bytes32,string[],bytes[])\":{\"params\":{\"extraData\":\"Additional arguments necessary for assessing whether a tag may be revoked\",\"guildEnsNode\":\"The ENS namehash of the guild's domain\",\"tagHashes\":\"ENS namehashes of all tags to revoke\"}},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"ENSGuilds NFTs are non-transferrable and may only be directly minted and burned with their corresponding guild tags.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"setGuildActive(bytes32,bool)\":{\"params\":{\"active\":\"The new status\",\"guildEnsNode\":\"The ENS namehash of the guild's domain\"}},\"setGuildActive(string,bool)\":{\"params\":{\"active\":\"The new status\",\"guildEnsName\":\"The guild's full domain name (e.g. 'my-guild.eth')\"}},\"setGuildTokenUriTemplate(bytes32,string)\":{\"params\":{\"guildEnsNode\":\"The ENS namehash of the guild's domain\",\"uriTemplate\":\"The ERC1155 metadata URL template\"}},\"setGuildTokenUriTemplate(string,string)\":{\"params\":{\"guildEnsName\":\"The guild's full domain name (e.g. 'my-guild.eth')\",\"uriTemplate\":\"The ERC1155 metadata URL template\"}},\"setWildcardResolver(bytes32,address)\":{\"params\":{\"guildEnsNode\":\"The ENS namehash of the guild's domain\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"tagOwner(bytes32,bytes32)\":{\"params\":{\"guildEnsNode\":\"The ENS namehash of the guild's domain\",\"tagHash\":\"The ENS namehash of the tag (e.g. keccak256('foo') for foo.my-guild.eth)\"}},\"tagOwner(string,string)\":{\"params\":{\"guildEnsName\":\"The guild's full domain name (e.g. 'my-guild.eth')\",\"tag\":\"The tag (e.g. 'foobar')\"}},\"transferGuildAdmin(bytes32,address)\":{\"params\":{\"guildEnsNode\":\"The ENS namehash of the guild's domain\",\"newAdmin\":\"The new admin\"}},\"transferGuildAdmin(string,address)\":{\"params\":{\"guildEnsName\":\"The guild's full domain name (e.g. 'my-guild.eth')\",\"newAdmin\":\"The new admin\"}},\"updateGuildFeePolicy(bytes32,address)\":{\"params\":{\"feePolicy\":\"The address of an implementation of FeePolicy to use for minting new tags within this guild\",\"guildEnsNode\":\"The ENS namehash of the guild's domain\"}},\"updateGuildFeePolicy(string,address)\":{\"params\":{\"feePolicy\":\"The address of an implementation of FeePolicy to use for minting new tags within this guild\",\"guildEnsName\":\"The guild's full domain name (e.g. 'my-guild.eth')\"}},\"updateGuildTagsAuthPolicy(bytes32,address)\":{\"params\":{\"guildEnsNode\":\"The ENS namehash of the guild's domain\",\"tagsAuthPolicy\":\"The address of an implementation of TagsAuthPolicy to use for minting new tags within this guild\"}},\"updateGuildTagsAuthPolicy(string,address)\":{\"params\":{\"guildEnsName\":\"The guild's full domain name (e.g. 'my-guild.eth')\",\"tagsAuthPolicy\":\"The address of an implementation of TagsAuthPolicy to use for minting new tags within this guild\"}},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}.\",\"params\":{\"tokenId\":\"The token whose URI is returned\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"AlreadyRegistered()\":[{\"notice\":\"Errors \"}]},\"events\":{\"Registered(bytes32)\":{\"notice\":\"Events \"}},\"kind\":\"user\",\"methods\":{\"addr(bytes32)\":{\"notice\":\"Returns the address associated with an ENS node.\"},\"addr(bytes32,uint256)\":{\"notice\":\"Returns the address associated with an ENS node.\"},\"claimGuildTag(bytes32,string,address,bytes)\":{\"notice\":\"Claims a guild tag\"},\"claimGuildTag(string,string,address,bytes)\":{\"notice\":\"Claims a guild tag\"},\"claimGuildTagsBatch(bytes32,string[],address[],bytes[])\":{\"notice\":\"Claims multiple tags for a guild at once\"},\"deregisterGuild(bytes32)\":{\"notice\":\"De-registers a registered guild. Designates guild as inactive and marks all tags previously minted for that guild as eligible for revocation.\"},\"deregisterGuild(string)\":{\"notice\":\"De-registers a registered guild. Designates guild as inactive and marks all tags previously minted for that guild as eligible for revocation.\"},\"ensRegistry()\":{\"notice\":\"State \"},\"guildAdmin(bytes32)\":{\"notice\":\"Returns the current admin registered for the given guild.\"},\"guildAdmin(string)\":{\"notice\":\"Returns the current admin registered for the given guild.\"},\"registerGuild(bytes32,address,address,address)\":{\"notice\":\"Registers a new guild from an existing ENS domain. Caller must be the ENS node's owner and ENSGuilds must have been designated an \\\"operator\\\" for the caller.\"},\"registerGuild(string,address,address,address)\":{\"notice\":\"Registers a new guild from an existing ENS domain. Caller must be the ENS node's owner and ENSGuilds must have been designated an \\\"operator\\\" for the caller.\"},\"revokeGuildTag(bytes32,string,bytes)\":{\"notice\":\"Attempts to revoke an existing guild tag, if authorized by the guild's AuthPolicy. Deregistered guilds will bypass auth checks for revocation of all tags.\"},\"revokeGuildTag(string,string,bytes)\":{\"notice\":\"Attempts to revoke an existing guild tag, if authorized by the guild's AuthPolicy. Deregistered guilds will bypass auth checks for revocation of all tags.\"},\"revokeGuildTagsBatch(bytes32,string[],bytes[])\":{\"notice\":\"Attempts to revoke multiple guild tags\"},\"setGuildActive(bytes32,bool)\":{\"notice\":\"Sets a guild as active or inactive. May only be called by the guild's registered admin.\"},\"setGuildActive(string,bool)\":{\"notice\":\"Sets a guild as active or inactive. May only be called by the guild's registered admin.\"},\"setGuildTokenUriTemplate(bytes32,string)\":{\"notice\":\"Sets the metadata URI template string for fetching metadata for a guild's tag NFTs. May only be called by the guild's registered admin.\"},\"setGuildTokenUriTemplate(string,string)\":{\"notice\":\"Sets the metadata URI template string for fetching metadata for a guild's tag NFTs. May only be called by the guild's registered admin.\"},\"setWildcardResolver(bytes32,address)\":{\"notice\":\"Registers a resolver for the guild's root ENS name that will dynamically resolve the guild's child names\"},\"tagOwner(bytes32,bytes32)\":{\"notice\":\"Returns the current owner of the given guild tag. Returns address(0) if no such guild or tag exists, or if the guild has been deregistered.\"},\"tagOwner(string,string)\":{\"notice\":\"Returns the current owner of the given guild tag. Returns address(0) if no such guild or tag exists, or if the guild has been deregistered.\"},\"transferGuildAdmin(bytes32,address)\":{\"notice\":\"Transfers the role of guild admin to the given address. May only be called by the guild's registered admin.\"},\"transferGuildAdmin(string,address)\":{\"notice\":\"Transfers the role of guild admin to the given address. May only be called by the guild's registered admin.\"},\"updateGuildFeePolicy(bytes32,address)\":{\"notice\":\"Updates the FeePolicy for an existing guild. May only be called by the guild's registered admin.\"},\"updateGuildFeePolicy(string,address)\":{\"notice\":\"Updates the FeePolicy for an existing guild. May only be called by the guild's registered admin.\"},\"updateGuildTagsAuthPolicy(bytes32,address)\":{\"notice\":\"Updates the TagsAuthPolicy for an existing guild. May only be called by the guild's registered admin.\"},\"updateGuildTagsAuthPolicy(string,address)\":{\"notice\":\"Updates the TagsAuthPolicy for an existing guild. May only be called by the guild's registered admin.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ensGuilds/ENSGuilds.sol\":\"ENSGuilds\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@ensdomains/ens-contracts/contracts/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface ENS {\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner\\n    ) external returns (bytes32);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setOwner(bytes32 node, address owner) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function owner(bytes32 node) external view returns (address);\\n\\n    function resolver(bytes32 node) external view returns (address);\\n\\n    function ttl(bytes32 node) external view returns (uint64);\\n\\n    function recordExists(bytes32 node) external view returns (bool);\\n\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7cb1158c7d268b63de1468e28e2711b28d686e2628ddb22da2149cd93ddeafda\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddrResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the legacy (ETH-only) addr function.\\n */\\ninterface IAddrResolver {\\n    event AddrChanged(bytes32 indexed node, address a);\\n\\n    /**\\n     * Returns the address associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated address.\\n     */\\n    function addr(bytes32 node) external view returns (address payable);\\n}\\n\",\"keccak256\":\"0x2ad7f2fc60ebe0f93745fe70247f6a854f66af732483fda2a3c5e055614445e8\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the new (multicoin) addr function.\\n */\\ninterface IAddressResolver {\\n    event AddressChanged(\\n        bytes32 indexed node,\\n        uint256 coinType,\\n        bytes newAddress\\n    );\\n\\n    function addr(\\n        bytes32 node,\\n        uint256 coinType\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x411447c1e90c51e09702815a85ec725ffbbe37cf96e8cc4d2a8bd4ad8a59d73e\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IExtendedResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IExtendedResolver {\\n    function resolve(\\n        bytes memory name,\\n        bytes memory data\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x5d81521cfae7d9a4475d27533cd8ed0d3475d369eb0674fd90ffbdbdf292faa3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual override returns (uint256[] memory) {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address from, uint256 id, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x81149353c99ccf8ff18af7701bc3f38665c7a97e344cdc0d27f927f03d22af0e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) internal view returns (bool[] memory) {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     *\\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\\n     * should be exercised when using this function.\\n     *\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x5a08ad61f4e82b8a3323562661a86fb10b10190848073fdc13d4ac43710ffba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/ensGuilds/ENSGuilds.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport \\\"@ensdomains/ens-contracts/contracts/registry/ENS.sol\\\";\\n\\nimport \\\"./interfaces/IENSGuilds.sol\\\";\\nimport \\\"../feePolicies/FeePolicy.sol\\\";\\nimport \\\"../tagsAuthPolicies/ITagsAuthPolicy.sol\\\";\\nimport \\\"./mixins/GuildTagResolver.sol\\\";\\nimport \\\"./mixins/GuildTagTokens.sol\\\";\\nimport \\\"./mixins/ENSGuildsHumanized.sol\\\";\\n\\ncontract ENSGuilds is IENSGuilds, ENSGuildsHumanized, GuildTagTokens, GuildTagResolver, ReentrancyGuard {\\n    struct GuildInfo {\\n        address admin;\\n        FeePolicy feePolicy;\\n        ITagsAuthPolicy tagsAuthPolicy;\\n        bool active;\\n        bool deregistered;\\n    }\\n\\n    using ERC165Checker for address;\\n\\n    /** State */\\n    ENS public immutable ensRegistry;\\n    mapping(bytes32 => GuildInfo) public guilds;\\n\\n    /** Errors */\\n    error AlreadyRegistered();\\n    error ENSGuildsIsNotRegisteredOperator();\\n    error NotDomainOwner();\\n    error InvalidPolicy(address);\\n    error GuildNotActive();\\n    error ClaimUnauthorized();\\n    error RevokeUnauthorized();\\n    error GuildAdminOnly();\\n    error TagAlreadyClaimed();\\n    error FeeError();\\n    error InvalidWildcardResolver();\\n\\n    modifier onlyGuildAdmin(bytes32 guildHash) {\\n        if (guilds[guildHash].admin != _msgSender()) {\\n            revert GuildAdminOnly();\\n        }\\n        _;\\n    }\\n\\n    constructor(string memory defaultTokenMetadataUri, ENS _ensRegistry) ERC1155(defaultTokenMetadataUri) {\\n        ensRegistry = _ensRegistry;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(GuildTagResolver, GuildTagTokens, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IENSGuilds).interfaceId ||\\n            GuildTagResolver.supportsInterface(interfaceId) ||\\n            GuildTagTokens.supportsInterface(interfaceId) ||\\n            ERC165.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IENSGuilds\\n     */\\n    function registerGuild(\\n        bytes32 ensNode,\\n        address admin,\\n        address feePolicy,\\n        address tagsAuthPolicy\\n    ) public override(ENSGuildsHumanized, IENSGuilds) {\\n        // Check caller is owner of domain\\n        if (ensRegistry.owner(ensNode) != _msgSender()) {\\n            revert NotDomainOwner();\\n        }\\n\\n        // Check guild not yet registered\\n        if (address(guilds[ensNode].feePolicy) != address(0)) {\\n            revert AlreadyRegistered();\\n        }\\n\\n        // Check ENSGuilds contract has been approved to edit the ENS registry on behalf of the caller\\n        if (!ensRegistry.isApprovedForAll(_msgSender(), address(this))) {\\n            revert ENSGuildsIsNotRegisteredOperator();\\n        }\\n\\n        // Check for valid fee/tagsAuth policies\\n        if (!feePolicy.supportsInterface(type(FeePolicy).interfaceId)) {\\n            revert InvalidPolicy(feePolicy);\\n        }\\n        if (!tagsAuthPolicy.supportsInterface(type(ITagsAuthPolicy).interfaceId)) {\\n            revert InvalidPolicy(tagsAuthPolicy);\\n        }\\n\\n        guilds[ensNode] = GuildInfo({\\n            admin: admin,\\n            feePolicy: FeePolicy(feePolicy),\\n            tagsAuthPolicy: ITagsAuthPolicy(tagsAuthPolicy),\\n            active: true,\\n            deregistered: false\\n        });\\n\\n        emit Registered(ensNode);\\n    }\\n\\n    /**\\n     * @inheritdoc IENSGuilds\\n     */\\n    function deregisterGuild(bytes32 ensNode) public override(ENSGuildsHumanized, IENSGuilds) onlyGuildAdmin(ensNode) {\\n        delete guilds[ensNode];\\n        guilds[ensNode].deregistered = true;\\n        emit Deregistered(ensNode);\\n    }\\n\\n    /**\\n     * @inheritdoc IENSGuilds\\n     */\\n    function claimGuildTag(\\n        bytes32 guildEnsNode,\\n        string calldata tag,\\n        address recipient,\\n        bytes calldata extraClaimArgs\\n    ) public payable override(ENSGuildsHumanized, IENSGuilds) nonReentrant {\\n        bytes32 tagHash = keccak256(bytes(tag));\\n\\n        // assert guild is not frozen\\n        if (!guilds[guildEnsNode].active) {\\n            revert GuildNotActive();\\n        }\\n\\n        // check tag not already registered\\n        bytes32 ensNode = keccak256(abi.encodePacked(guildEnsNode, tagHash));\\n        if (ensRegistry.owner(ensNode) != address(0)) {\\n            revert TagAlreadyClaimed();\\n        }\\n\\n        // check caller is authorized to claim tag\\n        ITagsAuthPolicy auth = guilds[guildEnsNode].tagsAuthPolicy;\\n        if (!auth.canClaimTag(guildEnsNode, tag, _msgSender(), recipient, extraClaimArgs)) {\\n            revert ClaimUnauthorized();\\n        }\\n\\n        // fees\\n        (address feeToken, uint256 fee, address feePaidTo) = guilds[guildEnsNode].feePolicy.tagClaimFee(\\n            guildEnsNode,\\n            tag,\\n            _msgSender(),\\n            extraClaimArgs\\n        );\\n        if (fee != 0) {\\n            if (feeToken == address(0)) {\\n                if (msg.value != fee) {\\n                    revert FeeError();\\n                }\\n                // solhint-disable-next-line avoid-low-level-calls\\n                (bool sent, ) = feePaidTo.call{ value: msg.value }(\\\"\\\");\\n                if (!sent) revert FeeError();\\n            } else {\\n                try IERC20(feeToken).transferFrom(_msgSender(), feePaidTo, fee) returns (bool sent) {\\n                    if (!sent) revert FeeError();\\n                } catch {\\n                    revert FeeError();\\n                }\\n            }\\n        }\\n\\n        // NFT mint\\n        _mintNewGuildToken(guildEnsNode, tagHash, recipient);\\n\\n        // inform auth contract that tag was claimed, then revoke an existing tag if instructed\\n        bytes32 tagToRevoke = auth.onTagClaimed(guildEnsNode, tag, _msgSender(), recipient, extraClaimArgs);\\n        if (tagToRevoke != bytes32(0)) {\\n            _revokeTag(guildEnsNode, tagToRevoke);\\n        }\\n\\n        // Register this new name in ENS\\n        ensRegistry.setSubnodeRecord(guildEnsNode, tagHash, address(this), address(this), 0);\\n\\n        // Set forward record in ENS resolver\\n        _setEnsForwardRecord(ensNode, recipient);\\n\\n        emit TagClaimed(guildEnsNode, tagHash, recipient);\\n    }\\n\\n    /**\\n     * @inheritdoc IENSGuilds\\n     */\\n    function claimGuildTagsBatch(\\n        bytes32 guildEnsNode,\\n        string[] calldata tags,\\n        address[] calldata recipients,\\n        bytes[] calldata extraClaimArgs\\n    ) external payable override {\\n        for (uint i = 0; i < tags.length; i++) {\\n            claimGuildTag(guildEnsNode, tags[i], recipients[i], extraClaimArgs[i]);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IENSGuilds\\n     */\\n    function guildAdmin(bytes32 guildHash) public view override(ENSGuildsHumanized, IENSGuilds) returns (address) {\\n        return guilds[guildHash].admin;\\n    }\\n\\n    /**\\n     * @inheritdoc IENSGuilds\\n     */\\n    function revokeGuildTag(\\n        bytes32 guildEnsNode,\\n        string calldata tag,\\n        bytes calldata extraData\\n    ) public override(ENSGuildsHumanized, IENSGuilds) nonReentrant {\\n        GuildInfo storage guild = guilds[guildEnsNode];\\n\\n        // revoke authorized?\\n        ITagsAuthPolicy auth = guilds[guildEnsNode].tagsAuthPolicy;\\n        if (!guild.deregistered && !auth.tagCanBeRevoked(_msgSender(), guildEnsNode, tag, extraData)) {\\n            revert RevokeUnauthorized();\\n        }\\n\\n        bytes32 tagHash = keccak256(bytes(tag));\\n        _revokeTag(guildEnsNode, tagHash);\\n    }\\n\\n    /**\\n     * @inheritdoc IENSGuilds\\n     */\\n    function revokeGuildTagsBatch(\\n        bytes32 guildHash,\\n        string[] calldata tags,\\n        bytes[] calldata extraData\\n    ) external override {\\n        for (uint i = 0; i < tags.length; i++) {\\n            revokeGuildTag(guildHash, tags[i], extraData[i]);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IENSGuilds\\n     */\\n    function updateGuildFeePolicy(\\n        bytes32 guildEnsNode,\\n        address feePolicy\\n    ) public override(ENSGuildsHumanized, IENSGuilds) onlyGuildAdmin(guildEnsNode) {\\n        if (!feePolicy.supportsInterface(type(FeePolicy).interfaceId)) {\\n            revert InvalidPolicy(feePolicy);\\n        }\\n        guilds[guildEnsNode].feePolicy = FeePolicy(feePolicy);\\n        emit FeePolicyUpdated(guildEnsNode, feePolicy);\\n    }\\n\\n    /**\\n     * @inheritdoc IENSGuilds\\n     */\\n    function updateGuildTagsAuthPolicy(\\n        bytes32 guildEnsNode,\\n        address tagsAuthPolicy\\n    ) public override(ENSGuildsHumanized, IENSGuilds) onlyGuildAdmin(guildEnsNode) {\\n        if (!tagsAuthPolicy.supportsInterface(type(ITagsAuthPolicy).interfaceId)) {\\n            revert InvalidPolicy(tagsAuthPolicy);\\n        }\\n        guilds[guildEnsNode].tagsAuthPolicy = ITagsAuthPolicy(tagsAuthPolicy);\\n        emit TagsAuthPolicyUpdated(guildEnsNode, tagsAuthPolicy);\\n    }\\n\\n    /**\\n     * @inheritdoc IENSGuilds\\n     */\\n    function transferGuildAdmin(\\n        bytes32 guildEnsNode,\\n        address newAdmin\\n    ) public override(ENSGuildsHumanized, IENSGuilds) onlyGuildAdmin(guildEnsNode) {\\n        guilds[guildEnsNode].admin = newAdmin;\\n        emit AdminTransferred(guildEnsNode, newAdmin);\\n    }\\n\\n    /**\\n     * @inheritdoc IENSGuilds\\n     */\\n    function setGuildTokenUriTemplate(\\n        bytes32 guildEnsNode,\\n        string calldata uriTemplate\\n    ) public override(ENSGuildsHumanized, IENSGuilds) onlyGuildAdmin(guildEnsNode) {\\n        _setGuildTokenURITemplate(guildEnsNode, uriTemplate);\\n        emit TokenUriTemplateSet(guildEnsNode, uriTemplate);\\n    }\\n\\n    /**\\n     * @inheritdoc IENSGuilds\\n     */\\n    function setGuildActive(\\n        bytes32 guildEnsNode,\\n        bool active\\n    ) public override(ENSGuildsHumanized, IENSGuilds) onlyGuildAdmin(guildEnsNode) {\\n        guilds[guildEnsNode].active = active;\\n        emit SetActive(guildEnsNode, active);\\n    }\\n\\n    /**\\n     * @inheritdoc IENSGuilds\\n     */\\n    function tagOwner(\\n        bytes32 guildEnsNode,\\n        bytes32 tagHash\\n    ) public view override(ENSGuildsHumanized, IENSGuilds) returns (address) {\\n        bytes32 tagEnsNode = keccak256(abi.encodePacked(guildEnsNode, tagHash));\\n        // if ENSGuilds is not the owner of the tag's ENS node, then the tag itself is not valid\\n        // and therefore has no owner\\n        if (ensRegistry.owner(tagEnsNode) != address(this)) {\\n            return address(0);\\n        }\\n        return addr(tagEnsNode);\\n    }\\n\\n    /**\\n     * @inheritdoc IENSGuilds\\n     */\\n    function setWildcardResolver(\\n        bytes32 guildEnsNode,\\n        IExtendedResolver wildcardResolver\\n    ) public onlyGuildAdmin(guildEnsNode) {\\n        if (!address(wildcardResolver).supportsInterface(type(IExtendedResolver).interfaceId)) {\\n            revert InvalidWildcardResolver();\\n        }\\n        ensRegistry.setResolver(guildEnsNode, address(wildcardResolver));\\n    }\\n\\n    function _revokeTag(bytes32 guildEnsNode, bytes32 tagHash) private {\\n        address _tagOwner = tagOwner(guildEnsNode, tagHash);\\n\\n        // check that tag exists\\n        if (_tagOwner == address(0)) {\\n            revert RevokeUnauthorized();\\n        }\\n\\n        ensRegistry.setSubnodeRecord(guildEnsNode, tagHash, address(0), address(0), 0);\\n        _burnGuildToken(guildEnsNode, tagHash, _tagOwner);\\n\\n        emit TagRevoked(guildEnsNode, tagHash);\\n    }\\n}\\n\",\"keccak256\":\"0xebc149fd295cb60e54e7ea8a2e097f865f9c0efca3d72586a6a24dd12542cfe6\",\"license\":\"MIT\"},\"contracts/ensGuilds/interfaces/IENSGuilds.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddrResolver.sol\\\";\\nimport \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddressResolver.sol\\\";\\nimport \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IExtendedResolver.sol\\\";\\n\\ninterface IENSGuilds is IAddrResolver, IAddressResolver, IERC1155MetadataURI {\\n    /** Events */\\n    event Registered(bytes32 indexed guildEnsNode);\\n    event Deregistered(bytes32 indexed guildEnsNode);\\n    event TagClaimed(bytes32 indexed guildId, bytes32 indexed tagHash, address recipient);\\n    event TagRevoked(bytes32 indexed guildId, bytes32 indexed tagHash);\\n    event FeePolicyUpdated(bytes32 indexed guildId, address feePolicy);\\n    event TagsAuthPolicyUpdated(bytes32 indexed guildId, address tagsAuthPolicy);\\n    event AdminTransferred(bytes32 indexed guildId, address newAdmin);\\n    event SetActive(bytes32 indexed guildId, bool active);\\n    event TokenUriTemplateSet(bytes32 indexed guildId, string uriTemplate);\\n\\n    /* Functions */\\n\\n    /**\\n     * @notice Registers a new guild from an existing ENS domain.\\n     * Caller must be the ENS node's owner and ENSGuilds must have been designated an \\\"operator\\\" for the caller.\\n     * @param guildEnsNode The ENS namehash of the guild's domain\\n     * @param guildAdmin The address that will administrate this guild\\n     * @param feePolicy The address of an implementation of FeePolicy to use for minting new tags within this guild\\n     * @param tagsAuthPolicy The address of an implementation of TagsAuthPolicy to use for minting new tags\\n     * within this guild\\n     */\\n    function registerGuild(\\n        bytes32 guildEnsNode,\\n        address guildAdmin,\\n        address feePolicy,\\n        address tagsAuthPolicy\\n    ) external;\\n\\n    /**\\n     * @notice De-registers a registered guild.\\n     * Designates guild as inactive and marks all tags previously minted for that guild as eligible for revocation.\\n     * @param guildEnsNode The ENS namehash of the guild's domain\\n     */\\n    function deregisterGuild(bytes32 guildEnsNode) external;\\n\\n    /**\\n     * @notice Claims a guild tag\\n     * @param guildEnsNode The namehash of the guild for which the tag should be claimed (e.g. namehash('my-guild.eth'))\\n     * @param tag The tag name to claim (e.g. 'foo' for foo.my-guild.eth). Assumes `tag` is already normalized per\\n     *            ENS Name Processing rules\\n     * @param recipient The address that will receive this guild tag (usually same as the caller)\\n     * @param extraClaimArgs [Optional] Any additional arguments necessary for guild-specific logic,\\n     *  such as authorization\\n     */\\n    function claimGuildTag(\\n        bytes32 guildEnsNode,\\n        string calldata tag,\\n        address recipient,\\n        bytes calldata extraClaimArgs\\n    ) external payable;\\n\\n    /**\\n     * @notice Claims multiple tags for a guild at once\\n     * @param guildEnsNode The ENS namehash of the guild's domain\\n     * @param tags Tags to be claimed\\n     * @param recipients Recipients of each tag to be claimed\\n     * @param extraClaimArgs Per-tag extra arguments required for guild-specific logic, such as authorization.\\n     * Must have same length as array of tagHashes, even if each array element is itself empty bytes\\n     */\\n    function claimGuildTagsBatch(\\n        bytes32 guildEnsNode,\\n        string[] calldata tags,\\n        address[] calldata recipients,\\n        bytes[] calldata extraClaimArgs\\n    ) external payable;\\n\\n    /**\\n     * @notice Returns the current owner of the given guild tag.\\n     * Returns address(0) if no such guild or tag exists, or if the guild has been deregistered.\\n     * @param guildEnsNode The ENS namehash of the guild's domain\\n     * @param tagHash The ENS namehash of the tag (e.g. keccak256('foo') for foo.my-guild.eth)\\n     */\\n    function tagOwner(bytes32 guildEnsNode, bytes32 tagHash) external view returns (address);\\n\\n    /**\\n     * @notice Attempts to revoke an existing guild tag, if authorized by the guild's AuthPolicy.\\n     * Deregistered guilds will bypass auth checks for revocation of all tags.\\n     * @param guildEnsNode The ENS namehash of the guild's domain\\n     * @param tag The tag to revoke\\n     * @param extraData [Optional] Any additional arguments necessary for assessing whether a tag may be revoked\\n     */\\n    function revokeGuildTag(bytes32 guildEnsNode, string calldata tag, bytes calldata extraData) external;\\n\\n    /**\\n     * @notice Attempts to revoke multiple guild tags\\n     * @param guildEnsNode The ENS namehash of the guild's domain\\n     * @param tagHashes ENS namehashes of all tags to revoke\\n     * @param extraData Additional arguments necessary for assessing whether a tag may be revoked\\n     */\\n    function revokeGuildTagsBatch(\\n        bytes32 guildEnsNode,\\n        string[] calldata tagHashes,\\n        bytes[] calldata extraData\\n    ) external;\\n\\n    /**\\n     * @notice Updates the FeePolicy for an existing guild. May only be called by the guild's registered admin.\\n     * @param guildEnsNode The ENS namehash of the guild's domain\\n     * @param feePolicy The address of an implementation of FeePolicy to use for minting new tags within this guild\\n     */\\n    function updateGuildFeePolicy(bytes32 guildEnsNode, address feePolicy) external;\\n\\n    /**\\n     * @notice Updates the TagsAuthPolicy for an existing guild. May only be called by the guild's registered admin.\\n     * @param guildEnsNode The ENS namehash of the guild's domain\\n     * @param tagsAuthPolicy The address of an implementation of TagsAuthPolicy to use for\\n     * minting new tags within this guild\\n     */\\n    function updateGuildTagsAuthPolicy(bytes32 guildEnsNode, address tagsAuthPolicy) external;\\n\\n    /**\\n     * @notice Sets the metadata URI template string for fetching metadata for a guild's tag NFTs.\\n     * May only be called by the guild's registered admin.\\n     * @param guildEnsNode The ENS namehash of the guild's domain\\n     * @param uriTemplate The ERC1155 metadata URL template\\n     */\\n    function setGuildTokenUriTemplate(bytes32 guildEnsNode, string calldata uriTemplate) external;\\n\\n    /**\\n     * @notice Sets a guild as active or inactive. May only be called by the guild's registered admin.\\n     * @param guildEnsNode The ENS namehash of the guild's domain\\n     * @param active The new status\\n     */\\n    function setGuildActive(bytes32 guildEnsNode, bool active) external;\\n\\n    /**\\n     * @notice Returns the current admin registered for the given guild.\\n     * @param guildEnsNode The ENS namehash of the guild's domain\\n     */\\n    function guildAdmin(bytes32 guildEnsNode) external view returns (address);\\n\\n    /**\\n     * @notice Transfers the role of guild admin to the given address.\\n     * May only be called by the guild's registered admin.\\n     * @param guildEnsNode The ENS namehash of the guild's domain\\n     * @param newAdmin The new admin\\n     */\\n    function transferGuildAdmin(bytes32 guildEnsNode, address newAdmin) external;\\n\\n    /**\\n     * @notice Registers a resolver for the guild's root ENS name that will\\n     * dynamically resolve the guild's child names\\n     * @param guildEnsNode The ENS namehash of the guild's domain\\n     */\\n    function setWildcardResolver(bytes32 guildEnsNode, IExtendedResolver wildcardResolver) external;\\n}\\n\",\"keccak256\":\"0xbf5f67d8b52bf4aabbc3451d90cd261e2cb9cf9b7bcd9a2da18833fd929fb7c4\",\"license\":\"MIT\"},\"contracts/ensGuilds/interfaces/IENSGuildsHumanized.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IENSGuildsHumanized {\\n    function registerGuild(\\n        string memory ensName,\\n        address guildAdmin,\\n        address feePolicy,\\n        address tagsAuthPolicy\\n    ) external;\\n\\n    function deregisterGuild(string memory guildEnsName) external;\\n\\n    function claimGuildTag(\\n        string memory guildEnsName,\\n        string memory tag,\\n        address recipient,\\n        bytes calldata extraClaimArgs\\n    ) external payable;\\n\\n    function tagOwner(string memory guildEnsName, string memory tag) external view returns (address);\\n\\n    function revokeGuildTag(string memory guildEnsName, string memory tag, bytes calldata extraData) external;\\n\\n    function updateGuildFeePolicy(string memory guildEnsName, address feePolicy) external;\\n\\n    function updateGuildTagsAuthPolicy(string memory guildEnsName, address tagsAuthPolicy) external;\\n\\n    function setGuildTokenUriTemplate(string memory guildEnsName, string calldata uriTemplate) external;\\n\\n    function setGuildActive(string memory guildEnsName, bool active) external;\\n\\n    function guildAdmin(string memory guildEnsName) external view returns (address);\\n\\n    function transferGuildAdmin(string memory guildEnsName, address newAdmin) external;\\n}\\n\",\"keccak256\":\"0x3b96a8dc7464322ae5121c5968e50a46b981b9f8ef4e1033756839c8b781bed3\",\"license\":\"MIT\"},\"contracts/ensGuilds/mixins/ENSGuildsHumanized.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../interfaces/IENSGuilds.sol\\\";\\nimport \\\"../interfaces/IENSGuildsHumanized.sol\\\";\\nimport \\\"../../libraries/ENSNamehash.sol\\\";\\n\\nabstract contract ENSGuildsHumanized is IENSGuildsHumanized {\\n    using ENSNamehash for bytes;\\n\\n    // Humanized versions\\n\\n    /**\\n     * @notice Registers a new guild from an existing ENS domain.\\n     * Caller must be the ENS node's owner and ENSGuilds must have been designated an \\\"operator\\\" for the caller.\\n     * @param ensName The guild's full domain name (e.g. 'my-guild.eth')\\n     * @param admin The address that will administrate this guild\\n     * @param feePolicy The address of an implementation of FeePolicy to use for minting new tags within this guild\\n     * @param tagsAuthPolicy The address of an implementation of TagsAuthPolicy to use for minting new tags\\n     * within this guild\\n     */\\n    function registerGuild(\\n        string calldata ensName,\\n        address admin,\\n        address feePolicy,\\n        address tagsAuthPolicy\\n    ) external override {\\n        bytes32 ensNode = bytes(ensName).namehash();\\n        registerGuild(ensNode, admin, feePolicy, tagsAuthPolicy);\\n    }\\n\\n    /**\\n     * @notice De-registers a registered guild.\\n     * Designates guild as inactive and marks all tags previously minted for that guild as eligible for revocation.\\n     * @param guildEnsName The guild's full domain name (e.g. 'my-guild.eth')\\n     */\\n    function deregisterGuild(string calldata guildEnsName) external {\\n        bytes32 guildEnsNode = bytes(guildEnsName).namehash();\\n        deregisterGuild(guildEnsNode);\\n    }\\n\\n    /**\\n     * @notice Claims a guild tag\\n     * @param guildEnsName The guild's full domain name (e.g. 'my-guild.eth')\\n     * @param tag The tag to claim (e.g. 'foobar')\\n     * @param recipient The address that will receive this guild tag (usually same as the caller)\\n     * @param extraClaimArgs [Optional] Any additional arguments necessary for guild-specific logic,\\n     *  such as authorization\\n     */\\n    function claimGuildTag(\\n        string calldata guildEnsName,\\n        string calldata tag,\\n        address recipient,\\n        bytes calldata extraClaimArgs\\n    ) external payable override {\\n        bytes32 guildEnsNode = bytes(guildEnsName).namehash();\\n        claimGuildTag(guildEnsNode, tag, recipient, extraClaimArgs);\\n    }\\n\\n    /**\\n     * @notice Attempts to revoke an existing guild tag, if authorized by the guild's AuthPolicy.\\n     * Deregistered guilds will bypass auth checks for revocation of all tags.\\n     * @param guildEnsName The guild's full domain name (e.g. 'my-guild.eth')\\n     * @param tag The tag to revoke (e.g. 'foobar')\\n     * @param extraData [Optional] Any additional arguments necessary for assessing whether a tag may be revoked\\n     */\\n    function revokeGuildTag(string calldata guildEnsName, string calldata tag, bytes calldata extraData) external {\\n        bytes32 guildEnsNode = bytes(guildEnsName).namehash();\\n        revokeGuildTag(guildEnsNode, tag, extraData);\\n    }\\n\\n    /**\\n     * @notice Returns the current owner of the given guild tag.\\n     * Returns address(0) if no such guild or tag exists, or if the guild has been deregistered.\\n     * @param guildEnsName The guild's full domain name (e.g. 'my-guild.eth')\\n     * @param tag The tag (e.g. 'foobar')\\n     */\\n    function tagOwner(string calldata guildEnsName, string calldata tag) external view returns (address) {\\n        bytes32 guildEnsNode = bytes(guildEnsName).namehash();\\n        bytes32 tagHash = keccak256(bytes(tag));\\n        return tagOwner(guildEnsNode, tagHash);\\n    }\\n\\n    /**\\n     * @notice Updates the FeePolicy for an existing guild. May only be called by the guild's registered admin.\\n     * @param guildEnsName The guild's full domain name (e.g. 'my-guild.eth')\\n     * @param feePolicy The address of an implementation of FeePolicy to use for minting new tags within this guild\\n     */\\n    function updateGuildFeePolicy(string calldata guildEnsName, address feePolicy) external {\\n        bytes32 guildEnsNode = bytes(guildEnsName).namehash();\\n        updateGuildFeePolicy(guildEnsNode, feePolicy);\\n    }\\n\\n    /**\\n     * @notice Updates the TagsAuthPolicy for an existing guild. May only be called by the guild's registered admin.\\n     * @param guildEnsName The guild's full domain name (e.g. 'my-guild.eth')\\n     * @param tagsAuthPolicy The address of an implementation of TagsAuthPolicy to use for\\n     * minting new tags within this guild\\n     */\\n    function updateGuildTagsAuthPolicy(string calldata guildEnsName, address tagsAuthPolicy) external {\\n        bytes32 guildEnsNode = bytes(guildEnsName).namehash();\\n        updateGuildTagsAuthPolicy(guildEnsNode, tagsAuthPolicy);\\n    }\\n\\n    /**\\n     * @notice Sets the metadata URI template string for fetching metadata for a guild's tag NFTs.\\n     * May only be called by the guild's registered admin.\\n     * @param guildEnsName The guild's full domain name (e.g. 'my-guild.eth')\\n     * @param uriTemplate The ERC1155 metadata URL template\\n     */\\n    function setGuildTokenUriTemplate(string calldata guildEnsName, string calldata uriTemplate) external {\\n        bytes32 guildEnsNode = bytes(guildEnsName).namehash();\\n        setGuildTokenUriTemplate(guildEnsNode, uriTemplate);\\n    }\\n\\n    /**\\n     * @notice Sets a guild as active or inactive. May only be called by the guild's registered admin.\\n     * @param guildEnsName The guild's full domain name (e.g. 'my-guild.eth')\\n     * @param active The new status\\n     */\\n    function setGuildActive(string calldata guildEnsName, bool active) external {\\n        bytes32 guildEnsNode = bytes(guildEnsName).namehash();\\n        setGuildActive(guildEnsNode, active);\\n    }\\n\\n    /**\\n     * @notice Returns the current admin registered for the given guild.\\n     * @param guildEnsName The guild's full domain name (e.g. 'my-guild.eth')\\n     */\\n    function guildAdmin(string calldata guildEnsName) external view returns (address) {\\n        bytes32 guildEnsNode = bytes(guildEnsName).namehash();\\n        return guildAdmin(guildEnsNode);\\n    }\\n\\n    /**\\n     * @notice Transfers the role of guild admin to the given address.\\n     * May only be called by the guild's registered admin.\\n     * @param guildEnsName The guild's full domain name (e.g. 'my-guild.eth')\\n     * @param newAdmin The new admin\\n     */\\n    function transferGuildAdmin(string calldata guildEnsName, address newAdmin) external {\\n        bytes32 guildEnsNode = bytes(guildEnsName).namehash();\\n        transferGuildAdmin(guildEnsNode, newAdmin);\\n    }\\n\\n    // Original versions\\n\\n    function registerGuild(bytes32, address, address, address) public virtual;\\n\\n    function deregisterGuild(bytes32) public virtual;\\n\\n    function claimGuildTag(bytes32, string calldata, address, bytes calldata) public payable virtual;\\n\\n    function revokeGuildTag(bytes32, string calldata, bytes calldata) public virtual;\\n\\n    function tagOwner(bytes32, bytes32) public view virtual returns (address);\\n\\n    function updateGuildFeePolicy(bytes32, address) public virtual;\\n\\n    function updateGuildTagsAuthPolicy(bytes32, address) public virtual;\\n\\n    function setGuildTokenUriTemplate(bytes32, string calldata) public virtual;\\n\\n    function setGuildActive(bytes32, bool) public virtual;\\n\\n    function guildAdmin(bytes32) public view virtual returns (address);\\n\\n    function transferGuildAdmin(bytes32, address) public virtual;\\n}\\n\",\"keccak256\":\"0x87ca5e35f08db802d8b6b3a47eb95a55a1797ef5c1372d19f5e1dbdcdf4f6a97\",\"license\":\"MIT\"},\"contracts/ensGuilds/mixins/GuildTagResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddrResolver.sol\\\";\\nimport \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddressResolver.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"../../libraries/ENSByteUtils.sol\\\";\\n\\nabstract contract GuildTagResolver is IAddrResolver, IAddressResolver, ERC165 {\\n    using ENSByteUtils for address;\\n    using ENSByteUtils for bytes;\\n\\n    uint256 private constant COIN_TYPE_ETH = 60;\\n\\n    mapping(bytes32 => address) public addresses;\\n\\n    /**\\n     * Sets the address associated with an ENS node.\\n     * May only be called by descendants of this contract\\n     */\\n    function _setEnsForwardRecord(bytes32 node, address a) internal {\\n        addresses[node] = a;\\n        emit AddrChanged(node, a);\\n        emit AddressChanged(node, COIN_TYPE_ETH, a.toBytes());\\n    }\\n\\n    /**\\n     * @notice Returns the address associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated address.\\n     */\\n    function addr(bytes32 node) public view override returns (address payable) {\\n        bytes memory a = addr(node, COIN_TYPE_ETH);\\n        if (a.length == 0) {\\n            return payable(0);\\n        }\\n        return a.toAddress();\\n    }\\n\\n    /**\\n     * @notice Returns the address associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @param coinType The coin type\\n     * @return The associated address.\\n     */\\n    function addr(bytes32 node, uint256 coinType) public view override returns (bytes memory) {\\n        bytes memory emptyBytes;\\n\\n        if (coinType != COIN_TYPE_ETH) {\\n            return emptyBytes;\\n        }\\n\\n        address a = addresses[node];\\n        if (a == address(0)) {\\n            return emptyBytes;\\n        }\\n        return a.toBytes();\\n    }\\n\\n    function supportsInterface(bytes4 interfaceID) public view virtual override(ERC165) returns (bool) {\\n        return\\n            interfaceID == type(IAddrResolver).interfaceId ||\\n            interfaceID == type(IAddressResolver).interfaceId ||\\n            super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0xd3ff73c894e9b0d4d2da0d83b1cefb7dba2147522865a47241ab664179607346\",\"license\":\"MIT\"},\"contracts/ensGuilds/mixins/GuildTagTokens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\nabstract contract GuildTagTokens is ERC1155 {\\n    using Counters for Counters.Counter;\\n\\n    error GuildsTokenTransferNotAllowed();\\n\\n    uint256 internal constant GUILD_ID_MASK = uint256(~uint128(0)) << 128;\\n\\n    struct GuildTokenInfo {\\n        Counters.Counter tokenIdTracker;\\n        string templateURI;\\n        mapping(bytes32 => uint256) guildTagsToTokenIds;\\n    }\\n\\n    // maps the top 128 bits of each guild's GuildID (ensNode) to its metadataURI and token ID counter\\n    mapping(bytes16 => GuildTokenInfo) private guilds;\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC1155) returns (bool) {\\n        return ERC1155.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     * @param tokenId The token whose URI is returned\\n     */\\n    function uri(uint256 tokenId) public view virtual override returns (string memory) {\\n        // calculate truncated guildHash from first 128 bits of tokenId\\n        uint256 truncatedGuildHashUint = tokenId & GUILD_ID_MASK;\\n        bytes16 truncatedGuildHash = bytes16(bytes32(truncatedGuildHashUint));\\n\\n        // return guild-specific URI if exists\\n        string storage guildTemplateURI = guilds[truncatedGuildHash].templateURI;\\n        if (bytes(guildTemplateURI).length != 0) {\\n            return guildTemplateURI;\\n        }\\n\\n        // return default URI shared by all guilds\\n        return ERC1155.uri(tokenId);\\n    }\\n\\n    function _mintNewGuildToken(bytes32 guildHash, bytes32 tagHash, address to) internal {\\n        bytes16 truncatedGuildHash = bytes16(guildHash);\\n\\n        uint256 tokenCounterCurrent = guilds[truncatedGuildHash].tokenIdTracker.current();\\n        require(tokenCounterCurrent < type(uint128).max, \\\"tokenCounterOverflow\\\");\\n\\n        guilds[truncatedGuildHash].tokenIdTracker.increment();\\n\\n        uint256 truncatedGuildHashUint = uint256(guildHash) & GUILD_ID_MASK;\\n        uint256 fullTokenId = truncatedGuildHashUint + tokenCounterCurrent;\\n\\n        bytes memory emptyData;\\n        _mint(to, fullTokenId, 1, emptyData);\\n\\n        guilds[truncatedGuildHash].guildTagsToTokenIds[tagHash] = fullTokenId;\\n    }\\n\\n    function _burnGuildToken(bytes32 guildHash, bytes32 tagHash, address tagOwner) internal {\\n        bytes16 truncatedGuildHash = bytes16(guildHash);\\n        uint256 tokenId = guilds[truncatedGuildHash].guildTagsToTokenIds[tagHash];\\n\\n        _burn(tagOwner, tokenId, 1);\\n    }\\n\\n    function _setGuildTokenURITemplate(bytes32 guildHash, string calldata templateURI) internal {\\n        bytes16 truncatedGuildHash = bytes16(guildHash);\\n        guilds[truncatedGuildHash].templateURI = templateURI;\\n    }\\n\\n    /**\\n     * @dev ENSGuilds NFTs are non-transferrable and may only be directly minted and burned\\n     * with their corresponding guild tags.\\n     */\\n    function safeTransferFrom(address, address, uint256, uint256, bytes memory) public virtual override {\\n        revert GuildsTokenTransferNotAllowed();\\n    }\\n}\\n\",\"keccak256\":\"0x13fe76652af7cde1ccb63f2b5a6e5345c018726e3e1b77660dd4c52f6b5ee4c1\",\"license\":\"MIT\"},\"contracts/feePolicies/FeePolicy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @title FeePolicy\\n * @notice An interface for Guilds to implement that will specify how fees must be paid for guild tag mints\\n */\\nabstract contract FeePolicy is ERC165 {\\n    function supportsInterface(bytes4 interfaceID) public view virtual override(ERC165) returns (bool) {\\n        return interfaceID == type(FeePolicy).interfaceId || super.supportsInterface(interfaceID);\\n    }\\n\\n    /**\\n     * @notice Returns the fee required to mint the given guild tag by the given minter\\n     * @param guildHash The ENS namehash of the guild's domain\\n     * @param tag The tag being claimed (e.g. 'foo' for foo.my-guild.eth)\\n     * @param claimant The address attempting to claim the tag (not necessarily the address that will receive it)\\n     * @param extraClaimArgs Any additional arguments that would be passed by the minter to the claimGuildTag() function\\n     * @return tokenContract The token contract the fee must be paid in (if any). Address(0) designates native Ether.\\n     * @return fee The amount (in base unit) that must be paid\\n     * @return feePaidTo The address that should receive payment of the fee\\n     */\\n    function tagClaimFee(\\n        bytes32 guildHash,\\n        string calldata tag,\\n        address claimant,\\n        bytes calldata extraClaimArgs\\n    ) external view virtual returns (address tokenContract, uint256 fee, address feePaidTo);\\n}\\n\",\"keccak256\":\"0xa3dec1034cd5605474873a472d315d91c9ac696b7a53a59b712570203b92080a\",\"license\":\"MIT\"},\"contracts/libraries/ENSByteUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line max-line-length\\n// Source: https://github.com/ensdomains/ens-contracts/blob/340a6d05cd00d078ae40edbc58c139eb7048189a/contracts/resolvers/profiles/AddrResolver.sol\\n\\npragma solidity ^0.8.4;\\n\\n/*\\n * @dev Converts addresses to and from their byte-string representations\\n */\\nlibrary ENSByteUtils {\\n    // solhint-disable\\n    function toAddress(bytes memory b) internal pure returns (address payable a) {\\n        require(b.length == 20);\\n        assembly {\\n            a := div(mload(add(b, 32)), exp(256, 12)) // cspell:disable-line\\n        }\\n    }\\n\\n    function toBytes(address a) internal pure returns (bytes memory b) {\\n        b = new bytes(20);\\n        assembly {\\n            mstore(add(b, 32), mul(a, exp(256, 12))) // cspell:disable-line\\n        }\\n    }\\n    // solhint-enable\\n}\\n\",\"keccak256\":\"0xfc78a02027a6d31984228748a2555d04ead844e7f883dd8b334330d0150d0940\",\"license\":\"MIT\"},\"contracts/libraries/ENSNamehash.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Source: https://github.com/JonahGroendal/ens-namehash/blob/master/contracts/ENSNamehash.sol\\n\\npragma solidity ^0.8.4;\\n\\n/*\\n * @dev Solidity implementation of the ENS namehash algorithm.\\n *\\n * Warning! Does not normalize or validate names before hashing.\\n */\\nlibrary ENSNamehash {\\n    function namehash(bytes memory domain) internal pure returns (bytes32) {\\n        return namehash(domain, 0);\\n    }\\n\\n    function namehash(bytes memory domain, uint i) internal pure returns (bytes32) {\\n        if (domain.length <= i) return 0x0000000000000000000000000000000000000000000000000000000000000000;\\n\\n        uint len = LabelLength(domain, i);\\n\\n        return keccak256(abi.encodePacked(namehash(domain, i + len + 1), keccak(domain, i, len)));\\n    }\\n\\n    function LabelLength(bytes memory domain, uint i) private pure returns (uint) {\\n        uint len;\\n        while (i + len != domain.length && domain[i + len] != 0x2e) {\\n            len++;\\n        }\\n        return len;\\n    }\\n\\n    function keccak(bytes memory data, uint offset, uint len) private pure returns (bytes32 ret) {\\n        require(offset + len <= data.length);\\n        assembly {\\n            ret := keccak256(add(add(data, 32), offset), len)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2e0ef9e175164347b4c80c0f6d2e03212cabbcae8f36e8ced03f66042aca011a\",\"license\":\"MIT\"},\"contracts/tagsAuthPolicies/ITagsAuthPolicy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title TagsAuthPolicy\\n * @notice An interface for Guilds to implement that will control authorization for minting tags within that guild\\n */\\ninterface ITagsAuthPolicy is IERC165 {\\n    /**\\n     * @notice Checks whether a certain address (claimant) may claim a given guild tag\\n     * @param guildHash The ENS namehash of the guild's domain\\n     * @param tag The tag being claimed (e.g. 'foo' for foo.my-guild.eth)\\n     * @param claimant The address attempting to claim the tag (not necessarily the address that will receive it)\\n     * @param recipient The address that would receive the tag\\n     * @param extraClaimArgs [Optional] Any guild-specific additional arguments required\\n     */\\n    function canClaimTag(\\n        bytes32 guildHash,\\n        string calldata tag,\\n        address claimant,\\n        address recipient,\\n        bytes calldata extraClaimArgs\\n    ) external view returns (bool);\\n\\n    /**\\n     * @dev Called by ENSGuilds once a tag has been claimed.\\n     * Provided for auth policies to update local state, such as erasing an address from an allowlist after that\\n     * address has successfully minted a tag.\\n     * @param guildHash The ENS namehash of the guild's domain\\n     * @param tag The tag being claimed (e.g. 'foo' for foo.my-guild.eth)\\n     * @param claimant The address that claimed the tag (not necessarily the address that received it)\\n     * @param recipient The address that received receive the tag\\n     * @param extraClaimArgs [Optional] Any guild-specific additional arguments required\\n     * @return tagHashToRevoke The ENS namehash of any tag that should be revoked as a consequence of the given tag\\n     * being claimed. Returns zero if no tag should be revoked.\\n     */\\n    function onTagClaimed(\\n        bytes32 guildHash,\\n        string calldata tag,\\n        address claimant,\\n        address recipient,\\n        bytes calldata extraClaimArgs\\n    ) external returns (bytes32 tagHashToRevoke);\\n\\n    /**\\n     * @notice Checks whether a given guild tag is eligible to be revoked\\n     * @param revokedBy The address that would attempt to revoke it\\n     * @param guildHash The ENS namehash of the guild's domain\\n     * @param tag The tag being revoked (e.g. 'foo' for foo.my-guild.eth)\\n     * @param extraRevokeArgs Any additional arguments necessary for assessing whether a tag may be revoked\\n     */\\n    function tagCanBeRevoked(\\n        address revokedBy,\\n        bytes32 guildHash,\\n        string calldata tag,\\n        bytes calldata extraRevokeArgs\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc102bd8b8ad396612893f2fce271d56e7b80388ab2df80ee24934d62baf8af89\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620045353803806200453583398101604081905262000034916200009e565b81620000408162000059565b5060016005556001600160a01b031660805250620002e1565b600262000067828262000215565b5050565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b03811681146200009957600080fd5b919050565b60008060408385031215620000b257600080fd5b82516001600160401b0380821115620000ca57600080fd5b818501915085601f830112620000df57600080fd5b815181811115620000f457620000f46200006b565b604051601f8201601f19908116603f011681019083821181831017156200011f576200011f6200006b565b816040528281526020935088848487010111156200013c57600080fd5b600091505b8282101562000160578482018401518183018501529083019062000141565b60008484830101528096505050506200017b81860162000081565b925050509250929050565b600181811c908216806200019b57607f821691505b602082108103620001bc57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200021057600081815260208120601f850160051c81016020861015620001eb5750805b601f850160051c820191505b818110156200020c57828155600101620001f7565b5050505b505050565b81516001600160401b038111156200023157620002316200006b565b620002498162000242845462000186565b84620001c2565b602080601f831160018114620002815760008415620002685750858301515b600019600386901b1c1916600185901b1785556200020c565b600085815260208120601f198616915b82811015620002b25788860151825594840194600190910190840162000291565b5085821015620002d15787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6080516142076200032e6000396000818161051101528181610ec0015281816114590152818161186601528181611a4201528181611b1701528181611e8f01526127e101526142076000f3fe6080604052600436106102845760003560e01c80638308af0311610153578063cf4c5d69116100cb578063defa45af1161007f578063f1cb7e0611610064578063f1cb7e06146107fc578063f242432a1461081c578063fdfb410c1461083c57600080fd5b8063defa45af14610793578063e985e9c5146107b357600080fd5b8063d4fc16d5116100b0578063d4fc16d5146106b9578063d919713f146106d9578063dc9447201461077357600080fd5b8063cf4c5d6914610679578063d4ec5bbc1461069957600080fd5b8063a22cb46511610122578063bb2b1e8211610107578063bb2b1e8214610626578063c31fcace14610646578063c7b7b6601461065957600080fd5b8063a22cb465146105e6578063a484fba61461060657600080fd5b80638308af03146105665780638a86edba146105865780639c9925f5146105a6578063a062d1f7146105c657600080fd5b80634e1273f411610201578063734d3348116101b55780637d73b2311161019a5780637d73b231146104ff5780637e6536121461053357806380ceca5a1461055357600080fd5b8063734d3348146104bf578063784609f8146104df57600080fd5b8063620440e8116101e6578063620440e8146104565780636913ba8914610469578063699f200f1461048957600080fd5b80634e1273f414610409578063516877f61461043657600080fd5b806310c68cd811610258578063348f18f71161023d578063348f18f7146103a95780633b3b57de146103c95780633f774c4d146103e957600080fd5b806310c68cd8146103675780632eb2c2d61461038957600080fd5b8062fdd58e1461028957806301ffc9a7146102bc578063022c977f146102ec5780630e89341c1461033a575b600080fd5b34801561029557600080fd5b506102a96102a4366004613161565b61085c565b6040519081526020015b60405180910390f35b3480156102c857600080fd5b506102dc6102d73660046131a3565b610908565b60405190151581526020016102b3565b3480156102f857600080fd5b506103226103073660046131c0565b6000908152600660205260409020546001600160a01b031690565b6040516001600160a01b0390911681526020016102b3565b34801561034657600080fd5b5061035a6103553660046131c0565b61095b565b6040516102b3919061321f565b34801561037357600080fd5b5061038761038236600461327b565b610a37565b005b34801561039557600080fd5b506103876103a4366004613444565b610a8e565b3480156103b557600080fd5b506103876103c43660046134f2565b610b30565b3480156103d557600080fd5b506103226103e43660046131c0565b610b83565b3480156103f557600080fd5b506103876104043660046134f2565b610bb5565b34801561041557600080fd5b50610429610424366004613549565b610c02565b6040516102b39190613651565b34801561044257600080fd5b50610387610451366004613664565b610d40565b6103876104643660046136fe565b610d99565b34801561047557600080fd5b506103226104843660046137ad565b610df4565b34801561049557600080fd5b506103226104a43660046131c0565b6004602052600090815260409020546001600160a01b031681565b3480156104cb57600080fd5b506103226104da366004613819565b610e69565b3480156104eb57600080fd5b506103876104fa366004613849565b610f54565b34801561050b57600080fd5b506103227f000000000000000000000000000000000000000000000000000000000000000081565b34801561053f57600080fd5b5061038761054e366004613879565b611013565b610387610561366004613900565b611064565b34801561057257600080fd5b50610387610581366004613991565b6110f4565b34801561059257600080fd5b506103876105a13660046134f2565b611141565b3480156105b257600080fd5b506103876105c13660046139dd565b61118a565b3480156105d257600080fd5b506103876105e1366004613a02565b611265565b3480156105f257600080fd5b50610387610601366004613a4e565b6112e9565b34801561061257600080fd5b506103876106213660046137ad565b6112f8565b34801561063257600080fd5b50610322610641366004613879565b611346565b610387610654366004613a7c565b6113a8565b34801561066557600080fd5b50610387610674366004613aeb565b61191d565b34801561068557600080fd5b50610387610694366004613b65565b611a1f565b3480156106a557600080fd5b506103876106b43660046139dd565b611d63565b3480156106c557600080fd5b506103876106d43660046139dd565b611df9565b3480156106e557600080fd5b506107386106f43660046131c0565b6006602052600090815260409020805460018201546002909201546001600160a01b039182169282169181169060ff600160a01b8204811691600160a81b90041685565b604080516001600160a01b0396871681529486166020860152929094169183019190915215156060820152901515608082015260a0016102b3565b34801561077f57600080fd5b5061038761078e366004613bb8565b611ee7565b34801561079f57600080fd5b506103876107ae3660046131c0565b611f50565b3480156107bf57600080fd5b506102dc6107ce366004613c21565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b34801561080857600080fd5b5061035a610817366004613819565b61200c565b34801561082857600080fd5b50610387610837366004613c4f565b612055565b34801561084857600080fd5b506103876108573660046139dd565b61206e565b60006001600160a01b0383166108df5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201527f616c6964206f776e65720000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b031982166340b9de5d60e11b148061092d575061092d82612149565b8061093c575061093c82612185565b8061090257506301ffc9a760e01b6001600160e01b0319831614610902565b6001600160801b0319811660008181526003602052604090206001018054606092918291819061098a90613cb8565b159050610a255780805461099d90613cb8565b80601f01602080910402602001604051908101604052809291908181526020018280546109c990613cb8565b8015610a165780601f106109eb57610100808354040283529160200191610a16565b820191906000526020600020905b8154815290600101906020018083116109f957829003601f168201915b50505050509350505050919050565b610a2e85612190565b95945050505050565b6000610a7886868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061222492505050565b9050610a8681858585611a1f565b505050505050565b6001600160a01b038516331480610aaa5750610aaa85336107ce565b610b1c5760405162461bcd60e51b815260206004820152602e60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206f7220617070726f76656400000000000000000000000000000000000060648201526084016108d6565b610b298585858585612231565b5050505050565b6000610b7184848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061222492505050565b9050610b7d8183611d63565b50505050565b600080610b9183603c61200c565b90508051600003610ba55750600092915050565b610bae816124c7565b9392505050565b6000610bf684848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061222492505050565b9050610b7d818361206e565b60608151835114610c7b5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d61746368000000000000000000000000000000000000000000000060648201526084016108d6565b6000835167ffffffffffffffff811115610c9757610c976132f8565b604051908082528060200260200182016040528015610cc0578160200160208202803683370190505b50905060005b8451811015610d3857610d0b858281518110610ce457610ce4613cf2565b6020026020010151858381518110610cfe57610cfe613cf2565b602002602001015161085c565b828281518110610d1d57610d1d613cf2565b6020908102919091010152610d3181613d1e565b9050610cc6565b509392505050565b6000610d8187878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061222492505050565b9050610d90818686868661191d565b50505050505050565b6000610dda88888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061222492505050565b9050610dea8187878787876113a8565b5050505050505050565b600080610e3686868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061222492505050565b905060008484604051610e4a929190613d37565b60405180910390209050610e5e8282610e69565b979650505050505050565b6000808383604051602001610e88929190918252602082015260400190565b60408051808303601f190181529082905280516020909101206302571be360e01b825260048201819052915030906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906302571be390602401602060405180830381865afa158015610f07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2b9190613d47565b6001600160a01b031614610f43576000915050610902565b610f4c81610b83565b949350505050565b60008281526006602052604090205482906001600160a01b03163314610f8d57604051630e64a9cf60e21b815260040160405180910390fd5b600083815260066020526040908190206002018054841515600160a01b027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff9091161790555183907fcddecc2f17a0c961cfad3af69d94ee8d5ece1542dc95fd53f898ab77781272c49061100690851515815260200190565b60405180910390a2505050565b600061105483838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061222492505050565b905061105f81611f50565b505050565b60005b85811015610dea576110e28888888481811061108557611085613cf2565b90506020028101906110979190613d64565b8888868181106110a9576110a9613cf2565b90506020020160208101906110be9190613dab565b8787878181106110d0576110d0613cf2565b90506020028101906106549190613d64565b806110ec81613d1e565b915050611067565b600061113584848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061222492505050565b9050610b7d8183610f54565b600061118284848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061222492505050565b9050610b7d81835b60008281526006602052604090205482906001600160a01b031633146111c357604051630e64a9cf60e21b815260040160405180910390fd5b6111dd6001600160a01b038316635baf15d960e01b6124ef565b6112055760405163592e05dd60e11b81526001600160a01b03831660048201526024016108d6565b60008381526006602090815260409182902060010180546001600160a01b0319166001600160a01b038616908117909155915191825284917fe3e6191059989ec6f70a99fca0dfbb5c0cac787bba9232a0f364180133d3e7159101611006565b60008381526006602052604090205483906001600160a01b0316331461129e57604051630e64a9cf60e21b815260040160405180910390fd5b6112a984848461250b565b837fcb4872a5cd0e451374911e618bccf95b2ee0f2a1d952582d1721aeff3635217d84846040516112db929190613df1565b60405180910390a250505050565b6112f4338383612534565b5050565b600061133985858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061222492505050565b9050610b29818484611265565b60008061138884848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061222492505050565b6000818152600660205260409020549091506001600160a01b0316610f4c565b6113b0612628565b600085856040516113c2929190613d37565b6040805191829003909120600089815260066020529190912060020154909150600160a01b900460ff1661140957604051634db8e46160e01b815260040160405180910390fd5b604080516020810189905290810182905260009060600160408051808303601f190181529082905280516020909101206302571be360e01b82526004820181905291506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906302571be390602401602060405180830381865afa1580156114a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c49190613d47565b6001600160a01b0316146114eb57604051630344c41960e11b815260040160405180910390fd5b6000888152600660205260409020600201546001600160a01b031680630910b77f8a8a8a338b8b8b6040518863ffffffff1660e01b81526004016115359796959493929190613e05565b602060405180830381865afa158015611552573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115769190613e57565b611593576040516302b7adcd60e11b815260040160405180910390fd5b600089815260066020526040812060010154819081906001600160a01b0316635a50dc7e8d8d8d338d8d6040518763ffffffff1660e01b81526004016115de96959493929190613e74565b606060405180830381865afa1580156115fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161f9190613ebd565b92509250925081600014611793576001600160a01b0383166116d55781341461165b576040516320c4d7fb60e21b815260040160405180910390fd5b6000816001600160a01b03163460405160006040518083038185875af1925050503d80600081146116a8576040519150601f19603f3d011682016040523d82523d6000602084013e6116ad565b606091505b50509050806116cf576040516320c4d7fb60e21b815260040160405180910390fd5b50611793565b6001600160a01b0383166323b872dd336040516001600160e01b031960e084901b1681526001600160a01b0391821660048201529084166024820152604481018590526064016020604051808303816000875af1925050508015611756575060408051601f3d908101601f1916820190925261175391810190613e57565b60015b611773576040516320c4d7fb60e21b815260040160405180910390fd5b80611791576040516320c4d7fb60e21b815260040160405180910390fd5b505b61179e8c878b612681565b60006001600160a01b0385166329593e5a8e8e8e338f8f8f6040518863ffffffff1660e01b81526004016117d89796959493929190613e05565b6020604051808303816000875af11580156117f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181b9190613ef5565b9050801561182d5761182d8d8261277a565b6040516305ef2c7f60e41b8152600481018e90526024810188905230604482018190526064820152600060848201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635ef2c7f09060a401600060405180830381600087803b1580156118aa57600080fd5b505af11580156118be573d6000803e3d6000fd5b505050506118cc868b612882565b6040516001600160a01b038b16815287908e907fe8a6fa6264fd384a35210116a2a84bba9f414551a0c0a794dacbf8092d8e99b19060200160405180910390a350505050505050610a866001600555565b611925612628565b600085815260066020526040902060028101546001600160a01b03811690600160a81b900460ff161580156119ce5750604051632cad176760e01b81526001600160a01b03821690632cad17679061198b9033908b908b908b908b908b90600401613f0e565b602060405180830381865afa1580156119a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119cc9190613e57565b155b156119ec5760405163645b259360e11b815260040160405180910390fd5b600086866040516119fe929190613d37565b60405180910390209050611a12888261277a565b505050610b296001600555565b336040516302571be360e01b8152600481018690526001600160a01b03918216917f000000000000000000000000000000000000000000000000000000000000000016906302571be390602401602060405180830381865afa158015611a89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aad9190613d47565b6001600160a01b031614611ad4576040516326fdee4b60e11b815260040160405180910390fd5b6000848152600660205260409020600101546001600160a01b031615611b0d57604051630ea075bf60e21b815260040160405180910390fd5b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663e985e9c5336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604401602060405180830381865afa158015611b87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bab9190613e57565b611bc857604051636fd1a8ab60e01b815260040160405180910390fd5b611be26001600160a01b038316635baf15d960e01b6124ef565b611c0a5760405163592e05dd60e11b81526001600160a01b03831660048201526024016108d6565b611c246001600160a01b0382166306724f2160e11b6124ef565b611c4c5760405163592e05dd60e11b81526001600160a01b03821660048201526024016108d6565b6040805160a0810182526001600160a01b03808616825284811660208084019182528583168486019081526001606086018181526000608088018181528d82526006909552888120975188549088166001600160a01b0319918216178955955192880180549388169390961692909217909455905160029095018054935192511515600160a81b027fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff931515600160a01b027fffffffffffffffffffffff0000000000000000000000000000000000000000009095169690951695909517929092171691909117909155905185917f10906fae603eebfac53ddc0f103bee8a044dd7643c425c7a90f921dfa15ef62c91a250505050565b60008281526006602052604090205482906001600160a01b03163314611d9c57604051630e64a9cf60e21b815260040160405180910390fd5b60008381526006602090815260409182902080546001600160a01b0319166001600160a01b038616908117909155915191825284917f44ae681d782ebebc775c8c23cc18621486d68ac94ae4a8271f59892d6c8cec239101611006565b60008281526006602052604090205482906001600160a01b03163314611e3257604051630e64a9cf60e21b815260040160405180910390fd5b611e4c6001600160a01b038316639061b92360e01b6124ef565b611e6957604051638fd96e1f60e01b815260040160405180910390fd5b604051630c4b7b8560e11b8152600481018490526001600160a01b0383811660248301527f00000000000000000000000000000000000000000000000000000000000000001690631896f70a90604401600060405180830381600087803b158015611ed357600080fd5b505af1158015610d90573d6000803e3d6000fd5b60005b83811015610a8657611f3e86868684818110611f0857611f08613cf2565b9050602002810190611f1a9190613d64565b868686818110611f2c57611f2c613cf2565b90506020028101906106749190613d64565b80611f4881613d1e565b915050611eea565b60008181526006602052604090205481906001600160a01b03163314611f8957604051630e64a9cf60e21b815260040160405180910390fd5b60008281526006602052604080822080546001600160a01b03199081168255600182018054909116905560020180547fffffffffffffffffffff0000000000000000000000000000000000000000000016600160a81b1790555183917fa8167a993f10ce22abac512a74e81171d978a9d52acc66d0a46d3ff05f21ca0b91a25050565b606080603c831461201e579050610902565b6000848152600460205260409020546001600160a01b03168061204357509050610902565b610a2e816001600160a01b0316612932565b6040516338730eb560e11b815260040160405180910390fd5b60008281526006602052604090205482906001600160a01b031633146120a757604051630e64a9cf60e21b815260040160405180910390fd5b6120c16001600160a01b0383166306724f2160e11b6124ef565b6120e95760405163592e05dd60e11b81526001600160a01b03831660048201526024016108d6565b60008381526006602090815260409182902060020180546001600160a01b0319166001600160a01b038616908117909155915191825284917f276dcdaae75cd5831871106265565c93b5a5ba18286a11f7f661826476a89e5d9101611006565b60006001600160e01b03198216631d9dabef60e11b148061217a57506001600160e01b031982166378e5bf0360e11b145b806109025750610902825b60006109028261296b565b60606002805461219f90613cb8565b80601f01602080910402602001604051908101604052809291908181526020018280546121cb90613cb8565b80156122185780601f106121ed57610100808354040283529160200191612218565b820191906000526020600020905b8154815290600101906020018083116121fb57829003601f168201915b50505050509050919050565b60006109028260006129ba565b81518351146122a85760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060448201527f6d69736d6174636800000000000000000000000000000000000000000000000060648201526084016108d6565b6001600160a01b0384166123245760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016108d6565b3360005b845181101561246157600085828151811061234557612345613cf2565b60200260200101519050600085838151811061236357612363613cf2565b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156124095760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201527f72207472616e736665720000000000000000000000000000000000000000000060648201526084016108d6565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290612446908490613f4a565b925050819055505050508061245a90613d1e565b9050612328565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516124b1929190613f5d565b60405180910390a4610a86818787878787612a34565b600081516014146124d757600080fd5b50602001516c01000000000000000000000000900490565b60006124fa83612bd9565b8015610bae5750610bae8383612c0c565b6001600160801b0319831660009081526003602052604090208390600101610b29838583613fc8565b816001600160a01b0316836001600160a01b0316036125bb5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c66000000000000000000000000000000000000000000000060648201526084016108d6565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b60026005540361267a5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016108d6565b6002600555565b6001600160801b0319831660009081526003602052604090205483906fffffffffffffffffffffffffffffffff81106126fc5760405162461bcd60e51b815260206004820152601460248201527f746f6b656e436f756e7465724f766572666c6f7700000000000000000000000060448201526064016108d6565b6001600160801b031982166000908152600360205260409020805460010190556001600160801b0319851660006127338383613f4a565b905060606127448683600184612ca6565b506001600160801b0319909316600090815260036020908152604080832097835260029097019052949094209190915550505050565b60006127868383610e69565b90506001600160a01b0381166127af5760405163645b259360e11b815260040160405180910390fd5b6040516305ef2c7f60e41b815260048101849052602481018390526000604482018190526064820181905260848201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635ef2c7f09060a401600060405180830381600087803b15801561282d57600080fd5b505af1158015612841573d6000803e3d6000fd5b50505050612850838383612db1565b604051829084907f208d25d051d04de1de9bf0b973d43dcab4e9f7aad493f0768689beace7864e1790600090a3505050565b60008281526004602090815260409182902080546001600160a01b0319166001600160a01b038516908117909155915191825283917f52d7d861f09ab3d26239d492e8968629f95e9e318cf0b73bfddc441522a15fd2910160405180910390a2817f65412581168e88a1e60c6459d7f44ae83ad0832e670826c05a4e2476b57af752603c612918846001600160a01b0316612932565b604051612926929190614088565b60405180910390a25050565b6040805160148082528183019092526060916020820181803683375050506c010000000000000000000000009290920260208301525090565b60006001600160e01b03198216636cdb3d1360e11b148061093c57506001600160e01b031982166303a24d0760e21b148061090257506301ffc9a760e01b6001600160e01b0319831614610902565b6000818351116129cc57506000610902565b60006129d88484612de7565b90506129f8846129e88386613f4a565b6129f3906001613f4a565b6129ba565b612a03858584612e62565b6040805160208101939093528201526060016040516020818303038152906040528051906020012091505092915050565b6001600160a01b0384163b15610a865760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190612a7890899089908890889088906004016140a1565b6020604051808303816000875af1925050508015612ab3575060408051601f3d908101601f19168201909252612ab0918101906140ff565b60015b612b6857612abf61411c565b806308c379a003612af85750612ad3614138565b80612ade5750612afa565b8060405162461bcd60e51b81526004016108d6919061321f565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d4552433131353560448201527f526563656976657220696d706c656d656e74657200000000000000000000000060648201526084016108d6565b6001600160e01b0319811663bc197c8160e01b14610d905760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b60648201526084016108d6565b6000612bec826301ffc9a760e01b612c0c565b80156109025750612c05826001600160e01b0319612c0c565b1592915050565b604080516001600160e01b03198316602480830191909152825180830390910181526044909101909152602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166301ffc9a760e01b178152825160009392849283928392918391908a617530fa92503d91506000519050828015612c93575060208210155b8015610e5e575015159695505050505050565b6001600160a01b038416612d065760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b60648201526084016108d6565b336000612d1285612e86565b90506000612d1f85612e86565b90506000868152602081815260408083206001600160a01b038b16845290915281208054879290612d51908490613f4a565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610d9083600089898989612ed1565b6001600160801b0319831660009081526003602090815260408083208584526002019091529020548390610b2983826001612fcd565b6000805b8351612df78285613f4a565b14158015612e4b575083612e0b8285613f4a565b81518110612e1b57612e1b613cf2565b6020910101517fff0000000000000000000000000000000000000000000000000000000000000016601760f91b14155b15610bae5780612e5a81613d1e565b915050612deb565b8251600090612e718385613f4a565b1115612e7c57600080fd5b5091016020012090565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110612ec057612ec0613cf2565b602090810291909101015292915050565b6001600160a01b0384163b15610a865760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190612f1590899089908890889088906004016141c2565b6020604051808303816000875af1925050508015612f50575060408051601f3d908101601f19168201909252612f4d918101906140ff565b60015b612f5c57612abf61411c565b6001600160e01b0319811663f23a6e6160e01b14610d905760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b60648201526084016108d6565b6001600160a01b03831661302f5760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b60648201526084016108d6565b33600061303b84612e86565b9050600061304884612e86565b60408051602080820183526000918290528882528181528282206001600160a01b038b16835290522054909150848110156130d15760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b60648201526084016108d6565b6000868152602081815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4604080516020810190915260009052610d90565b6001600160a01b038116811461315e57600080fd5b50565b6000806040838503121561317457600080fd5b823561317f81613149565b946020939093013593505050565b6001600160e01b03198116811461315e57600080fd5b6000602082840312156131b557600080fd5b8135610bae8161318d565b6000602082840312156131d257600080fd5b5035919050565b6000815180845260005b818110156131ff576020818501810151868301820152016131e3565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000610bae60208301846131d9565b60008083601f84011261324457600080fd5b50813567ffffffffffffffff81111561325c57600080fd5b60208301915083602082850101111561327457600080fd5b9250929050565b60008060008060006080868803121561329357600080fd5b853567ffffffffffffffff8111156132aa57600080fd5b6132b688828901613232565b90965094505060208601356132ca81613149565b925060408601356132da81613149565b915060608601356132ea81613149565b809150509295509295909350565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715613334576133346132f8565b6040525050565b600067ffffffffffffffff821115613355576133556132f8565b5060051b60200190565b600082601f83011261337057600080fd5b8135602061337d8261333b565b60405161338a828261330e565b83815260059390931b85018201928281019150868411156133aa57600080fd5b8286015b848110156133c557803583529183019183016133ae565b509695505050505050565b600082601f8301126133e157600080fd5b813567ffffffffffffffff8111156133fb576133fb6132f8565b604051613412601f8301601f19166020018261330e565b81815284602083860101111561342757600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561345c57600080fd5b853561346781613149565b9450602086013561347781613149565b9350604086013567ffffffffffffffff8082111561349457600080fd5b6134a089838a0161335f565b945060608801359150808211156134b657600080fd5b6134c289838a0161335f565b935060808801359150808211156134d857600080fd5b506134e5888289016133d0565b9150509295509295909350565b60008060006040848603121561350757600080fd5b833567ffffffffffffffff81111561351e57600080fd5b61352a86828701613232565b909450925050602084013561353e81613149565b809150509250925092565b6000806040838503121561355c57600080fd5b823567ffffffffffffffff8082111561357457600080fd5b818501915085601f83011261358857600080fd5b813560206135958261333b565b6040516135a2828261330e565b83815260059390931b85018201928281019150898411156135c257600080fd5b948201945b838610156135e95785356135da81613149565b825294820194908201906135c7565b965050860135925050808211156135ff57600080fd5b5061360c8582860161335f565b9150509250929050565b600081518084526020808501945080840160005b838110156136465781518752958201959082019060010161362a565b509495945050505050565b602081526000610bae6020830184613616565b6000806000806000806060878903121561367d57600080fd5b863567ffffffffffffffff8082111561369557600080fd5b6136a18a838b01613232565b909850965060208901359150808211156136ba57600080fd5b6136c68a838b01613232565b909650945060408901359150808211156136df57600080fd5b506136ec89828a01613232565b979a9699509497509295939492505050565b60008060008060008060006080888a03121561371957600080fd5b873567ffffffffffffffff8082111561373157600080fd5b61373d8b838c01613232565b909950975060208a013591508082111561375657600080fd5b6137628b838c01613232565b909750955060408a0135915061377782613149565b9093506060890135908082111561378d57600080fd5b5061379a8a828b01613232565b989b979a50959850939692959293505050565b600080600080604085870312156137c357600080fd5b843567ffffffffffffffff808211156137db57600080fd5b6137e788838901613232565b9096509450602087013591508082111561380057600080fd5b5061380d87828801613232565b95989497509550505050565b6000806040838503121561382c57600080fd5b50508035926020909101359150565b801515811461315e57600080fd5b6000806040838503121561385c57600080fd5b82359150602083013561386e8161383b565b809150509250929050565b6000806020838503121561388c57600080fd5b823567ffffffffffffffff8111156138a357600080fd5b6138af85828601613232565b90969095509350505050565b60008083601f8401126138cd57600080fd5b50813567ffffffffffffffff8111156138e557600080fd5b6020830191508360208260051b850101111561327457600080fd5b60008060008060008060006080888a03121561391b57600080fd5b87359650602088013567ffffffffffffffff8082111561393a57600080fd5b6139468b838c016138bb565b909850965060408a013591508082111561395f57600080fd5b61396b8b838c016138bb565b909650945060608a013591508082111561398457600080fd5b5061379a8a828b016138bb565b6000806000604084860312156139a657600080fd5b833567ffffffffffffffff8111156139bd57600080fd5b6139c986828701613232565b909450925050602084013561353e8161383b565b600080604083850312156139f057600080fd5b82359150602083013561386e81613149565b600080600060408486031215613a1757600080fd5b83359250602084013567ffffffffffffffff811115613a3557600080fd5b613a4186828701613232565b9497909650939450505050565b60008060408385031215613a6157600080fd5b8235613a6c81613149565b9150602083013561386e8161383b565b60008060008060008060808789031215613a9557600080fd5b86359550602087013567ffffffffffffffff80821115613ab457600080fd5b613ac08a838b01613232565b909750955060408901359150613ad582613149565b909350606088013590808211156136df57600080fd5b600080600080600060608688031215613b0357600080fd5b85359450602086013567ffffffffffffffff80821115613b2257600080fd5b613b2e89838a01613232565b90965094506040880135915080821115613b4757600080fd5b50613b5488828901613232565b969995985093965092949392505050565b60008060008060808587031215613b7b57600080fd5b843593506020850135613b8d81613149565b92506040850135613b9d81613149565b91506060850135613bad81613149565b939692955090935050565b600080600080600060608688031215613bd057600080fd5b85359450602086013567ffffffffffffffff80821115613bef57600080fd5b613bfb89838a016138bb565b90965094506040880135915080821115613c1457600080fd5b50613b54888289016138bb565b60008060408385031215613c3457600080fd5b8235613c3f81613149565b9150602083013561386e81613149565b600080600080600060a08688031215613c6757600080fd5b8535613c7281613149565b94506020860135613c8281613149565b93506040860135925060608601359150608086013567ffffffffffffffff811115613cac57600080fd5b6134e5888289016133d0565b600181811c90821680613ccc57607f821691505b602082108103613cec57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201613d3057613d30613d08565b5060010190565b8183823760009101908152919050565b600060208284031215613d5957600080fd5b8151610bae81613149565b6000808335601e19843603018112613d7b57600080fd5b83018035915067ffffffffffffffff821115613d9657600080fd5b60200191503681900382131561327457600080fd5b600060208284031215613dbd57600080fd5b8135610bae81613149565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b602081526000610f4c602083018486613dc8565b87815260a060208201526000613e1f60a08301888a613dc8565b6001600160a01b038781166040850152861660608401528281036080840152613e49818587613dc8565b9a9950505050505050505050565b600060208284031215613e6957600080fd5b8151610bae8161383b565b868152608060208201526000613e8e608083018789613dc8565b6001600160a01b03861660408401528281036060840152613eb0818587613dc8565b9998505050505050505050565b600080600060608486031215613ed257600080fd5b8351613edd81613149565b60208501516040860151919450925061353e81613149565b600060208284031215613f0757600080fd5b5051919050565b6001600160a01b0387168152856020820152608060408201526000613f37608083018688613dc8565b8281036060840152613eb0818587613dc8565b8082018082111561090257610902613d08565b604081526000613f706040830185613616565b8281036020840152610a2e8185613616565b601f82111561105f57600081815260208120601f850160051c81016020861015613fa95750805b601f850160051c820191505b81811015610a8657828155600101613fb5565b67ffffffffffffffff831115613fe057613fe06132f8565b613ff483613fee8354613cb8565b83613f82565b6000601f84116001811461402857600085156140105750838201355b600019600387901b1c1916600186901b178355610b29565b600083815260209020601f19861690835b828110156140595786850135825560209485019460019092019101614039565b50868210156140765760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b828152604060208201526000610f4c60408301846131d9565b60006001600160a01b03808816835280871660208401525060a060408301526140cd60a0830186613616565b82810360608401526140df8186613616565b905082810360808401526140f381856131d9565b98975050505050505050565b60006020828403121561411157600080fd5b8151610bae8161318d565b600060033d11156141355760046000803e5060005160e01c5b90565b600060443d10156141465790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561417657505050505090565b828501915081518181111561418e5750505050505090565b843d87010160208285010111156141a85750505050505090565b6141b76020828601018761330e565b509095945050505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a06080830152610e5e60a08301846131d956fea164736f6c6343000811000a",
  "deployedBytecode": "0x6080604052600436106102845760003560e01c80638308af0311610153578063cf4c5d69116100cb578063defa45af1161007f578063f1cb7e0611610064578063f1cb7e06146107fc578063f242432a1461081c578063fdfb410c1461083c57600080fd5b8063defa45af14610793578063e985e9c5146107b357600080fd5b8063d4fc16d5116100b0578063d4fc16d5146106b9578063d919713f146106d9578063dc9447201461077357600080fd5b8063cf4c5d6914610679578063d4ec5bbc1461069957600080fd5b8063a22cb46511610122578063bb2b1e8211610107578063bb2b1e8214610626578063c31fcace14610646578063c7b7b6601461065957600080fd5b8063a22cb465146105e6578063a484fba61461060657600080fd5b80638308af03146105665780638a86edba146105865780639c9925f5146105a6578063a062d1f7146105c657600080fd5b80634e1273f411610201578063734d3348116101b55780637d73b2311161019a5780637d73b231146104ff5780637e6536121461053357806380ceca5a1461055357600080fd5b8063734d3348146104bf578063784609f8146104df57600080fd5b8063620440e8116101e6578063620440e8146104565780636913ba8914610469578063699f200f1461048957600080fd5b80634e1273f414610409578063516877f61461043657600080fd5b806310c68cd811610258578063348f18f71161023d578063348f18f7146103a95780633b3b57de146103c95780633f774c4d146103e957600080fd5b806310c68cd8146103675780632eb2c2d61461038957600080fd5b8062fdd58e1461028957806301ffc9a7146102bc578063022c977f146102ec5780630e89341c1461033a575b600080fd5b34801561029557600080fd5b506102a96102a4366004613161565b61085c565b6040519081526020015b60405180910390f35b3480156102c857600080fd5b506102dc6102d73660046131a3565b610908565b60405190151581526020016102b3565b3480156102f857600080fd5b506103226103073660046131c0565b6000908152600660205260409020546001600160a01b031690565b6040516001600160a01b0390911681526020016102b3565b34801561034657600080fd5b5061035a6103553660046131c0565b61095b565b6040516102b3919061321f565b34801561037357600080fd5b5061038761038236600461327b565b610a37565b005b34801561039557600080fd5b506103876103a4366004613444565b610a8e565b3480156103b557600080fd5b506103876103c43660046134f2565b610b30565b3480156103d557600080fd5b506103226103e43660046131c0565b610b83565b3480156103f557600080fd5b506103876104043660046134f2565b610bb5565b34801561041557600080fd5b50610429610424366004613549565b610c02565b6040516102b39190613651565b34801561044257600080fd5b50610387610451366004613664565b610d40565b6103876104643660046136fe565b610d99565b34801561047557600080fd5b506103226104843660046137ad565b610df4565b34801561049557600080fd5b506103226104a43660046131c0565b6004602052600090815260409020546001600160a01b031681565b3480156104cb57600080fd5b506103226104da366004613819565b610e69565b3480156104eb57600080fd5b506103876104fa366004613849565b610f54565b34801561050b57600080fd5b506103227f000000000000000000000000000000000000000000000000000000000000000081565b34801561053f57600080fd5b5061038761054e366004613879565b611013565b610387610561366004613900565b611064565b34801561057257600080fd5b50610387610581366004613991565b6110f4565b34801561059257600080fd5b506103876105a13660046134f2565b611141565b3480156105b257600080fd5b506103876105c13660046139dd565b61118a565b3480156105d257600080fd5b506103876105e1366004613a02565b611265565b3480156105f257600080fd5b50610387610601366004613a4e565b6112e9565b34801561061257600080fd5b506103876106213660046137ad565b6112f8565b34801561063257600080fd5b50610322610641366004613879565b611346565b610387610654366004613a7c565b6113a8565b34801561066557600080fd5b50610387610674366004613aeb565b61191d565b34801561068557600080fd5b50610387610694366004613b65565b611a1f565b3480156106a557600080fd5b506103876106b43660046139dd565b611d63565b3480156106c557600080fd5b506103876106d43660046139dd565b611df9565b3480156106e557600080fd5b506107386106f43660046131c0565b6006602052600090815260409020805460018201546002909201546001600160a01b039182169282169181169060ff600160a01b8204811691600160a81b90041685565b604080516001600160a01b0396871681529486166020860152929094169183019190915215156060820152901515608082015260a0016102b3565b34801561077f57600080fd5b5061038761078e366004613bb8565b611ee7565b34801561079f57600080fd5b506103876107ae3660046131c0565b611f50565b3480156107bf57600080fd5b506102dc6107ce366004613c21565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b34801561080857600080fd5b5061035a610817366004613819565b61200c565b34801561082857600080fd5b50610387610837366004613c4f565b612055565b34801561084857600080fd5b506103876108573660046139dd565b61206e565b60006001600160a01b0383166108df5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201527f616c6964206f776e65720000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b031982166340b9de5d60e11b148061092d575061092d82612149565b8061093c575061093c82612185565b8061090257506301ffc9a760e01b6001600160e01b0319831614610902565b6001600160801b0319811660008181526003602052604090206001018054606092918291819061098a90613cb8565b159050610a255780805461099d90613cb8565b80601f01602080910402602001604051908101604052809291908181526020018280546109c990613cb8565b8015610a165780601f106109eb57610100808354040283529160200191610a16565b820191906000526020600020905b8154815290600101906020018083116109f957829003601f168201915b50505050509350505050919050565b610a2e85612190565b95945050505050565b6000610a7886868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061222492505050565b9050610a8681858585611a1f565b505050505050565b6001600160a01b038516331480610aaa5750610aaa85336107ce565b610b1c5760405162461bcd60e51b815260206004820152602e60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206f7220617070726f76656400000000000000000000000000000000000060648201526084016108d6565b610b298585858585612231565b5050505050565b6000610b7184848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061222492505050565b9050610b7d8183611d63565b50505050565b600080610b9183603c61200c565b90508051600003610ba55750600092915050565b610bae816124c7565b9392505050565b6000610bf684848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061222492505050565b9050610b7d818361206e565b60608151835114610c7b5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d61746368000000000000000000000000000000000000000000000060648201526084016108d6565b6000835167ffffffffffffffff811115610c9757610c976132f8565b604051908082528060200260200182016040528015610cc0578160200160208202803683370190505b50905060005b8451811015610d3857610d0b858281518110610ce457610ce4613cf2565b6020026020010151858381518110610cfe57610cfe613cf2565b602002602001015161085c565b828281518110610d1d57610d1d613cf2565b6020908102919091010152610d3181613d1e565b9050610cc6565b509392505050565b6000610d8187878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061222492505050565b9050610d90818686868661191d565b50505050505050565b6000610dda88888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061222492505050565b9050610dea8187878787876113a8565b5050505050505050565b600080610e3686868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061222492505050565b905060008484604051610e4a929190613d37565b60405180910390209050610e5e8282610e69565b979650505050505050565b6000808383604051602001610e88929190918252602082015260400190565b60408051808303601f190181529082905280516020909101206302571be360e01b825260048201819052915030906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906302571be390602401602060405180830381865afa158015610f07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2b9190613d47565b6001600160a01b031614610f43576000915050610902565b610f4c81610b83565b949350505050565b60008281526006602052604090205482906001600160a01b03163314610f8d57604051630e64a9cf60e21b815260040160405180910390fd5b600083815260066020526040908190206002018054841515600160a01b027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff9091161790555183907fcddecc2f17a0c961cfad3af69d94ee8d5ece1542dc95fd53f898ab77781272c49061100690851515815260200190565b60405180910390a2505050565b600061105483838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061222492505050565b905061105f81611f50565b505050565b60005b85811015610dea576110e28888888481811061108557611085613cf2565b90506020028101906110979190613d64565b8888868181106110a9576110a9613cf2565b90506020020160208101906110be9190613dab565b8787878181106110d0576110d0613cf2565b90506020028101906106549190613d64565b806110ec81613d1e565b915050611067565b600061113584848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061222492505050565b9050610b7d8183610f54565b600061118284848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061222492505050565b9050610b7d81835b60008281526006602052604090205482906001600160a01b031633146111c357604051630e64a9cf60e21b815260040160405180910390fd5b6111dd6001600160a01b038316635baf15d960e01b6124ef565b6112055760405163592e05dd60e11b81526001600160a01b03831660048201526024016108d6565b60008381526006602090815260409182902060010180546001600160a01b0319166001600160a01b038616908117909155915191825284917fe3e6191059989ec6f70a99fca0dfbb5c0cac787bba9232a0f364180133d3e7159101611006565b60008381526006602052604090205483906001600160a01b0316331461129e57604051630e64a9cf60e21b815260040160405180910390fd5b6112a984848461250b565b837fcb4872a5cd0e451374911e618bccf95b2ee0f2a1d952582d1721aeff3635217d84846040516112db929190613df1565b60405180910390a250505050565b6112f4338383612534565b5050565b600061133985858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061222492505050565b9050610b29818484611265565b60008061138884848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061222492505050565b6000818152600660205260409020549091506001600160a01b0316610f4c565b6113b0612628565b600085856040516113c2929190613d37565b6040805191829003909120600089815260066020529190912060020154909150600160a01b900460ff1661140957604051634db8e46160e01b815260040160405180910390fd5b604080516020810189905290810182905260009060600160408051808303601f190181529082905280516020909101206302571be360e01b82526004820181905291506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906302571be390602401602060405180830381865afa1580156114a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c49190613d47565b6001600160a01b0316146114eb57604051630344c41960e11b815260040160405180910390fd5b6000888152600660205260409020600201546001600160a01b031680630910b77f8a8a8a338b8b8b6040518863ffffffff1660e01b81526004016115359796959493929190613e05565b602060405180830381865afa158015611552573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115769190613e57565b611593576040516302b7adcd60e11b815260040160405180910390fd5b600089815260066020526040812060010154819081906001600160a01b0316635a50dc7e8d8d8d338d8d6040518763ffffffff1660e01b81526004016115de96959493929190613e74565b606060405180830381865afa1580156115fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161f9190613ebd565b92509250925081600014611793576001600160a01b0383166116d55781341461165b576040516320c4d7fb60e21b815260040160405180910390fd5b6000816001600160a01b03163460405160006040518083038185875af1925050503d80600081146116a8576040519150601f19603f3d011682016040523d82523d6000602084013e6116ad565b606091505b50509050806116cf576040516320c4d7fb60e21b815260040160405180910390fd5b50611793565b6001600160a01b0383166323b872dd336040516001600160e01b031960e084901b1681526001600160a01b0391821660048201529084166024820152604481018590526064016020604051808303816000875af1925050508015611756575060408051601f3d908101601f1916820190925261175391810190613e57565b60015b611773576040516320c4d7fb60e21b815260040160405180910390fd5b80611791576040516320c4d7fb60e21b815260040160405180910390fd5b505b61179e8c878b612681565b60006001600160a01b0385166329593e5a8e8e8e338f8f8f6040518863ffffffff1660e01b81526004016117d89796959493929190613e05565b6020604051808303816000875af11580156117f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181b9190613ef5565b9050801561182d5761182d8d8261277a565b6040516305ef2c7f60e41b8152600481018e90526024810188905230604482018190526064820152600060848201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635ef2c7f09060a401600060405180830381600087803b1580156118aa57600080fd5b505af11580156118be573d6000803e3d6000fd5b505050506118cc868b612882565b6040516001600160a01b038b16815287908e907fe8a6fa6264fd384a35210116a2a84bba9f414551a0c0a794dacbf8092d8e99b19060200160405180910390a350505050505050610a866001600555565b611925612628565b600085815260066020526040902060028101546001600160a01b03811690600160a81b900460ff161580156119ce5750604051632cad176760e01b81526001600160a01b03821690632cad17679061198b9033908b908b908b908b908b90600401613f0e565b602060405180830381865afa1580156119a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119cc9190613e57565b155b156119ec5760405163645b259360e11b815260040160405180910390fd5b600086866040516119fe929190613d37565b60405180910390209050611a12888261277a565b505050610b296001600555565b336040516302571be360e01b8152600481018690526001600160a01b03918216917f000000000000000000000000000000000000000000000000000000000000000016906302571be390602401602060405180830381865afa158015611a89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aad9190613d47565b6001600160a01b031614611ad4576040516326fdee4b60e11b815260040160405180910390fd5b6000848152600660205260409020600101546001600160a01b031615611b0d57604051630ea075bf60e21b815260040160405180910390fd5b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663e985e9c5336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604401602060405180830381865afa158015611b87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bab9190613e57565b611bc857604051636fd1a8ab60e01b815260040160405180910390fd5b611be26001600160a01b038316635baf15d960e01b6124ef565b611c0a5760405163592e05dd60e11b81526001600160a01b03831660048201526024016108d6565b611c246001600160a01b0382166306724f2160e11b6124ef565b611c4c5760405163592e05dd60e11b81526001600160a01b03821660048201526024016108d6565b6040805160a0810182526001600160a01b03808616825284811660208084019182528583168486019081526001606086018181526000608088018181528d82526006909552888120975188549088166001600160a01b0319918216178955955192880180549388169390961692909217909455905160029095018054935192511515600160a81b027fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff931515600160a01b027fffffffffffffffffffffff0000000000000000000000000000000000000000009095169690951695909517929092171691909117909155905185917f10906fae603eebfac53ddc0f103bee8a044dd7643c425c7a90f921dfa15ef62c91a250505050565b60008281526006602052604090205482906001600160a01b03163314611d9c57604051630e64a9cf60e21b815260040160405180910390fd5b60008381526006602090815260409182902080546001600160a01b0319166001600160a01b038616908117909155915191825284917f44ae681d782ebebc775c8c23cc18621486d68ac94ae4a8271f59892d6c8cec239101611006565b60008281526006602052604090205482906001600160a01b03163314611e3257604051630e64a9cf60e21b815260040160405180910390fd5b611e4c6001600160a01b038316639061b92360e01b6124ef565b611e6957604051638fd96e1f60e01b815260040160405180910390fd5b604051630c4b7b8560e11b8152600481018490526001600160a01b0383811660248301527f00000000000000000000000000000000000000000000000000000000000000001690631896f70a90604401600060405180830381600087803b158015611ed357600080fd5b505af1158015610d90573d6000803e3d6000fd5b60005b83811015610a8657611f3e86868684818110611f0857611f08613cf2565b9050602002810190611f1a9190613d64565b868686818110611f2c57611f2c613cf2565b90506020028101906106749190613d64565b80611f4881613d1e565b915050611eea565b60008181526006602052604090205481906001600160a01b03163314611f8957604051630e64a9cf60e21b815260040160405180910390fd5b60008281526006602052604080822080546001600160a01b03199081168255600182018054909116905560020180547fffffffffffffffffffff0000000000000000000000000000000000000000000016600160a81b1790555183917fa8167a993f10ce22abac512a74e81171d978a9d52acc66d0a46d3ff05f21ca0b91a25050565b606080603c831461201e579050610902565b6000848152600460205260409020546001600160a01b03168061204357509050610902565b610a2e816001600160a01b0316612932565b6040516338730eb560e11b815260040160405180910390fd5b60008281526006602052604090205482906001600160a01b031633146120a757604051630e64a9cf60e21b815260040160405180910390fd5b6120c16001600160a01b0383166306724f2160e11b6124ef565b6120e95760405163592e05dd60e11b81526001600160a01b03831660048201526024016108d6565b60008381526006602090815260409182902060020180546001600160a01b0319166001600160a01b038616908117909155915191825284917f276dcdaae75cd5831871106265565c93b5a5ba18286a11f7f661826476a89e5d9101611006565b60006001600160e01b03198216631d9dabef60e11b148061217a57506001600160e01b031982166378e5bf0360e11b145b806109025750610902825b60006109028261296b565b60606002805461219f90613cb8565b80601f01602080910402602001604051908101604052809291908181526020018280546121cb90613cb8565b80156122185780601f106121ed57610100808354040283529160200191612218565b820191906000526020600020905b8154815290600101906020018083116121fb57829003601f168201915b50505050509050919050565b60006109028260006129ba565b81518351146122a85760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060448201527f6d69736d6174636800000000000000000000000000000000000000000000000060648201526084016108d6565b6001600160a01b0384166123245760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016108d6565b3360005b845181101561246157600085828151811061234557612345613cf2565b60200260200101519050600085838151811061236357612363613cf2565b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156124095760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201527f72207472616e736665720000000000000000000000000000000000000000000060648201526084016108d6565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290612446908490613f4a565b925050819055505050508061245a90613d1e565b9050612328565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516124b1929190613f5d565b60405180910390a4610a86818787878787612a34565b600081516014146124d757600080fd5b50602001516c01000000000000000000000000900490565b60006124fa83612bd9565b8015610bae5750610bae8383612c0c565b6001600160801b0319831660009081526003602052604090208390600101610b29838583613fc8565b816001600160a01b0316836001600160a01b0316036125bb5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c66000000000000000000000000000000000000000000000060648201526084016108d6565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b60026005540361267a5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016108d6565b6002600555565b6001600160801b0319831660009081526003602052604090205483906fffffffffffffffffffffffffffffffff81106126fc5760405162461bcd60e51b815260206004820152601460248201527f746f6b656e436f756e7465724f766572666c6f7700000000000000000000000060448201526064016108d6565b6001600160801b031982166000908152600360205260409020805460010190556001600160801b0319851660006127338383613f4a565b905060606127448683600184612ca6565b506001600160801b0319909316600090815260036020908152604080832097835260029097019052949094209190915550505050565b60006127868383610e69565b90506001600160a01b0381166127af5760405163645b259360e11b815260040160405180910390fd5b6040516305ef2c7f60e41b815260048101849052602481018390526000604482018190526064820181905260848201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635ef2c7f09060a401600060405180830381600087803b15801561282d57600080fd5b505af1158015612841573d6000803e3d6000fd5b50505050612850838383612db1565b604051829084907f208d25d051d04de1de9bf0b973d43dcab4e9f7aad493f0768689beace7864e1790600090a3505050565b60008281526004602090815260409182902080546001600160a01b0319166001600160a01b038516908117909155915191825283917f52d7d861f09ab3d26239d492e8968629f95e9e318cf0b73bfddc441522a15fd2910160405180910390a2817f65412581168e88a1e60c6459d7f44ae83ad0832e670826c05a4e2476b57af752603c612918846001600160a01b0316612932565b604051612926929190614088565b60405180910390a25050565b6040805160148082528183019092526060916020820181803683375050506c010000000000000000000000009290920260208301525090565b60006001600160e01b03198216636cdb3d1360e11b148061093c57506001600160e01b031982166303a24d0760e21b148061090257506301ffc9a760e01b6001600160e01b0319831614610902565b6000818351116129cc57506000610902565b60006129d88484612de7565b90506129f8846129e88386613f4a565b6129f3906001613f4a565b6129ba565b612a03858584612e62565b6040805160208101939093528201526060016040516020818303038152906040528051906020012091505092915050565b6001600160a01b0384163b15610a865760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190612a7890899089908890889088906004016140a1565b6020604051808303816000875af1925050508015612ab3575060408051601f3d908101601f19168201909252612ab0918101906140ff565b60015b612b6857612abf61411c565b806308c379a003612af85750612ad3614138565b80612ade5750612afa565b8060405162461bcd60e51b81526004016108d6919061321f565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d4552433131353560448201527f526563656976657220696d706c656d656e74657200000000000000000000000060648201526084016108d6565b6001600160e01b0319811663bc197c8160e01b14610d905760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b60648201526084016108d6565b6000612bec826301ffc9a760e01b612c0c565b80156109025750612c05826001600160e01b0319612c0c565b1592915050565b604080516001600160e01b03198316602480830191909152825180830390910181526044909101909152602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166301ffc9a760e01b178152825160009392849283928392918391908a617530fa92503d91506000519050828015612c93575060208210155b8015610e5e575015159695505050505050565b6001600160a01b038416612d065760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b60648201526084016108d6565b336000612d1285612e86565b90506000612d1f85612e86565b90506000868152602081815260408083206001600160a01b038b16845290915281208054879290612d51908490613f4a565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610d9083600089898989612ed1565b6001600160801b0319831660009081526003602090815260408083208584526002019091529020548390610b2983826001612fcd565b6000805b8351612df78285613f4a565b14158015612e4b575083612e0b8285613f4a565b81518110612e1b57612e1b613cf2565b6020910101517fff0000000000000000000000000000000000000000000000000000000000000016601760f91b14155b15610bae5780612e5a81613d1e565b915050612deb565b8251600090612e718385613f4a565b1115612e7c57600080fd5b5091016020012090565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110612ec057612ec0613cf2565b602090810291909101015292915050565b6001600160a01b0384163b15610a865760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190612f1590899089908890889088906004016141c2565b6020604051808303816000875af1925050508015612f50575060408051601f3d908101601f19168201909252612f4d918101906140ff565b60015b612f5c57612abf61411c565b6001600160e01b0319811663f23a6e6160e01b14610d905760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b60648201526084016108d6565b6001600160a01b03831661302f5760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b60648201526084016108d6565b33600061303b84612e86565b9050600061304884612e86565b60408051602080820183526000918290528882528181528282206001600160a01b038b16835290522054909150848110156130d15760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b60648201526084016108d6565b6000868152602081815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4604080516020810190915260009052610d90565b6001600160a01b038116811461315e57600080fd5b50565b6000806040838503121561317457600080fd5b823561317f81613149565b946020939093013593505050565b6001600160e01b03198116811461315e57600080fd5b6000602082840312156131b557600080fd5b8135610bae8161318d565b6000602082840312156131d257600080fd5b5035919050565b6000815180845260005b818110156131ff576020818501810151868301820152016131e3565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000610bae60208301846131d9565b60008083601f84011261324457600080fd5b50813567ffffffffffffffff81111561325c57600080fd5b60208301915083602082850101111561327457600080fd5b9250929050565b60008060008060006080868803121561329357600080fd5b853567ffffffffffffffff8111156132aa57600080fd5b6132b688828901613232565b90965094505060208601356132ca81613149565b925060408601356132da81613149565b915060608601356132ea81613149565b809150509295509295909350565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715613334576133346132f8565b6040525050565b600067ffffffffffffffff821115613355576133556132f8565b5060051b60200190565b600082601f83011261337057600080fd5b8135602061337d8261333b565b60405161338a828261330e565b83815260059390931b85018201928281019150868411156133aa57600080fd5b8286015b848110156133c557803583529183019183016133ae565b509695505050505050565b600082601f8301126133e157600080fd5b813567ffffffffffffffff8111156133fb576133fb6132f8565b604051613412601f8301601f19166020018261330e565b81815284602083860101111561342757600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561345c57600080fd5b853561346781613149565b9450602086013561347781613149565b9350604086013567ffffffffffffffff8082111561349457600080fd5b6134a089838a0161335f565b945060608801359150808211156134b657600080fd5b6134c289838a0161335f565b935060808801359150808211156134d857600080fd5b506134e5888289016133d0565b9150509295509295909350565b60008060006040848603121561350757600080fd5b833567ffffffffffffffff81111561351e57600080fd5b61352a86828701613232565b909450925050602084013561353e81613149565b809150509250925092565b6000806040838503121561355c57600080fd5b823567ffffffffffffffff8082111561357457600080fd5b818501915085601f83011261358857600080fd5b813560206135958261333b565b6040516135a2828261330e565b83815260059390931b85018201928281019150898411156135c257600080fd5b948201945b838610156135e95785356135da81613149565b825294820194908201906135c7565b965050860135925050808211156135ff57600080fd5b5061360c8582860161335f565b9150509250929050565b600081518084526020808501945080840160005b838110156136465781518752958201959082019060010161362a565b509495945050505050565b602081526000610bae6020830184613616565b6000806000806000806060878903121561367d57600080fd5b863567ffffffffffffffff8082111561369557600080fd5b6136a18a838b01613232565b909850965060208901359150808211156136ba57600080fd5b6136c68a838b01613232565b909650945060408901359150808211156136df57600080fd5b506136ec89828a01613232565b979a9699509497509295939492505050565b60008060008060008060006080888a03121561371957600080fd5b873567ffffffffffffffff8082111561373157600080fd5b61373d8b838c01613232565b909950975060208a013591508082111561375657600080fd5b6137628b838c01613232565b909750955060408a0135915061377782613149565b9093506060890135908082111561378d57600080fd5b5061379a8a828b01613232565b989b979a50959850939692959293505050565b600080600080604085870312156137c357600080fd5b843567ffffffffffffffff808211156137db57600080fd5b6137e788838901613232565b9096509450602087013591508082111561380057600080fd5b5061380d87828801613232565b95989497509550505050565b6000806040838503121561382c57600080fd5b50508035926020909101359150565b801515811461315e57600080fd5b6000806040838503121561385c57600080fd5b82359150602083013561386e8161383b565b809150509250929050565b6000806020838503121561388c57600080fd5b823567ffffffffffffffff8111156138a357600080fd5b6138af85828601613232565b90969095509350505050565b60008083601f8401126138cd57600080fd5b50813567ffffffffffffffff8111156138e557600080fd5b6020830191508360208260051b850101111561327457600080fd5b60008060008060008060006080888a03121561391b57600080fd5b87359650602088013567ffffffffffffffff8082111561393a57600080fd5b6139468b838c016138bb565b909850965060408a013591508082111561395f57600080fd5b61396b8b838c016138bb565b909650945060608a013591508082111561398457600080fd5b5061379a8a828b016138bb565b6000806000604084860312156139a657600080fd5b833567ffffffffffffffff8111156139bd57600080fd5b6139c986828701613232565b909450925050602084013561353e8161383b565b600080604083850312156139f057600080fd5b82359150602083013561386e81613149565b600080600060408486031215613a1757600080fd5b83359250602084013567ffffffffffffffff811115613a3557600080fd5b613a4186828701613232565b9497909650939450505050565b60008060408385031215613a6157600080fd5b8235613a6c81613149565b9150602083013561386e8161383b565b60008060008060008060808789031215613a9557600080fd5b86359550602087013567ffffffffffffffff80821115613ab457600080fd5b613ac08a838b01613232565b909750955060408901359150613ad582613149565b909350606088013590808211156136df57600080fd5b600080600080600060608688031215613b0357600080fd5b85359450602086013567ffffffffffffffff80821115613b2257600080fd5b613b2e89838a01613232565b90965094506040880135915080821115613b4757600080fd5b50613b5488828901613232565b969995985093965092949392505050565b60008060008060808587031215613b7b57600080fd5b843593506020850135613b8d81613149565b92506040850135613b9d81613149565b91506060850135613bad81613149565b939692955090935050565b600080600080600060608688031215613bd057600080fd5b85359450602086013567ffffffffffffffff80821115613bef57600080fd5b613bfb89838a016138bb565b90965094506040880135915080821115613c1457600080fd5b50613b54888289016138bb565b60008060408385031215613c3457600080fd5b8235613c3f81613149565b9150602083013561386e81613149565b600080600080600060a08688031215613c6757600080fd5b8535613c7281613149565b94506020860135613c8281613149565b93506040860135925060608601359150608086013567ffffffffffffffff811115613cac57600080fd5b6134e5888289016133d0565b600181811c90821680613ccc57607f821691505b602082108103613cec57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201613d3057613d30613d08565b5060010190565b8183823760009101908152919050565b600060208284031215613d5957600080fd5b8151610bae81613149565b6000808335601e19843603018112613d7b57600080fd5b83018035915067ffffffffffffffff821115613d9657600080fd5b60200191503681900382131561327457600080fd5b600060208284031215613dbd57600080fd5b8135610bae81613149565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b602081526000610f4c602083018486613dc8565b87815260a060208201526000613e1f60a08301888a613dc8565b6001600160a01b038781166040850152861660608401528281036080840152613e49818587613dc8565b9a9950505050505050505050565b600060208284031215613e6957600080fd5b8151610bae8161383b565b868152608060208201526000613e8e608083018789613dc8565b6001600160a01b03861660408401528281036060840152613eb0818587613dc8565b9998505050505050505050565b600080600060608486031215613ed257600080fd5b8351613edd81613149565b60208501516040860151919450925061353e81613149565b600060208284031215613f0757600080fd5b5051919050565b6001600160a01b0387168152856020820152608060408201526000613f37608083018688613dc8565b8281036060840152613eb0818587613dc8565b8082018082111561090257610902613d08565b604081526000613f706040830185613616565b8281036020840152610a2e8185613616565b601f82111561105f57600081815260208120601f850160051c81016020861015613fa95750805b601f850160051c820191505b81811015610a8657828155600101613fb5565b67ffffffffffffffff831115613fe057613fe06132f8565b613ff483613fee8354613cb8565b83613f82565b6000601f84116001811461402857600085156140105750838201355b600019600387901b1c1916600186901b178355610b29565b600083815260209020601f19861690835b828110156140595786850135825560209485019460019092019101614039565b50868210156140765760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b828152604060208201526000610f4c60408301846131d9565b60006001600160a01b03808816835280871660208401525060a060408301526140cd60a0830186613616565b82810360608401526140df8186613616565b905082810360808401526140f381856131d9565b98975050505050505050565b60006020828403121561411157600080fd5b8151610bae8161318d565b600060033d11156141355760046000803e5060005160e01c5b90565b600060443d10156141465790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561417657505050505090565b828501915081518181111561418e5750505050505090565b843d87010160208285010111156141a85750505050505090565b6141b76020828601018761330e565b509095945050505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a06080830152610e5e60a08301846131d956fea164736f6c6343000811000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addr(bytes32)": {
        "params": {
          "node": "The ENS node to query."
        },
        "returns": {
          "_0": "The associated address."
        }
      },
      "addr(bytes32,uint256)": {
        "params": {
          "coinType": "The coin type",
          "node": "The ENS node to query."
        },
        "returns": {
          "_0": "The associated address."
        }
      },
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "claimGuildTag(bytes32,string,address,bytes)": {
        "params": {
          "extraClaimArgs": "[Optional] Any additional arguments necessary for guild-specific logic,  such as authorization",
          "guildEnsNode": "The namehash of the guild for which the tag should be claimed (e.g. namehash('my-guild.eth'))",
          "recipient": "The address that will receive this guild tag (usually same as the caller)",
          "tag": "The tag name to claim (e.g. 'foo' for foo.my-guild.eth). Assumes `tag` is already normalized per            ENS Name Processing rules"
        }
      },
      "claimGuildTag(string,string,address,bytes)": {
        "params": {
          "extraClaimArgs": "[Optional] Any additional arguments necessary for guild-specific logic,  such as authorization",
          "guildEnsName": "The guild's full domain name (e.g. 'my-guild.eth')",
          "recipient": "The address that will receive this guild tag (usually same as the caller)",
          "tag": "The tag to claim (e.g. 'foobar')"
        }
      },
      "claimGuildTagsBatch(bytes32,string[],address[],bytes[])": {
        "params": {
          "extraClaimArgs": "Per-tag extra arguments required for guild-specific logic, such as authorization. Must have same length as array of tagHashes, even if each array element is itself empty bytes",
          "guildEnsNode": "The ENS namehash of the guild's domain",
          "recipients": "Recipients of each tag to be claimed",
          "tags": "Tags to be claimed"
        }
      },
      "deregisterGuild(bytes32)": {
        "params": {
          "guildEnsNode": "The ENS namehash of the guild's domain"
        }
      },
      "deregisterGuild(string)": {
        "params": {
          "guildEnsName": "The guild's full domain name (e.g. 'my-guild.eth')"
        }
      },
      "guildAdmin(bytes32)": {
        "params": {
          "guildEnsNode": "The ENS namehash of the guild's domain"
        }
      },
      "guildAdmin(string)": {
        "params": {
          "guildEnsName": "The guild's full domain name (e.g. 'my-guild.eth')"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "registerGuild(bytes32,address,address,address)": {
        "params": {
          "feePolicy": "The address of an implementation of FeePolicy to use for minting new tags within this guild",
          "guildAdmin": "The address that will administrate this guild",
          "guildEnsNode": "The ENS namehash of the guild's domain",
          "tagsAuthPolicy": "The address of an implementation of TagsAuthPolicy to use for minting new tags within this guild"
        }
      },
      "registerGuild(string,address,address,address)": {
        "params": {
          "admin": "The address that will administrate this guild",
          "ensName": "The guild's full domain name (e.g. 'my-guild.eth')",
          "feePolicy": "The address of an implementation of FeePolicy to use for minting new tags within this guild",
          "tagsAuthPolicy": "The address of an implementation of TagsAuthPolicy to use for minting new tags within this guild"
        }
      },
      "revokeGuildTag(bytes32,string,bytes)": {
        "params": {
          "extraData": "[Optional] Any additional arguments necessary for assessing whether a tag may be revoked",
          "guildEnsNode": "The ENS namehash of the guild's domain",
          "tag": "The tag to revoke"
        }
      },
      "revokeGuildTag(string,string,bytes)": {
        "params": {
          "extraData": "[Optional] Any additional arguments necessary for assessing whether a tag may be revoked",
          "guildEnsName": "The guild's full domain name (e.g. 'my-guild.eth')",
          "tag": "The tag to revoke (e.g. 'foobar')"
        }
      },
      "revokeGuildTagsBatch(bytes32,string[],bytes[])": {
        "params": {
          "extraData": "Additional arguments necessary for assessing whether a tag may be revoked",
          "guildEnsNode": "The ENS namehash of the guild's domain",
          "tagHashes": "ENS namehashes of all tags to revoke"
        }
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "ENSGuilds NFTs are non-transferrable and may only be directly minted and burned with their corresponding guild tags."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "setGuildActive(bytes32,bool)": {
        "params": {
          "active": "The new status",
          "guildEnsNode": "The ENS namehash of the guild's domain"
        }
      },
      "setGuildActive(string,bool)": {
        "params": {
          "active": "The new status",
          "guildEnsName": "The guild's full domain name (e.g. 'my-guild.eth')"
        }
      },
      "setGuildTokenUriTemplate(bytes32,string)": {
        "params": {
          "guildEnsNode": "The ENS namehash of the guild's domain",
          "uriTemplate": "The ERC1155 metadata URL template"
        }
      },
      "setGuildTokenUriTemplate(string,string)": {
        "params": {
          "guildEnsName": "The guild's full domain name (e.g. 'my-guild.eth')",
          "uriTemplate": "The ERC1155 metadata URL template"
        }
      },
      "setWildcardResolver(bytes32,address)": {
        "params": {
          "guildEnsNode": "The ENS namehash of the guild's domain"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "tagOwner(bytes32,bytes32)": {
        "params": {
          "guildEnsNode": "The ENS namehash of the guild's domain",
          "tagHash": "The ENS namehash of the tag (e.g. keccak256('foo') for foo.my-guild.eth)"
        }
      },
      "tagOwner(string,string)": {
        "params": {
          "guildEnsName": "The guild's full domain name (e.g. 'my-guild.eth')",
          "tag": "The tag (e.g. 'foobar')"
        }
      },
      "transferGuildAdmin(bytes32,address)": {
        "params": {
          "guildEnsNode": "The ENS namehash of the guild's domain",
          "newAdmin": "The new admin"
        }
      },
      "transferGuildAdmin(string,address)": {
        "params": {
          "guildEnsName": "The guild's full domain name (e.g. 'my-guild.eth')",
          "newAdmin": "The new admin"
        }
      },
      "updateGuildFeePolicy(bytes32,address)": {
        "params": {
          "feePolicy": "The address of an implementation of FeePolicy to use for minting new tags within this guild",
          "guildEnsNode": "The ENS namehash of the guild's domain"
        }
      },
      "updateGuildFeePolicy(string,address)": {
        "params": {
          "feePolicy": "The address of an implementation of FeePolicy to use for minting new tags within this guild",
          "guildEnsName": "The guild's full domain name (e.g. 'my-guild.eth')"
        }
      },
      "updateGuildTagsAuthPolicy(bytes32,address)": {
        "params": {
          "guildEnsNode": "The ENS namehash of the guild's domain",
          "tagsAuthPolicy": "The address of an implementation of TagsAuthPolicy to use for minting new tags within this guild"
        }
      },
      "updateGuildTagsAuthPolicy(string,address)": {
        "params": {
          "guildEnsName": "The guild's full domain name (e.g. 'my-guild.eth')",
          "tagsAuthPolicy": "The address of an implementation of TagsAuthPolicy to use for minting new tags within this guild"
        }
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}.",
        "params": {
          "tokenId": "The token whose URI is returned"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "AlreadyRegistered()": [
        {
          "notice": "Errors "
        }
      ]
    },
    "events": {
      "Registered(bytes32)": {
        "notice": "Events "
      }
    },
    "kind": "user",
    "methods": {
      "addr(bytes32)": {
        "notice": "Returns the address associated with an ENS node."
      },
      "addr(bytes32,uint256)": {
        "notice": "Returns the address associated with an ENS node."
      },
      "claimGuildTag(bytes32,string,address,bytes)": {
        "notice": "Claims a guild tag"
      },
      "claimGuildTag(string,string,address,bytes)": {
        "notice": "Claims a guild tag"
      },
      "claimGuildTagsBatch(bytes32,string[],address[],bytes[])": {
        "notice": "Claims multiple tags for a guild at once"
      },
      "deregisterGuild(bytes32)": {
        "notice": "De-registers a registered guild. Designates guild as inactive and marks all tags previously minted for that guild as eligible for revocation."
      },
      "deregisterGuild(string)": {
        "notice": "De-registers a registered guild. Designates guild as inactive and marks all tags previously minted for that guild as eligible for revocation."
      },
      "ensRegistry()": {
        "notice": "State "
      },
      "guildAdmin(bytes32)": {
        "notice": "Returns the current admin registered for the given guild."
      },
      "guildAdmin(string)": {
        "notice": "Returns the current admin registered for the given guild."
      },
      "registerGuild(bytes32,address,address,address)": {
        "notice": "Registers a new guild from an existing ENS domain. Caller must be the ENS node's owner and ENSGuilds must have been designated an \"operator\" for the caller."
      },
      "registerGuild(string,address,address,address)": {
        "notice": "Registers a new guild from an existing ENS domain. Caller must be the ENS node's owner and ENSGuilds must have been designated an \"operator\" for the caller."
      },
      "revokeGuildTag(bytes32,string,bytes)": {
        "notice": "Attempts to revoke an existing guild tag, if authorized by the guild's AuthPolicy. Deregistered guilds will bypass auth checks for revocation of all tags."
      },
      "revokeGuildTag(string,string,bytes)": {
        "notice": "Attempts to revoke an existing guild tag, if authorized by the guild's AuthPolicy. Deregistered guilds will bypass auth checks for revocation of all tags."
      },
      "revokeGuildTagsBatch(bytes32,string[],bytes[])": {
        "notice": "Attempts to revoke multiple guild tags"
      },
      "setGuildActive(bytes32,bool)": {
        "notice": "Sets a guild as active or inactive. May only be called by the guild's registered admin."
      },
      "setGuildActive(string,bool)": {
        "notice": "Sets a guild as active or inactive. May only be called by the guild's registered admin."
      },
      "setGuildTokenUriTemplate(bytes32,string)": {
        "notice": "Sets the metadata URI template string for fetching metadata for a guild's tag NFTs. May only be called by the guild's registered admin."
      },
      "setGuildTokenUriTemplate(string,string)": {
        "notice": "Sets the metadata URI template string for fetching metadata for a guild's tag NFTs. May only be called by the guild's registered admin."
      },
      "setWildcardResolver(bytes32,address)": {
        "notice": "Registers a resolver for the guild's root ENS name that will dynamically resolve the guild's child names"
      },
      "tagOwner(bytes32,bytes32)": {
        "notice": "Returns the current owner of the given guild tag. Returns address(0) if no such guild or tag exists, or if the guild has been deregistered."
      },
      "tagOwner(string,string)": {
        "notice": "Returns the current owner of the given guild tag. Returns address(0) if no such guild or tag exists, or if the guild has been deregistered."
      },
      "transferGuildAdmin(bytes32,address)": {
        "notice": "Transfers the role of guild admin to the given address. May only be called by the guild's registered admin."
      },
      "transferGuildAdmin(string,address)": {
        "notice": "Transfers the role of guild admin to the given address. May only be called by the guild's registered admin."
      },
      "updateGuildFeePolicy(bytes32,address)": {
        "notice": "Updates the FeePolicy for an existing guild. May only be called by the guild's registered admin."
      },
      "updateGuildFeePolicy(string,address)": {
        "notice": "Updates the FeePolicy for an existing guild. May only be called by the guild's registered admin."
      },
      "updateGuildTagsAuthPolicy(bytes32,address)": {
        "notice": "Updates the TagsAuthPolicy for an existing guild. May only be called by the guild's registered admin."
      },
      "updateGuildTagsAuthPolicy(string,address)": {
        "notice": "Updates the TagsAuthPolicy for an existing guild. May only be called by the guild's registered admin."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1636,
        "contract": "contracts/ensGuilds/ENSGuilds.sol:ENSGuilds",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1642,
        "contract": "contracts/ensGuilds/ENSGuilds.sol:ENSGuilds",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1644,
        "contract": "contracts/ensGuilds/ENSGuilds.sol:ENSGuilds",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 8015,
        "contract": "contracts/ensGuilds/ENSGuilds.sol:ENSGuilds",
        "label": "guilds",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes16,t_struct(GuildTokenInfo)8010_storage)"
      },
      {
        "astId": 7844,
        "contract": "contracts/ensGuilds/ENSGuilds.sol:ENSGuilds",
        "label": "addresses",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 1556,
        "contract": "contracts/ensGuilds/ENSGuilds.sol:ENSGuilds",
        "label": "_status",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 6236,
        "contract": "contracts/ensGuilds/ENSGuilds.sol:ENSGuilds",
        "label": "guilds",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_struct(GuildInfo)6224_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes16": {
        "encoding": "inplace",
        "label": "bytes16",
        "numberOfBytes": "16"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(FeePolicy)9631": {
        "encoding": "inplace",
        "label": "contract FeePolicy",
        "numberOfBytes": "20"
      },
      "t_contract(ITagsAuthPolicy)10358": {
        "encoding": "inplace",
        "label": "contract ITagsAuthPolicy",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes16,t_struct(GuildTokenInfo)8010_storage)": {
        "encoding": "mapping",
        "key": "t_bytes16",
        "label": "mapping(bytes16 => struct GuildTagTokens.GuildTokenInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(GuildTokenInfo)8010_storage"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_struct(GuildInfo)6224_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ENSGuilds.GuildInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(GuildInfo)6224_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)4691_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 4690,
            "contract": "contracts/ensGuilds/ENSGuilds.sol:ENSGuilds",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(GuildInfo)6224_storage": {
        "encoding": "inplace",
        "label": "struct ENSGuilds.GuildInfo",
        "members": [
          {
            "astId": 6213,
            "contract": "contracts/ensGuilds/ENSGuilds.sol:ENSGuilds",
            "label": "admin",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6216,
            "contract": "contracts/ensGuilds/ENSGuilds.sol:ENSGuilds",
            "label": "feePolicy",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(FeePolicy)9631"
          },
          {
            "astId": 6219,
            "contract": "contracts/ensGuilds/ENSGuilds.sol:ENSGuilds",
            "label": "tagsAuthPolicy",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(ITagsAuthPolicy)10358"
          },
          {
            "astId": 6221,
            "contract": "contracts/ensGuilds/ENSGuilds.sol:ENSGuilds",
            "label": "active",
            "offset": 20,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 6223,
            "contract": "contracts/ensGuilds/ENSGuilds.sol:ENSGuilds",
            "label": "deregistered",
            "offset": 21,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(GuildTokenInfo)8010_storage": {
        "encoding": "inplace",
        "label": "struct GuildTagTokens.GuildTokenInfo",
        "members": [
          {
            "astId": 8003,
            "contract": "contracts/ensGuilds/ENSGuilds.sol:ENSGuilds",
            "label": "tokenIdTracker",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Counter)4691_storage"
          },
          {
            "astId": 8005,
            "contract": "contracts/ensGuilds/ENSGuilds.sol:ENSGuilds",
            "label": "templateURI",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 8009,
            "contract": "contracts/ensGuilds/ENSGuilds.sol:ENSGuilds",
            "label": "guildTagsToTokenIds",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}