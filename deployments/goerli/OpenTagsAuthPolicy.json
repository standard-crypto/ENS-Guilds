{
  "address": "0xB65733be62624E6E8136aFd5ecBf31C1CD871B8D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "canClaimTag",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onTagClaimed",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "tagToRevoke",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "tagCanBeRevoked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb992a0488e67b3e3a02992161228340313ddea0635c7c8ecb044e9749d77d70a",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xE72285aee8Ad0b545DD6287Aab9EbE8237D4e7Cf",
    "contractAddress": null,
    "transactionIndex": 56,
    "gasUsed": "197670",
    "logsBloom": "0x
    "blockHash": "0xba0a7ab70a2a4339d6a22010309f490f37a687c5bcbd8679826ef109e8a0b171",
    "transactionHash": "0xb992a0488e67b3e3a02992161228340313ddea0635c7c8ecb044e9749d77d70a",
    "logs": [],
    "blockNumber": 8605039,
    "cumulativeGasUsed": "11809297",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "bcdb56a6a5c3ed55cb47cbcfc650cf49",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"canClaimTag\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onTagClaimed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"tagToRevoke\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tagCanBeRevoked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tagsAuthPolicies/OpenTagsAuthPolicy.sol\":\"OpenTagsAuthPolicy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/tagsAuthPolicies/ITagsAuthPolicy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title TagsAuthPolicy\\n * @notice An interface for Guilds to implement that will control authorization for minting tags within that guild\\n */\\ninterface ITagsAuthPolicy is IERC165 {\\n    /**\\n     * @notice Checks whether a certain address (claimant) may claim a given guild tag\\n     * @param guildHash The ENS namehash of the guild's domain\\n     * @param tagHash The ENS namehash of the tag being claimed (e.g. keccak256('foo') for foo.my-guild.eth)\\n     * @param claimant The address attempting to claim the tag (not necessarily the address that will receive it)\\n     * @param recipient The address that would receive the tag\\n     * @param extraClaimArgs [Optional] Any guild-specific additional arguments required\\n     */\\n    function canClaimTag(\\n        bytes32 guildHash,\\n        bytes32 tagHash,\\n        address claimant,\\n        address recipient,\\n        bytes calldata extraClaimArgs\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Called by ENSGuilds once a tag has been claimed.\\n     * Provided for auth policies to update local state, such as erasing an address from an allowlist after that\\n     * address has successfully minted a tag.\\n     * @param guildHash The ENS namehash of the guild's domain\\n     * @param tagHash The ENS namehash of the tag being claimed (e.g. keccak256('foo') for foo.my-guild.eth)\\n     * @param claimant The address that claimed the tag (not necessarily the address that received it)\\n     * @param recipient The address that received receive the tag\\n     * @param extraClaimArgs [Optional] Any guild-specific additional arguments required\\n     */\\n    function onTagClaimed(\\n        bytes32 guildHash,\\n        bytes32 tagHash,\\n        address claimant,\\n        address recipient,\\n        bytes calldata extraClaimArgs\\n    ) external returns (bytes32 tagToRevoke);\\n\\n    /**\\n     * @notice Checks whether a given guild tag is elligible to be revoked\\n     * @param revokedBy The address that would attempt to revoke it\\n     * @param guildHash The ENS namehash of the guild's domain\\n     * @param tagHash The ENS namehash of the tag being claimed (e.g. keccak256('foo') for foo.my-guild.eth)\\n     * @param extraRevokeArgs Any additional arguments necessary for assessing whether a tag may be revoked\\n     */\\n    function tagCanBeRevoked(\\n        address revokedBy,\\n        bytes32 guildHash,\\n        bytes32 tagHash,\\n        bytes calldata extraRevokeArgs\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xd38f3aa557e56bfd6b15c48e11d134123bc766ee041c59ba9fba0c1ba7b93788\",\"license\":\"MIT\"},\"contracts/tagsAuthPolicies/OpenTagsAuthPolicy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nimport \\\"./ITagsAuthPolicy.sol\\\";\\n\\ncontract OpenTagsAuthPolicy is ITagsAuthPolicy, ERC165 {\\n    function supportsInterface(bytes4 interfaceID) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceID == type(ITagsAuthPolicy).interfaceId || super.supportsInterface(interfaceID);\\n    }\\n\\n    function canClaimTag(bytes32, bytes32, address, address, bytes calldata) external virtual override returns (bool) {\\n        return true;\\n    }\\n\\n    function onTagClaimed(\\n        bytes32,\\n        bytes32,\\n        address,\\n        address,\\n        bytes calldata\\n    ) external virtual override returns (bytes32 tagToRevoke) {\\n        return 0;\\n    }\\n\\n    function tagCanBeRevoked(address, bytes32, bytes32, bytes calldata) external virtual override returns (bool) {\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0x5e04745094e8f055ee635beee647282a4c2e920c45ba3f26b566745423537280\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061029b806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806301ffc9a7146100515780638fcae51d14610079578063dc107502146100a1578063f02cbfbb146100ba575b600080fd5b61006461005f36600461010b565b6100d4565b60405190151581526020015b60405180910390f35b6100936100873660046101ae565b60009695505050505050565b604051908152602001610070565b6100646100af366004610226565b600095945050505050565b6100646100c83660046101ae565b60019695505050505050565b60006001600160e01b031982166328fd8be960e21b148061010557506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006020828403121561011d57600080fd5b81356001600160e01b03198116811461013557600080fd5b9392505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461016057600080fd5b919050565b60008083601f84011261017757600080fd5b50813567ffffffffffffffff81111561018f57600080fd5b6020830191508360208285010111156101a757600080fd5b9250929050565b60008060008060008060a087890312156101c757600080fd5b86359550602087013594506101de6040880161013c565b93506101ec6060880161013c565b9250608087013567ffffffffffffffff81111561020857600080fd5b61021489828a01610165565b979a9699509497509295939492505050565b60008060008060006080868803121561023e57600080fd5b6102478661013c565b94506020860135935060408601359250606086013567ffffffffffffffff81111561027157600080fd5b61027d88828901610165565b96999598509396509294939250505056fea164736f6c6343000811000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c806301ffc9a7146100515780638fcae51d14610079578063dc107502146100a1578063f02cbfbb146100ba575b600080fd5b61006461005f36600461010b565b6100d4565b60405190151581526020015b60405180910390f35b6100936100873660046101ae565b60009695505050505050565b604051908152602001610070565b6100646100af366004610226565b600095945050505050565b6100646100c83660046101ae565b60019695505050505050565b60006001600160e01b031982166328fd8be960e21b148061010557506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006020828403121561011d57600080fd5b81356001600160e01b03198116811461013557600080fd5b9392505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461016057600080fd5b919050565b60008083601f84011261017757600080fd5b50813567ffffffffffffffff81111561018f57600080fd5b6020830191508360208285010111156101a757600080fd5b9250929050565b60008060008060008060a087890312156101c757600080fd5b86359550602087013594506101de6040880161013c565b93506101ec6060880161013c565b9250608087013567ffffffffffffffff81111561020857600080fd5b61021489828a01610165565b979a9699509497509295939492505050565b60008060008060006080868803121561023e57600080fd5b6102478661013c565b94506020860135935060408601359250606086013567ffffffffffffffff81111561027157600080fd5b61027d88828901610165565b96999598509396509294939250505056fea164736f6c6343000811000a",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
