{
  "address": "0xD47d35Af31B8dAE47008Ee98cB782D35Aff44A6f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ensGuilds",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "guildHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "claimant",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "extraClaimArgs",
          "type": "bytes"
        }
      ],
      "name": "canClaimTag",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "guilds",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "internalType": "enum NFTTagsAuthPolicy.TokenStandard",
          "name": "tokenStandard",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "guildHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "tagHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "claimant",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "extraClaimArgs",
          "type": "bytes"
        }
      ],
      "name": "onTagClaimed",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "tagToRevoke",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "guildHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        }
      ],
      "name": "setTokenContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "guildHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "tagHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "extraRevokeArgs",
          "type": "bytes"
        }
      ],
      "name": "tagCanBeRevoked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7f9a6accbe07b2dbb9b6e32343641d05410ebd671fcfc84d4f0150db35af4874",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xE72285aee8Ad0b545DD6287Aab9EbE8237D4e7Cf",
    "contractAddress": null,
    "transactionIndex": 88,
    "gasUsed": "674091",
    "logsBloom": "0x
    "blockHash": "0x6083b4ec7c5c0d7ab68ec8c20ea08c159b8542e1fe2a72c39b3ff3c8fde17ce5",
    "transactionHash": "0x7f9a6accbe07b2dbb9b6e32343641d05410ebd671fcfc84d4f0150db35af4874",
    "logs": [],
    "blockNumber": 8582105,
    "cumulativeGasUsed": "14104375",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x21Ca61a68969620A326431e17a72a292b19F5edF"],
  "numDeployments": 1,
  "solcInputHash": "3ed54fb3374fcea5f11209f663dcf047",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ensGuilds\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"guildHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"extraClaimArgs\",\"type\":\"bytes\"}],\"name\":\"canClaimTag\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"guilds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"enum NFTTagsAuthPolicy.TokenStandard\",\"name\":\"tokenStandard\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"guildHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"tagHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"extraClaimArgs\",\"type\":\"bytes\"}],\"name\":\"onTagClaimed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"tagToRevoke\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"guildHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"setTokenContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"guildHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"tagHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"extraRevokeArgs\",\"type\":\"bytes\"}],\"name\":\"tagCanBeRevoked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tagsAuthPolicies/NFTTagsAuthPolicy.sol\":\"NFTTagsAuthPolicy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddrResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the legacy (ETH-only) addr function.\\n */\\ninterface IAddrResolver {\\n    event AddrChanged(bytes32 indexed node, address a);\\n\\n    /**\\n     * Returns the address associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated address.\\n     */\\n    function addr(bytes32 node) external view returns (address payable);\\n}\\n\",\"keccak256\":\"0x2ad7f2fc60ebe0f93745fe70247f6a854f66af732483fda2a3c5e055614445e8\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the new (multicoin) addr function.\\n */\\ninterface IAddressResolver {\\n    event AddressChanged(\\n        bytes32 indexed node,\\n        uint256 coinType,\\n        bytes newAddress\\n    );\\n\\n    function addr(bytes32 node, uint256 coinType)\\n        external\\n        view\\n        returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x37221203e063dee5aa2a067a6ab3401e9cca41cce5b15230994b6ea377f05ed5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x0812bc73d6e30558840122fa48d6f64ae978ccc1b1fc42e616bac190c6360f46\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/ensGuilds/interfaces/IENSGuilds.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddrResolver.sol\\\";\\nimport \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddressResolver.sol\\\";\\n\\ninterface IENSGuilds is IAddrResolver, IAddressResolver, IERC1155MetadataURI {\\n    /** Events */\\n    event Registered(bytes32 indexed guildHash);\\n    event Deregistered(bytes32 indexed guildHash);\\n    event TagClaimed(bytes32 indexed guildId, bytes32 indexed tagHash, address recipient);\\n    event FeePolicyUpdated(bytes32 indexed guildId, address feePolicy);\\n    event TagsAuthPolicyUpdated(bytes32 indexed guildId, address tagsAuthPolicy);\\n    event AdminTransferred(bytes32 indexed guildId, address newAdmin);\\n    event SetActive(bytes32 indexed guildId, bool active);\\n\\n    /** Functions */\\n\\n    function registerGuild(bytes32 guildHash, address guildAdmin, address feePolicy, address tagsAuthPolicy) external;\\n\\n    function deregisterGuild(bytes32 guildHash) external;\\n\\n    /**\\n     * Claims a guild tag\\n     * @param guildHash The namehash of the guild for which the tag should be claimed (e.g. namehash('my-guild.eth'))\\n     * @param tagHash The ENS namehash of the tag being claimed (e.g. keccak256('foo') for foo.my-guild.eth)\\n     * @param recipient The address that will receive this guild tag\\n     * @param extraClaimArgs [Optional] Any additional arguments necessary for guild-specific logic,\\n     *  such as authorization\\n     */\\n    function claimGuildTag(\\n        bytes32 guildHash,\\n        bytes32 tagHash,\\n        address recipient,\\n        bytes calldata extraClaimArgs\\n    ) external payable;\\n\\n    // function claimGuildTagsBatch(\\n    //     bytes32 guildHash,\\n    //     bytes32[] calldata tagHashes,\\n    //     address[] calldata recipients,\\n    //     bytes[] calldata extraClaimArgs\\n    // ) external payable;\\n\\n    function revokeGuildTag(bytes32 guildHash, bytes32 tagHash, bytes calldata extraData) external;\\n\\n    function updateGuildFeePolicy(bytes32 guildHash, address feePolicy) external;\\n\\n    function updateGuildTagsAuthPolicy(bytes32 guildHash, address tagsAuthPolicy) external;\\n\\n    function setGuildTokenUriTemplate(bytes32 guildHash, string calldata uriTemplate) external;\\n\\n    function setGuildActive(bytes32 guildHash, bool active) external;\\n\\n    function guildAdmin(bytes32 guildHash) external view returns (address);\\n\\n    function transferGuildAdmin(bytes32 guildHash, address newAdmin) external;\\n}\\n\",\"keccak256\":\"0xc4b7706dac1c1118765a24cd423f22fcfb6a407a5d937e137fe0aa238bd482ed\",\"license\":\"MIT\"},\"contracts/tagsAuthPolicies/NFTTagsAuthPolicy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport \\\"./TagsAuthPolicy.sol\\\";\\nimport \\\"../ensGuilds/interfaces/IENSGuilds.sol\\\";\\n\\ncontract NFTTagsAuthPolicy is Context, TagsAuthPolicy, ReentrancyGuard {\\n    using ERC165Checker for address;\\n\\n    enum TokenStandard {\\n        ERC721,\\n        ERC1155\\n    }\\n    struct TagClaim {\\n        bytes32 tagHash;\\n        address claimedBy;\\n    }\\n    struct GuildInfo {\\n        address tokenContract;\\n        TokenStandard tokenStandard;\\n        mapping(uint256 => TagClaim) tagClaims;\\n    }\\n    mapping(bytes32 => GuildInfo) public guilds;\\n    IENSGuilds private ensGuilds;\\n\\n    constructor(address _ensGuilds) {\\n        // solhint-disable-next-line reason-string\\n        require(_ensGuilds.supportsInterface(type(IENSGuilds).interfaceId));\\n        ensGuilds = IENSGuilds(_ensGuilds);\\n    }\\n\\n    function setTokenContract(bytes32 guildHash, address tokenContract) external {\\n        // caller must be guild admin\\n        // solhint-disable-next-line reason-string\\n        require(ensGuilds.guildAdmin(guildHash) == _msgSender());\\n\\n        // token contract must be ERC721 or ERC1155\\n        if (tokenContract.supportsInterface(type(IERC721).interfaceId)) {\\n            guilds[guildHash].tokenStandard = TokenStandard.ERC721;\\n        } else if (tokenContract.supportsInterface(type(IERC1155).interfaceId)) {\\n            guilds[guildHash].tokenStandard = TokenStandard.ERC1155;\\n        } else {\\n            // solhint-disable-next-line reason-string\\n            revert();\\n        }\\n\\n        guilds[guildHash].tokenContract = tokenContract;\\n    }\\n\\n    function canClaimTag(\\n        bytes32 guildHash,\\n        bytes32,\\n        address claimant,\\n        address,\\n        bytes calldata extraClaimArgs\\n    ) external virtual override returns (bool) {\\n        GuildInfo storage guildInfo = guilds[guildHash];\\n        address tokenContract = guildInfo.tokenContract;\\n\\n        // parse NFT token ID from the tag claim args\\n        if (extraClaimArgs.length != 32) {\\n            return false;\\n        }\\n        uint256 nftTokenId = uint256(bytes32(extraClaimArgs));\\n\\n        // check that claimant owns this NFT\\n        bool ownsNFT = false;\\n        if (guildInfo.tokenStandard == TokenStandard.ERC721) {\\n            ownsNFT = IERC721(tokenContract).ownerOf(nftTokenId) == claimant;\\n        } else {\\n            ownsNFT = IERC1155(tokenContract).balanceOf(claimant, nftTokenId) > 0;\\n        }\\n        if (!ownsNFT) {\\n            return false;\\n        }\\n\\n        return true;\\n    }\\n\\n    function onTagClaimed(\\n        bytes32 guildHash,\\n        bytes32 tagHash,\\n        address claimant,\\n        address,\\n        bytes calldata extraClaimArgs\\n    ) external virtual override nonReentrant returns (bytes32 tagToRevoke) {\\n        // Caller must be ENSGuilds contract\\n        // solhint-disable-next-line reason-string\\n        require(_msgSender() == address(ensGuilds));\\n\\n        uint256 nftTokenId = uint256(bytes32(extraClaimArgs));\\n\\n        tagToRevoke = guilds[guildHash].tagClaims[nftTokenId].tagHash;\\n\\n        guilds[guildHash].tagClaims[nftTokenId].tagHash = tagHash;\\n        guilds[guildHash].tagClaims[nftTokenId].claimedBy = claimant;\\n\\n        return tagToRevoke;\\n    }\\n\\n    function tagCanBeRevoked(\\n        bytes32 guildHash,\\n        bytes32 tagHash,\\n        bytes calldata extraRevokeArgs\\n    ) external virtual override returns (bool) {\\n        if (extraRevokeArgs.length != 32) {\\n            return false;\\n        }\\n        uint256 nftTokenId = uint256(bytes32(extraRevokeArgs));\\n\\n        GuildInfo storage guildInfo = guilds[guildHash];\\n        address tokenContract = guildInfo.tokenContract;\\n\\n        // check that the given tag was indeed claimed from the given NFT\\n        if (guildInfo.tagClaims[nftTokenId].tagHash != tagHash) {\\n            return false;\\n        }\\n\\n        // check that the current owner of the given NFT is the same as the owner when the tag was claimed\\n        address previousClaimant = guildInfo.tagClaims[nftTokenId].claimedBy;\\n        if (guildInfo.tokenStandard == TokenStandard.ERC721) {\\n            address currentTokenOwner = IERC721(tokenContract).ownerOf(nftTokenId);\\n            return currentTokenOwner != previousClaimant;\\n        } else {\\n            return IERC1155(tokenContract).balanceOf(previousClaimant, nftTokenId) == 0;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5cfae2de8d36ee810d23f706ebd70cf56212badd10261a73e709035d86b5414b\",\"license\":\"MIT\"},\"contracts/tagsAuthPolicies/TagsAuthPolicy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nabstract contract TagsAuthPolicy is ERC165 {\\n    function supportsInterface(bytes4 interfaceID) public view virtual override(ERC165) returns (bool) {\\n        return interfaceID == type(TagsAuthPolicy).interfaceId || super.supportsInterface(interfaceID);\\n    }\\n\\n    function canClaimTag(\\n        bytes32 guildHash,\\n        bytes32 tagHash,\\n        address claimant,\\n        address recipient,\\n        bytes calldata extraClaimArgs\\n    ) external virtual returns (bool);\\n\\n    function onTagClaimed(\\n        bytes32 guildHash,\\n        bytes32 tagHash,\\n        address claimant,\\n        address recipient,\\n        bytes calldata extraClaimArgs\\n    ) external virtual returns (bytes32 tagToRevoke);\\n\\n    function tagCanBeRevoked(\\n        bytes32 guildHash,\\n        bytes32 tagHash,\\n        bytes calldata extraRevokeArgs\\n    ) external virtual returns (bool);\\n}\\n\",\"keccak256\":\"0xcbca4bd92ff12c0d3435243691be2dd6e29e6318aeb66b533b919b47cca0dd7f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610bc7380380610bc783398101604081905261002f91610167565b60016000556100596001600160a01b0382166398280fbb60e01b610087602090811b61068217901c565b61006257600080fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055610190565b6000610092836100aa565b80156100a357506100a383836100de565b9392505050565b60006100bd826301ffc9a760e01b6100de565b80156100d857506100d6826001600160e01b03196100de565b155b92915050565b604080516001600160e01b03198316602480830191909152825180830390910181526044909101909152602080820180516001600160e01b03166301ffc9a760e01b178152825160009392849283928392918391908a617530fa92503d91506000519050828015610150575060208210155b801561015c5750600081115b979650505050505050565b60006020828403121561017957600080fd5b81516001600160a01b03811681146100a357600080fd5b610a288061019f6000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063c5f23c3011610050578063c5f23c30146100d5578063d919713f146100e8578063f02cbfbb1461012b57600080fd5b806301ffc9a714610077578063513388491461009f5780638fcae51d146100b4575b600080fd5b61008a6100853660046107d3565b61013e565b60405190151581526020015b60405180910390f35b6100b26100ad366004610815565b610175565b005b6100c76100c236600461088e565b6102c0565b604051908152602001610096565b61008a6100e336600461090a565b610356565b61011d6100f636600461095d565b6001602052600090815260409020546001600160a01b03811690600160a01b900460ff1682565b60405161009692919061098c565b61008a61013936600461088e565b610505565b60006001600160e01b0319821663bbebaf3160e01b148061016f57506301ffc9a760e01b6001600160e01b03198316145b92915050565b3360025460405163022c977f60e01b8152600481018590526001600160a01b03928316929091169063022c977f90602401602060405180830381865afa1580156101c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e791906109c7565b6001600160a01b0316146101fa57600080fd5b6102146001600160a01b0382166380ac58cd60e01b610682565b15610241576000828152600160205260408120805460ff60a01b1916600160a01b835b0217905550610285565b61025b6001600160a01b038216636cdb3d1360e11b610682565b15610072576000828152600160208190526040909120805460ff60a01b1916600160a01b83610237565b600091825260016020526040909120805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909216919091179055565b60006102ca6106a5565b6002546001600160a01b0316336001600160a01b0316146102ea57600080fd5b60006102f683856109e4565b6000898152600160208181526040808420948452938201905291812080548a8255908301805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038b16179055919055915061034c9050565b9695505050505050565b600060208214610368575060006104fd565b600061037483856109e4565b600087815260016020818152604080842080548686529381019092529092205492935090916001600160a01b039091169087146103b757600093505050506104fd565b600083815260018084016020526040822001546001600160a01b0316908354600160a01b900460ff1660018111156103f1576103f1610976565b03610486576040516331a9108f60e11b8152600481018590526000906001600160a01b03841690636352211e90602401602060405180830381865afa15801561043e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046291906109c7565b9050816001600160a01b0316816001600160a01b03161415955050505050506104fd565b604051627eeac760e11b81526001600160a01b0382811660048301526024820186905283169062fdd58e90604401602060405180830381865afa1580156104d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f59190610a02565b159450505050505b949350505050565b60008681526001602090815260408220805490916001600160a01b039091169084146105365760009250505061034c565b600061054285876109e4565b90506000808454600160a01b900460ff16600181111561056457610564610976565b036105e8576040516331a9108f60e11b8152600481018390526001600160a01b03808b169190851690636352211e90602401602060405180830381865afa1580156105b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d791906109c7565b6001600160a01b031614905061065f565b604051627eeac760e11b81526001600160a01b038a81166004830152602482018490526000919085169062fdd58e90604401602060405180830381865afa158015610637573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065b9190610a02565b1190505b8061067157600094505050505061034c565b5060019a9950505050505050505050565b600061068d83610702565b801561069e575061069e8383610735565b9392505050565b6002600054036106fb5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640160405180910390fd5b6002600055565b6000610715826301ffc9a760e01b610735565b801561016f575061072e826001600160e01b0319610735565b1592915050565b604080516001600160e01b03198316602480830191909152825180830390910181526044909101909152602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166301ffc9a760e01b178152825160009392849283928392918391908a617530fa92503d915060005190508280156107bc575060208210155b80156107c85750600081115b979650505050505050565b6000602082840312156107e557600080fd5b81356001600160e01b03198116811461069e57600080fd5b6001600160a01b038116811461081257600080fd5b50565b6000806040838503121561082857600080fd5b82359150602083013561083a816107fd565b809150509250929050565b60008083601f84011261085757600080fd5b50813567ffffffffffffffff81111561086f57600080fd5b60208301915083602082850101111561088757600080fd5b9250929050565b60008060008060008060a087890312156108a757600080fd5b863595506020870135945060408701356108c0816107fd565b935060608701356108d0816107fd565b9250608087013567ffffffffffffffff8111156108ec57600080fd5b6108f889828a01610845565b979a9699509497509295939492505050565b6000806000806060858703121561092057600080fd5b8435935060208501359250604085013567ffffffffffffffff81111561094557600080fd5b61095187828801610845565b95989497509550505050565b60006020828403121561096f57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b038316815260408101600283106109ba57634e487b7160e01b600052602160045260246000fd5b8260208301529392505050565b6000602082840312156109d957600080fd5b815161069e816107fd565b8035602083101561016f57600019602084900360031b1b1692915050565b600060208284031215610a1457600080fd5b505191905056fea164736f6c6343000811000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100725760003560e01c8063c5f23c3011610050578063c5f23c30146100d5578063d919713f146100e8578063f02cbfbb1461012b57600080fd5b806301ffc9a714610077578063513388491461009f5780638fcae51d146100b4575b600080fd5b61008a6100853660046107d3565b61013e565b60405190151581526020015b60405180910390f35b6100b26100ad366004610815565b610175565b005b6100c76100c236600461088e565b6102c0565b604051908152602001610096565b61008a6100e336600461090a565b610356565b61011d6100f636600461095d565b6001602052600090815260409020546001600160a01b03811690600160a01b900460ff1682565b60405161009692919061098c565b61008a61013936600461088e565b610505565b60006001600160e01b0319821663bbebaf3160e01b148061016f57506301ffc9a760e01b6001600160e01b03198316145b92915050565b3360025460405163022c977f60e01b8152600481018590526001600160a01b03928316929091169063022c977f90602401602060405180830381865afa1580156101c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e791906109c7565b6001600160a01b0316146101fa57600080fd5b6102146001600160a01b0382166380ac58cd60e01b610682565b15610241576000828152600160205260408120805460ff60a01b1916600160a01b835b0217905550610285565b61025b6001600160a01b038216636cdb3d1360e11b610682565b15610072576000828152600160208190526040909120805460ff60a01b1916600160a01b83610237565b600091825260016020526040909120805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909216919091179055565b60006102ca6106a5565b6002546001600160a01b0316336001600160a01b0316146102ea57600080fd5b60006102f683856109e4565b6000898152600160208181526040808420948452938201905291812080548a8255908301805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038b16179055919055915061034c9050565b9695505050505050565b600060208214610368575060006104fd565b600061037483856109e4565b600087815260016020818152604080842080548686529381019092529092205492935090916001600160a01b039091169087146103b757600093505050506104fd565b600083815260018084016020526040822001546001600160a01b0316908354600160a01b900460ff1660018111156103f1576103f1610976565b03610486576040516331a9108f60e11b8152600481018590526000906001600160a01b03841690636352211e90602401602060405180830381865afa15801561043e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046291906109c7565b9050816001600160a01b0316816001600160a01b03161415955050505050506104fd565b604051627eeac760e11b81526001600160a01b0382811660048301526024820186905283169062fdd58e90604401602060405180830381865afa1580156104d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f59190610a02565b159450505050505b949350505050565b60008681526001602090815260408220805490916001600160a01b039091169084146105365760009250505061034c565b600061054285876109e4565b90506000808454600160a01b900460ff16600181111561056457610564610976565b036105e8576040516331a9108f60e11b8152600481018390526001600160a01b03808b169190851690636352211e90602401602060405180830381865afa1580156105b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d791906109c7565b6001600160a01b031614905061065f565b604051627eeac760e11b81526001600160a01b038a81166004830152602482018490526000919085169062fdd58e90604401602060405180830381865afa158015610637573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065b9190610a02565b1190505b8061067157600094505050505061034c565b5060019a9950505050505050505050565b600061068d83610702565b801561069e575061069e8383610735565b9392505050565b6002600054036106fb5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640160405180910390fd5b6002600055565b6000610715826301ffc9a760e01b610735565b801561016f575061072e826001600160e01b0319610735565b1592915050565b604080516001600160e01b03198316602480830191909152825180830390910181526044909101909152602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166301ffc9a760e01b178152825160009392849283928392918391908a617530fa92503d915060005190508280156107bc575060208210155b80156107c85750600081115b979650505050505050565b6000602082840312156107e557600080fd5b81356001600160e01b03198116811461069e57600080fd5b6001600160a01b038116811461081257600080fd5b50565b6000806040838503121561082857600080fd5b82359150602083013561083a816107fd565b809150509250929050565b60008083601f84011261085757600080fd5b50813567ffffffffffffffff81111561086f57600080fd5b60208301915083602082850101111561088757600080fd5b9250929050565b60008060008060008060a087890312156108a757600080fd5b863595506020870135945060408701356108c0816107fd565b935060608701356108d0816107fd565b9250608087013567ffffffffffffffff8111156108ec57600080fd5b6108f889828a01610845565b979a9699509497509295939492505050565b6000806000806060858703121561092057600080fd5b8435935060208501359250604085013567ffffffffffffffff81111561094557600080fd5b61095187828801610845565b95989497509550505050565b60006020828403121561096f57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b038316815260408101600283106109ba57634e487b7160e01b600052602160045260246000fd5b8260208301529392505050565b6000602082840312156109d957600080fd5b815161069e816107fd565b8035602083101561016f57600019602084900360031b1b1692915050565b600060208284031215610a1457600080fd5b505191905056fea164736f6c6343000811000a",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 839,
        "contract": "contracts/tagsAuthPolicies/NFTTagsAuthPolicy.sol:NFTTagsAuthPolicy",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 6955,
        "contract": "contracts/tagsAuthPolicies/NFTTagsAuthPolicy.sol:NFTTagsAuthPolicy",
        "label": "guilds",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(GuildInfo)6950_storage)"
      },
      {
        "astId": 6958,
        "contract": "contracts/tagsAuthPolicies/NFTTagsAuthPolicy.sol:NFTTagsAuthPolicy",
        "label": "ensGuilds",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IENSGuilds)5688"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IENSGuilds)5688": {
        "encoding": "inplace",
        "label": "contract IENSGuilds",
        "numberOfBytes": "20"
      },
      "t_enum(TokenStandard)6934": {
        "encoding": "inplace",
        "label": "enum NFTTagsAuthPolicy.TokenStandard",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes32,t_struct(GuildInfo)6950_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct NFTTagsAuthPolicy.GuildInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(GuildInfo)6950_storage"
      },
      "t_mapping(t_uint256,t_struct(TagClaim)6939_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NFTTagsAuthPolicy.TagClaim)",
        "numberOfBytes": "32",
        "value": "t_struct(TagClaim)6939_storage"
      },
      "t_struct(GuildInfo)6950_storage": {
        "encoding": "inplace",
        "label": "struct NFTTagsAuthPolicy.GuildInfo",
        "members": [
          {
            "astId": 6941,
            "contract": "contracts/tagsAuthPolicies/NFTTagsAuthPolicy.sol:NFTTagsAuthPolicy",
            "label": "tokenContract",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6944,
            "contract": "contracts/tagsAuthPolicies/NFTTagsAuthPolicy.sol:NFTTagsAuthPolicy",
            "label": "tokenStandard",
            "offset": 20,
            "slot": "0",
            "type": "t_enum(TokenStandard)6934"
          },
          {
            "astId": 6949,
            "contract": "contracts/tagsAuthPolicies/NFTTagsAuthPolicy.sol:NFTTagsAuthPolicy",
            "label": "tagClaims",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(TagClaim)6939_storage)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TagClaim)6939_storage": {
        "encoding": "inplace",
        "label": "struct NFTTagsAuthPolicy.TagClaim",
        "members": [
          {
            "astId": 6936,
            "contract": "contracts/tagsAuthPolicies/NFTTagsAuthPolicy.sol:NFTTagsAuthPolicy",
            "label": "tagHash",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 6938,
            "contract": "contracts/tagsAuthPolicies/NFTTagsAuthPolicy.sol:NFTTagsAuthPolicy",
            "label": "claimedBy",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
