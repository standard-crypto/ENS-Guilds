{
  "address": "0x4478277cA571aCE7286A99255558C7C19D22b0d3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ENS",
          "name": "_ens",
          "type": "address"
        },
        {
          "internalType": "contract INameWrapper",
          "name": "wrapperAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CallerNotAuthorised",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTokenContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RecordTypeNotSupported",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "contentType",
          "type": "uint256"
        }
      ],
      "name": "ABIChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "a",
          "type": "address"
        }
      ],
      "name": "AddrChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "coinType",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "newAddress",
          "type": "bytes"
        }
      ],
      "name": "AddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "hash",
          "type": "bytes"
        }
      ],
      "name": "ContenthashChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "resource",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "record",
          "type": "bytes"
        }
      ],
      "name": "DNSRecordChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "resource",
          "type": "uint16"
        }
      ],
      "name": "DNSRecordDeleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "lastzonehash",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "zonehash",
          "type": "bytes"
        }
      ],
      "name": "DNSZonehashChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "implementer",
          "type": "address"
        }
      ],
      "name": "InterfaceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "NameChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "x",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "y",
          "type": "bytes32"
        }
      ],
      "name": "PubkeyChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "indexedKey",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        }
      ],
      "name": "TextChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "newVersion",
          "type": "uint64"
        }
      ],
      "name": "VersionChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "contentTypes",
          "type": "uint256"
        }
      ],
      "name": "ABI",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RESOLVER_SIGNATURE__ADDR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RESOLVER_SIGNATURE__ADDR_WITH_COINTYPE",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RESOLVER_SIGNATURE__TEXT",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "addr",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "coinType",
          "type": "uint256"
        }
      ],
      "name": "addr",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approvedDelegates",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "clearRecords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "contenthash",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "internalType": "uint16",
          "name": "resource",
          "type": "uint16"
        }
      ],
      "name": "dnsRecord",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ens",
      "outputs": [
        {
          "internalType": "contract ENS",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        }
      ],
      "name": "hasDNSRecords",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "interfaceImplementer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nameWrapper",
      "outputs": [
        {
          "internalType": "contract INameWrapper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "parentEnsNodes",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "pubkey",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "x",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "y",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "recordVersions",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "dnsEncodedName",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "resolverCalldata",
          "type": "bytes"
        }
      ],
      "name": "resolve",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "contentType",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "setABI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "coinType",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "a",
          "type": "bytes"
        }
      ],
      "name": "setAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "a",
          "type": "address"
        }
      ],
      "name": "setAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "hash",
          "type": "bytes"
        }
      ],
      "name": "setContenthash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "setDNSRecords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setDelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        },
        {
          "internalType": "address",
          "name": "implementer",
          "type": "address"
        }
      ],
      "name": "setInterface",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "newName",
          "type": "string"
        }
      ],
      "name": "setName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "x",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "y",
          "type": "bytes32"
        }
      ],
      "name": "setPubkey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "value",
          "type": "string"
        }
      ],
      "name": "setText",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "ensName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "internalType": "contract IPublicResolver",
          "name": "fallbackResolver",
          "type": "address"
        }
      ],
      "name": "setTokenContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "hash",
          "type": "bytes"
        }
      ],
      "name": "setZonehash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "key",
          "type": "string"
        }
      ],
      "name": "text",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "contract IERC721",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "zonehash",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe8a8e2daf1ee25ff83828acb012f574053a1ff93fbb9907348ac6ddba15467cf",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xE72285aee8Ad0b545DD6287Aab9EbE8237D4e7Cf",
    "contractAddress": null,
    "transactionIndex": 34,
    "gasUsed": "2635846",
    "logsBloom": "0x
    "blockHash": "0x2b5ac6e7560712a37a7dfc61da0c2ad7fd7295958524dd582aabc6fcdf3b4dba",
    "transactionHash": "0xe8a8e2daf1ee25ff83828acb012f574053a1ff93fbb9907348ac6ddba15467cf",
    "logs": [],
    "blockNumber": 9284158,
    "cumulativeGasUsed": "8431076",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
    "0x114D4603199df73e7D157787f8778E21fCd13066"
  ],
  "numDeployments": 1,
  "solcInputHash": "3a32f099b226e81e32ffbca8f8873f42",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ENS\",\"name\":\"_ens\",\"type\":\"address\"},{\"internalType\":\"contract INameWrapper\",\"name\":\"wrapperAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CallerNotAuthorised\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RecordTypeNotSupported\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"contentType\",\"type\":\"uint256\"}],\"name\":\"ABIChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"AddrChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"newAddress\",\"type\":\"bytes\"}],\"name\":\"AddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"}],\"name\":\"ContenthashChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"resource\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"record\",\"type\":\"bytes\"}],\"name\":\"DNSRecordChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"resource\",\"type\":\"uint16\"}],\"name\":\"DNSRecordDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"lastzonehash\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"zonehash\",\"type\":\"bytes\"}],\"name\":\"DNSZonehashChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"implementer\",\"type\":\"address\"}],\"name\":\"InterfaceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"NameChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"y\",\"type\":\"bytes32\"}],\"name\":\"PubkeyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"indexedKey\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"TextChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"newVersion\",\"type\":\"uint64\"}],\"name\":\"VersionChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"contentTypes\",\"type\":\"uint256\"}],\"name\":\"ABI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RESOLVER_SIGNATURE__ADDR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RESOLVER_SIGNATURE__ADDR_WITH_COINTYPE\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RESOLVER_SIGNATURE__TEXT\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"addr\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"}],\"name\":\"addr\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedDelegates\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"clearRecords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"contenthash\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"resource\",\"type\":\"uint16\"}],\"name\":\"dnsRecord\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ens\",\"outputs\":[{\"internalType\":\"contract ENS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"hasDNSRecords\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"interfaceImplementer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nameWrapper\",\"outputs\":[{\"internalType\":\"contract INameWrapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"parentEnsNodes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"pubkey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"y\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"recordVersions\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"dnsEncodedName\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"resolverCalldata\",\"type\":\"bytes\"}],\"name\":\"resolve\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"contentType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"setABI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"a\",\"type\":\"bytes\"}],\"name\":\"setAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"}],\"name\":\"setContenthash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"setDNSRecords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"implementer\",\"type\":\"address\"}],\"name\":\"setInterface\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"y\",\"type\":\"bytes32\"}],\"name\":\"setPubkey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"setText\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ensName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"contract IPublicResolver\",\"name\":\"fallbackResolver\",\"type\":\"address\"}],\"name\":\"setTokenContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"}],\"name\":\"setZonehash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"text\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"zonehash\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"ABI(bytes32,uint256)\":{\"params\":{\"contentTypes\":\"A bitwise OR of the ABI formats accepted by the caller.\",\"node\":\"The ENS node to query\"},\"returns\":{\"_0\":\"contentType The content type of the return value\",\"_1\":\"data The ABI data\"}},\"addr(bytes32)\":{\"params\":{\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The associated address.\"}},\"clearRecords(bytes32)\":{\"params\":{\"node\":\"The node to update.\"}},\"contenthash(bytes32)\":{\"params\":{\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The associated contenthash.\"}},\"dnsRecord(bytes32,bytes32,uint16)\":{\"params\":{\"name\":\"the keccak-256 hash of the fully-qualified name for which to fetch the record\",\"node\":\"the namehash of the node for which to fetch the record\",\"resource\":\"the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\"},\"returns\":{\"_0\":\"the DNS record in wire format if present, otherwise empty\"}},\"interfaceImplementer(bytes32,bytes4)\":{\"params\":{\"interfaceID\":\"The EIP 165 interface ID to check for.\",\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The address that implements this interface, or 0 if the interface is unsupported.\"}},\"name(bytes32)\":{\"params\":{\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The associated name.\"}},\"pubkey(bytes32)\":{\"params\":{\"node\":\"The ENS node to query\"},\"returns\":{\"x\":\"The X coordinate of the curve point for the public key.\",\"y\":\"The Y coordinate of the curve point for the public key.\"}},\"text(bytes32,string)\":{\"params\":{\"key\":\"The text data key to query.\",\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The associated text data.\"}},\"zonehash(bytes32)\":{\"params\":{\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The associated contenthash.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ABI(bytes32,uint256)\":{\"notice\":\"Returns the ABI associated with an ENS node. Defined in EIP205.\"},\"addr(bytes32)\":{\"notice\":\"Returns the address associated with an ENS node.\"},\"clearRecords(bytes32)\":{\"notice\":\"Increments the record version associated with an ENS node. May only be called by the owner of that node in the ENS registry.\"},\"contenthash(bytes32)\":{\"notice\":\"Returns the contenthash associated with an ENS node.\"},\"dnsRecord(bytes32,bytes32,uint16)\":{\"notice\":\"Obtain a DNS record.\"},\"interfaceImplementer(bytes32,bytes4)\":{\"notice\":\"Returns the address of a contract that implements the specified interface for this name. If an implementer has not been set for this interfaceID and name, the resolver will query the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that contract implements EIP165 and returns `true` for the specified interfaceID, its address will be returned.\"},\"name(bytes32)\":{\"notice\":\"Returns the name associated with an ENS node, for reverse records. Defined in EIP181.\"},\"pubkey(bytes32)\":{\"notice\":\"Returns the SECP256k1 public key associated with an ENS node. Defined in EIP 619.\"},\"text(bytes32,string)\":{\"notice\":\"Returns the text data associated with an ENS node and key.\"},\"zonehash(bytes32)\":{\"notice\":\"zonehash obtains the hash for the zone.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ensWildcardResolvers/Erc721WildcardResolver.sol\":\"Erc721WildcardResolver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@ensdomains/ens-contracts/contracts/ethregistrar/IBaseRegistrar.sol\":{\"content\":\"import \\\"../registry/ENS.sol\\\";\\nimport \\\"./IBaseRegistrar.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IBaseRegistrar is IERC721 {\\n    event ControllerAdded(address indexed controller);\\n    event ControllerRemoved(address indexed controller);\\n    event NameMigrated(\\n        uint256 indexed id,\\n        address indexed owner,\\n        uint256 expires\\n    );\\n    event NameRegistered(\\n        uint256 indexed id,\\n        address indexed owner,\\n        uint256 expires\\n    );\\n    event NameRenewed(uint256 indexed id, uint256 expires);\\n\\n    // Authorises a controller, who can register and renew domains.\\n    function addController(address controller) external;\\n\\n    // Revoke controller permission for an address.\\n    function removeController(address controller) external;\\n\\n    // Set the resolver for the TLD this registrar manages.\\n    function setResolver(address resolver) external;\\n\\n    // Returns the expiration timestamp of the specified label hash.\\n    function nameExpires(uint256 id) external view returns (uint256);\\n\\n    // Returns true if the specified name is available for registration.\\n    function available(uint256 id) external view returns (bool);\\n\\n    /**\\n     * @dev Register a name.\\n     */\\n    function register(\\n        uint256 id,\\n        address owner,\\n        uint256 duration\\n    ) external returns (uint256);\\n\\n    function renew(uint256 id, uint256 duration) external returns (uint256);\\n\\n    /**\\n     * @dev Reclaim ownership of a name in ENS, if you own it in the registrar.\\n     */\\n    function reclaim(uint256 id, address owner) external;\\n}\\n\",\"keccak256\":\"0x15f7b1dfa7cd34444daf79ec9b4d40437caa9257893ce0639d706fcc2ba69e52\"},\"@ensdomains/ens-contracts/contracts/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface ENS {\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner\\n    ) external returns (bytes32);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setOwner(bytes32 node, address owner) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function owner(bytes32 node) external view returns (address);\\n\\n    function resolver(bytes32 node) external view returns (address);\\n\\n    function ttl(bytes32 node) external view returns (uint64);\\n\\n    function recordExists(bytes32 node) external view returns (bool);\\n\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7cb1158c7d268b63de1468e28e2711b28d686e2628ddb22da2149cd93ddeafda\"},\"@ensdomains/ens-contracts/contracts/resolvers/ResolverBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"./profiles/IVersionableResolver.sol\\\";\\n\\nabstract contract ResolverBase is ERC165, IVersionableResolver {\\n    mapping(bytes32 => uint64) public recordVersions;\\n\\n    function isAuthorised(bytes32 node) internal view virtual returns (bool);\\n\\n    modifier authorised(bytes32 node) {\\n        require(isAuthorised(node));\\n        _;\\n    }\\n\\n    /**\\n     * Increments the record version associated with an ENS node.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * @param node The node to update.\\n     */\\n    function clearRecords(bytes32 node) public virtual authorised(node) {\\n        recordVersions[node]++;\\n        emit VersionChanged(node, recordVersions[node]);\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) public view virtual override returns (bool) {\\n        return\\n            interfaceID == type(IVersionableResolver).interfaceId ||\\n            super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0x893049fffd6feee06d7acef1680f6e26505bedff62a9f7a17e921c0ba2f66307\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IABIResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IABIResolver {\\n    event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\\n\\n    /**\\n     * Returns the ABI associated with an ENS node.\\n     * Defined in EIP205.\\n     * @param node The ENS node to query\\n     * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\\n     * @return contentType The content type of the return value\\n     * @return data The ABI data\\n     */\\n    function ABI(\\n        bytes32 node,\\n        uint256 contentTypes\\n    ) external view returns (uint256, bytes memory);\\n}\\n\",\"keccak256\":\"0x85b373d02d19374fe570af407f459768285704bf7f30ab17c30eabfb5a10e4c3\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddrResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the legacy (ETH-only) addr function.\\n */\\ninterface IAddrResolver {\\n    event AddrChanged(bytes32 indexed node, address a);\\n\\n    /**\\n     * Returns the address associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated address.\\n     */\\n    function addr(bytes32 node) external view returns (address payable);\\n}\\n\",\"keccak256\":\"0x2ad7f2fc60ebe0f93745fe70247f6a854f66af732483fda2a3c5e055614445e8\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the new (multicoin) addr function.\\n */\\ninterface IAddressResolver {\\n    event AddressChanged(\\n        bytes32 indexed node,\\n        uint256 coinType,\\n        bytes newAddress\\n    );\\n\\n    function addr(\\n        bytes32 node,\\n        uint256 coinType\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x411447c1e90c51e09702815a85ec725ffbbe37cf96e8cc4d2a8bd4ad8a59d73e\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IContentHashResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IContentHashResolver {\\n    event ContenthashChanged(bytes32 indexed node, bytes hash);\\n\\n    /**\\n     * Returns the contenthash associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated contenthash.\\n     */\\n    function contenthash(bytes32 node) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xd95cd77684ba5752c428d7dceb4ecc6506ac94f4fbb910489637eb68dcd8e366\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IDNSRecordResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IDNSRecordResolver {\\n    // DNSRecordChanged is emitted whenever a given node/name/resource's RRSET is updated.\\n    event DNSRecordChanged(\\n        bytes32 indexed node,\\n        bytes name,\\n        uint16 resource,\\n        bytes record\\n    );\\n    // DNSRecordDeleted is emitted whenever a given node/name/resource's RRSET is deleted.\\n    event DNSRecordDeleted(bytes32 indexed node, bytes name, uint16 resource);\\n\\n    /**\\n     * Obtain a DNS record.\\n     * @param node the namehash of the node for which to fetch the record\\n     * @param name the keccak-256 hash of the fully-qualified name for which to fetch the record\\n     * @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\\n     * @return the DNS record in wire format if present, otherwise empty\\n     */\\n    function dnsRecord(\\n        bytes32 node,\\n        bytes32 name,\\n        uint16 resource\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xcfa52200edd337f2c6c5bf402352600584da033b21323603e53de33051a3e25d\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IDNSZoneResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IDNSZoneResolver {\\n    // DNSZonehashChanged is emitted whenever a given node's zone hash is updated.\\n    event DNSZonehashChanged(\\n        bytes32 indexed node,\\n        bytes lastzonehash,\\n        bytes zonehash\\n    );\\n\\n    /**\\n     * zonehash obtains the hash for the zone.\\n     * @param node The ENS node to query.\\n     * @return The associated contenthash.\\n     */\\n    function zonehash(bytes32 node) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xca1b3a16e7005533f2800a3e66fcdccf7c574deac7913d8c810f40aec1d58dc0\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IExtendedResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IExtendedResolver {\\n    function resolve(\\n        bytes memory name,\\n        bytes memory data\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x5d81521cfae7d9a4475d27533cd8ed0d3475d369eb0674fd90ffbdbdf292faa3\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IInterfaceResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IInterfaceResolver {\\n    event InterfaceChanged(\\n        bytes32 indexed node,\\n        bytes4 indexed interfaceID,\\n        address implementer\\n    );\\n\\n    /**\\n     * Returns the address of a contract that implements the specified interface for this name.\\n     * If an implementer has not been set for this interfaceID and name, the resolver will query\\n     * the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that\\n     * contract implements EIP165 and returns `true` for the specified interfaceID, its address\\n     * will be returned.\\n     * @param node The ENS node to query.\\n     * @param interfaceID The EIP 165 interface ID to check for.\\n     * @return The address that implements this interface, or 0 if the interface is unsupported.\\n     */\\n    function interfaceImplementer(\\n        bytes32 node,\\n        bytes4 interfaceID\\n    ) external view returns (address);\\n}\\n\",\"keccak256\":\"0x390321fb58f7b927df9562450981e74b4be3907e7c09df321fd3b7409b63ae28\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/INameResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface INameResolver {\\n    event NameChanged(bytes32 indexed node, string name);\\n\\n    /**\\n     * Returns the name associated with an ENS node, for reverse records.\\n     * Defined in EIP181.\\n     * @param node The ENS node to query.\\n     * @return The associated name.\\n     */\\n    function name(bytes32 node) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x9ec392b612447b1acbdc01114f2da2837a658d3f3157f60a99c5269f0b623346\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IPubkeyResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IPubkeyResolver {\\n    event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\\n\\n    /**\\n     * Returns the SECP256k1 public key associated with an ENS node.\\n     * Defined in EIP 619.\\n     * @param node The ENS node to query\\n     * @return x The X coordinate of the curve point for the public key.\\n     * @return y The Y coordinate of the curve point for the public key.\\n     */\\n    function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y);\\n}\\n\",\"keccak256\":\"0x69748947093dd2fda9ddcebd0adf19a6d1e7600df1d4b1462a0417156caddca7\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/ITextResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface ITextResolver {\\n    event TextChanged(\\n        bytes32 indexed node,\\n        string indexed indexedKey,\\n        string key,\\n        string value\\n    );\\n\\n    /**\\n     * Returns the text data associated with an ENS node and key.\\n     * @param node The ENS node to query.\\n     * @param key The text data key to query.\\n     * @return The associated text data.\\n     */\\n    function text(\\n        bytes32 node,\\n        string calldata key\\n    ) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x7c5debb3c42cd9f5de2274ea7aa053f238608314b62db441c40e31cea2543fd5\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IVersionableResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IVersionableResolver {\\n    event VersionChanged(bytes32 indexed node, uint64 newVersion);\\n\\n    function recordVersions(bytes32 node) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xd0d09596f20c57bafb2ffa8521a8c57120e9af6c6b194f9c689d4da56f91a57c\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/utils/NameEncoder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport {BytesUtils} from \\\"../wrapper/BytesUtils.sol\\\";\\n\\nlibrary NameEncoder {\\n    using BytesUtils for bytes;\\n\\n    function dnsEncodeName(\\n        string memory name\\n    ) internal pure returns (bytes memory dnsName, bytes32 node) {\\n        uint8 labelLength = 0;\\n        bytes memory bytesName = bytes(name);\\n        uint256 length = bytesName.length;\\n        dnsName = new bytes(length + 2);\\n        node = 0;\\n        if (length == 0) {\\n            dnsName[0] = 0;\\n            return (dnsName, node);\\n        }\\n\\n        // use unchecked to save gas since we check for an underflow\\n        // and we check for the length before the loop\\n        unchecked {\\n            for (uint256 i = length - 1; i >= 0; i--) {\\n                if (bytesName[i] == \\\".\\\") {\\n                    dnsName[i + 1] = bytes1(labelLength);\\n                    node = keccak256(\\n                        abi.encodePacked(\\n                            node,\\n                            bytesName.keccak(i + 1, labelLength)\\n                        )\\n                    );\\n                    labelLength = 0;\\n                } else {\\n                    labelLength += 1;\\n                    dnsName[i + 1] = bytesName[i];\\n                }\\n                if (i == 0) {\\n                    break;\\n                }\\n            }\\n        }\\n\\n        node = keccak256(\\n            abi.encodePacked(node, bytesName.keccak(0, labelLength))\\n        );\\n\\n        dnsName[0] = bytes1(labelLength);\\n        return (dnsName, node);\\n    }\\n}\\n\",\"keccak256\":\"0x63fd5f360cef8c9b8b8cfdff20d3f0e955b4c8ac7dfac758788223c61678aad1\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/wrapper/BytesUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\nlibrary BytesUtils {\\n    /*\\n     * @dev Returns the keccak-256 hash of a byte range.\\n     * @param self The byte string to hash.\\n     * @param offset The position to start hashing at.\\n     * @param len The number of bytes to hash.\\n     * @return The hash of the byte range.\\n     */\\n    function keccak(\\n        bytes memory self,\\n        uint256 offset,\\n        uint256 len\\n    ) internal pure returns (bytes32 ret) {\\n        require(offset + len <= self.length);\\n        assembly {\\n            ret := keccak256(add(add(self, 32), offset), len)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the ENS namehash of a DNS-encoded name.\\n     * @param self The DNS-encoded name to hash.\\n     * @param offset The offset at which to start hashing.\\n     * @return The namehash of the name.\\n     */\\n    function namehash(\\n        bytes memory self,\\n        uint256 offset\\n    ) internal pure returns (bytes32) {\\n        (bytes32 labelhash, uint256 newOffset) = readLabel(self, offset);\\n        if (labelhash == bytes32(0)) {\\n            require(offset == self.length - 1, \\\"namehash: Junk at end of name\\\");\\n            return bytes32(0);\\n        }\\n        return\\n            keccak256(abi.encodePacked(namehash(self, newOffset), labelhash));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak-256 hash of a DNS-encoded label, and the offset to the start of the next label.\\n     * @param self The byte string to read a label from.\\n     * @param idx The index to read a label at.\\n     * @return labelhash The hash of the label at the specified index, or 0 if it is the last label.\\n     * @return newIdx The index of the start of the next label.\\n     */\\n    function readLabel(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (bytes32 labelhash, uint256 newIdx) {\\n        require(idx < self.length, \\\"readLabel: Index out of bounds\\\");\\n        uint256 len = uint256(uint8(self[idx]));\\n        if (len > 0) {\\n            labelhash = keccak(self, idx + 1, len);\\n        } else {\\n            labelhash = bytes32(0);\\n        }\\n        newIdx = idx + len + 1;\\n    }\\n}\\n\",\"keccak256\":\"0xf862cd86d749158a554e3cb517efa9097331ec0cf7225117f21e96fb50c67edb\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/wrapper/IMetadataService.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\ninterface IMetadataService {\\n    function uri(uint256) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb3f1cf6df01ed7b15e5f2318f6823afbdb586ca38c2124c67955c645647ae9a2\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/wrapper/INameWrapper.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\nimport \\\"../registry/ENS.sol\\\";\\nimport \\\"../ethregistrar/IBaseRegistrar.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"./IMetadataService.sol\\\";\\nimport \\\"./INameWrapperUpgrade.sol\\\";\\n\\nuint32 constant CANNOT_UNWRAP = 1;\\nuint32 constant CANNOT_BURN_FUSES = 2;\\nuint32 constant CANNOT_TRANSFER = 4;\\nuint32 constant CANNOT_SET_RESOLVER = 8;\\nuint32 constant CANNOT_SET_TTL = 16;\\nuint32 constant CANNOT_CREATE_SUBDOMAIN = 32;\\nuint32 constant CANNOT_APPROVE = 64;\\n//uint16 reserved for parent controlled fuses from bit 17 to bit 32\\nuint32 constant PARENT_CANNOT_CONTROL = 1 << 16;\\nuint32 constant IS_DOT_ETH = 1 << 17;\\nuint32 constant CAN_EXTEND_EXPIRY = 1 << 18;\\nuint32 constant CAN_DO_EVERYTHING = 0;\\nuint32 constant PARENT_CONTROLLED_FUSES = 0xFFFF0000;\\n// all fuses apart from IS_DOT_ETH\\nuint32 constant USER_SETTABLE_FUSES = 0xFFFDFFFF;\\n\\ninterface INameWrapper is IERC1155 {\\n    event NameWrapped(\\n        bytes32 indexed node,\\n        bytes name,\\n        address owner,\\n        uint32 fuses,\\n        uint64 expiry\\n    );\\n\\n    event NameUnwrapped(bytes32 indexed node, address owner);\\n\\n    event FusesSet(bytes32 indexed node, uint32 fuses);\\n    event ExpiryExtended(bytes32 indexed node, uint64 expiry);\\n\\n    function ens() external view returns (ENS);\\n\\n    function registrar() external view returns (IBaseRegistrar);\\n\\n    function metadataService() external view returns (IMetadataService);\\n\\n    function names(bytes32) external view returns (bytes memory);\\n\\n    function name() external view returns (string memory);\\n\\n    function upgradeContract() external view returns (INameWrapperUpgrade);\\n\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n\\n    function wrap(\\n        bytes calldata name,\\n        address wrappedOwner,\\n        address resolver\\n    ) external;\\n\\n    function wrapETH2LD(\\n        string calldata label,\\n        address wrappedOwner,\\n        uint16 ownerControlledFuses,\\n        address resolver\\n    ) external returns (uint64 expires);\\n\\n    function registerAndWrapETH2LD(\\n        string calldata label,\\n        address wrappedOwner,\\n        uint256 duration,\\n        address resolver,\\n        uint16 ownerControlledFuses\\n    ) external returns (uint256 registrarExpiry);\\n\\n    function renew(\\n        uint256 labelHash,\\n        uint256 duration\\n    ) external returns (uint256 expires);\\n\\n    function unwrap(bytes32 node, bytes32 label, address owner) external;\\n\\n    function unwrapETH2LD(\\n        bytes32 label,\\n        address newRegistrant,\\n        address newController\\n    ) external;\\n\\n    function upgrade(bytes calldata name, bytes calldata extraData) external;\\n\\n    function setFuses(\\n        bytes32 node,\\n        uint16 ownerControlledFuses\\n    ) external returns (uint32 newFuses);\\n\\n    function setChildFuses(\\n        bytes32 parentNode,\\n        bytes32 labelhash,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        string calldata label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external returns (bytes32);\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        string calldata label,\\n        address newOwner,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external returns (bytes32);\\n\\n    function extendExpiry(\\n        bytes32 node,\\n        bytes32 labelhash,\\n        uint64 expiry\\n    ) external returns (uint64);\\n\\n    function canModifyName(\\n        bytes32 node,\\n        address addr\\n    ) external view returns (bool);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function ownerOf(uint256 id) external view returns (address owner);\\n\\n    function approve(address to, uint256 tokenId) external;\\n\\n    function getApproved(uint256 tokenId) external view returns (address);\\n\\n    function getData(\\n        uint256 id\\n    ) external view returns (address, uint32, uint64);\\n\\n    function setMetadataService(IMetadataService _metadataService) external;\\n\\n    function uri(uint256 tokenId) external view returns (string memory);\\n\\n    function setUpgradeContract(INameWrapperUpgrade _upgradeAddress) external;\\n\\n    function allFusesBurned(\\n        bytes32 node,\\n        uint32 fuseMask\\n    ) external view returns (bool);\\n\\n    function isWrapped(bytes32) external view returns (bool);\\n\\n    function isWrapped(bytes32, bytes32) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x70310eb67146d7290731c31841399640ac3b6a949eadc6598bc150123d185c57\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/wrapper/INameWrapperUpgrade.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\ninterface INameWrapperUpgrade {\\n    function wrapFromUpgrade(\\n        bytes calldata name,\\n        address wrappedOwner,\\n        uint32 fuses,\\n        uint64 expiry,\\n        address approved,\\n        bytes calldata extraData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x42e0cec6cd9d1a62d51d45b678f69d3e4ad5555e659b197e41257b308346bb8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) internal view returns (bool[] memory) {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     *\\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\\n     * should be exercised when using this function.\\n     *\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x5a08ad61f4e82b8a3323562661a86fb10b10190848073fdc13d4ac43710ffba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/ensWildcardResolvers/Erc721WildcardResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IExtendedResolver.sol\\\";\\nimport \\\"@ensdomains/ens-contracts/contracts/utils/NameEncoder.sol\\\";\\nimport \\\"@ensdomains/ens-contracts/contracts/registry/ENS.sol\\\";\\nimport \\\"@ensdomains/ens-contracts/contracts/wrapper/INameWrapper.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"../libraries/ENSByteUtils.sol\\\";\\nimport \\\"../libraries/ENSParentName.sol\\\";\\nimport \\\"../libraries/ENSNamehash.sol\\\";\\nimport \\\"../libraries/StringParsing.sol\\\";\\nimport \\\"./PassthroughResolver.sol\\\";\\n\\ncontract Erc721WildcardResolver is Context, PassthroughResolver, IExtendedResolver {\\n    using ENSParentName for bytes;\\n    using ENSNamehash for bytes;\\n    using ENSByteUtils for address;\\n    using ERC165Checker for address;\\n    using NameEncoder for string;\\n    using StringParsing for bytes;\\n    using Strings for string;\\n    using Strings for address;\\n    using Strings for uint256;\\n\\n    error RecordTypeNotSupported();\\n    error CallerNotAuthorised();\\n    error InvalidTokenContract();\\n\\n    bytes4 public constant RESOLVER_SIGNATURE__ADDR = bytes4(keccak256(bytes(\\\"addr(bytes32)\\\")));\\n    bytes4 public constant RESOLVER_SIGNATURE__ADDR_WITH_COINTYPE = bytes4(keccak256(bytes(\\\"addr(bytes32,uint256)\\\")));\\n    bytes4 public constant RESOLVER_SIGNATURE__TEXT = bytes4(keccak256(bytes(\\\"text(bytes32,string)\\\")));\\n\\n    uint256 private constant COIN_TYPE_ETH = 60;\\n\\n    ENS public immutable ens;\\n    INameWrapper public immutable nameWrapper;\\n\\n    // dnsEncode(parentName) -> address\\n    // ex: key for \\\"test.eth\\\" is `0x04746573740365746800`\\n    mapping(bytes => IERC721) public tokens;\\n\\n    // dnsEncode(parentName) -> namehash(parentName)\\n    // ex: \\\"test.eth\\\" would be mapped as\\n    // 0x04746573740365746800 -> 0xeb4f647bea6caa36333c816d7b46fdcb05f9466ecacc140ea8c66faf15b3d9f1\\n    mapping(bytes => bytes32) public parentEnsNodes;\\n\\n    // mapping of namehash(parentName) to set of addresses authorized to set records on the parent\\n    mapping(bytes32 => mapping(address => bool)) public approvedDelegates;\\n\\n    constructor(ENS _ens, INameWrapper wrapperAddress) {\\n        ens = _ens;\\n        nameWrapper = wrapperAddress;\\n    }\\n\\n    function setTokenContract(\\n        string calldata ensName,\\n        address tokenContract,\\n        IPublicResolver fallbackResolver\\n    ) external {\\n        if (!tokenContract.supportsInterface(type(IERC721).interfaceId)) {\\n            revert InvalidTokenContract();\\n        }\\n\\n        (bytes memory encodedName, bytes32 ensNode) = ensName.dnsEncodeName();\\n\\n        if (!isAuthorised(ensNode)) {\\n            revert CallerNotAuthorised();\\n        }\\n\\n        tokens[encodedName] = IERC721(tokenContract);\\n        parentEnsNodes[encodedName] = ensNode;\\n        passthroughTargets[ensNode] = fallbackResolver;\\n    }\\n\\n    function isAuthorised(bytes32 node) internal view virtual override returns (bool) {\\n        return _msgSender() == _nodeOwner(node) || approvedDelegates[node][_msgSender()];\\n    }\\n\\n    function setDelegate(bytes32 node, address delegate, bool approved) external {\\n        if (_msgSender() != _nodeOwner(node)) {\\n            revert CallerNotAuthorised();\\n        }\\n        approvedDelegates[node][delegate] = approved;\\n    }\\n\\n    function resolve(\\n        bytes calldata dnsEncodedName,\\n        bytes calldata resolverCalldata\\n    ) public view override returns (bytes memory) {\\n        bytes4 resolverSignature = bytes4(resolverCalldata[:4]);\\n\\n        if (resolverSignature == RESOLVER_SIGNATURE__ADDR) {\\n            address tokenOwner = _resolveEthAddr(dnsEncodedName);\\n            return abi.encode(tokenOwner);\\n        } else if (resolverSignature == RESOLVER_SIGNATURE__ADDR_WITH_COINTYPE) {\\n            (, uint256 coinType) = abi.decode(resolverCalldata[4:], (bytes32, uint256));\\n            if (coinType == COIN_TYPE_ETH) {\\n                address tokenOwner = _resolveEthAddr(dnsEncodedName);\\n                return abi.encode(tokenOwner.toBytes());\\n            } else {\\n                // Unsupported COIN_TYPE\\n                bytes memory emptyBytes;\\n                return abi.encode(emptyBytes);\\n            }\\n        } else if (resolverSignature == RESOLVER_SIGNATURE__TEXT) {\\n            string calldata key = _parseKeyFromCalldata(resolverCalldata);\\n            string memory result = _resolveTextRecord(dnsEncodedName, key);\\n            return abi.encode(result);\\n        }\\n\\n        revert RecordTypeNotSupported();\\n    }\\n\\n    function supportsInterface(bytes4 interfaceID) public view virtual override(PassthroughResolver) returns (bool) {\\n        return interfaceID == type(IExtendedResolver).interfaceId || PassthroughResolver.supportsInterface(interfaceID);\\n    }\\n\\n    function _resolveEthAddr(bytes calldata dnsEncodedName) private view returns (address) {\\n        // Check if the caller is asking for a record on the parent name itself (non-wildcard query)\\n        (bool isParentName, bytes32 ensNode) = _isParentName(dnsEncodedName);\\n        if (isParentName) {\\n            return addr(ensNode);\\n        }\\n\\n        // Caller has issued a wildcard query\\n        (bytes calldata childUtf8Encoded, bytes calldata parentDnsEncoded) = dnsEncodedName.splitParentChildNames();\\n\\n        IERC721 tokenContract = tokens[parentDnsEncoded];\\n\\n        // No NFT contract registered for this address\\n        if (address(tokenContract) == address(0)) {\\n            return address(0);\\n        }\\n\\n        // Extract tokenId from child name\\n        (bool valid, uint256 tokenId) = childUtf8Encoded.parseUint256();\\n        if (!valid) {\\n            return address(0);\\n        }\\n\\n        // Lookup token owner\\n        address tokenOwner;\\n        try tokenContract.ownerOf(tokenId) returns (address _tokenOwner) {\\n            tokenOwner = _tokenOwner;\\n        } catch {\\n            tokenOwner = address(0);\\n        }\\n        return tokenOwner;\\n    }\\n\\n    function _resolveTextRecord(\\n        bytes calldata dnsEncodedName,\\n        string calldata key\\n    ) private view returns (string memory) {\\n        // Check if the caller is asking for a record on the parent name itself (non-wildcard query)\\n        (bool isParentName, bytes32 ensNode) = _isParentName(dnsEncodedName);\\n        if (isParentName) {\\n            return text(ensNode, key);\\n        }\\n\\n        (bytes calldata childUtf8Encoded, bytes calldata parentDnsEncoded) = dnsEncodedName.splitParentChildNames();\\n\\n        IERC721 tokenContract = tokens[parentDnsEncoded];\\n\\n        // No NFT contract registered for this address\\n        if (address(tokenContract) == address(0)) {\\n            return \\\"\\\";\\n        }\\n\\n        // Extract tokenId from child name\\n        (bool valid, uint256 tokenId) = childUtf8Encoded.parseUint256();\\n        if (!valid) {\\n            return \\\"\\\";\\n        }\\n\\n        // Don't bother returning anything if this tokenId has never been minted\\n        // solhint-disable-next-line no-empty-blocks\\n        try tokenContract.ownerOf(tokenId) {} catch {\\n            return \\\"\\\";\\n        }\\n\\n        if (key.equal(\\\"avatar\\\")) {\\n            // Standard described here:\\n            // https://docs.ens.domains/ens-improvement-proposals/ensip-12-avatar-text-records\\n            return string.concat(\\\"eip155:1/erc721:\\\", address(tokenContract).toHexString(), \\\"/\\\", tokenId.toString());\\n        } else if (key.equal(\\\"url\\\")) {\\n            string memory url;\\n            try IERC721Metadata(address(tokenContract)).tokenURI(tokenId) returns (string memory _url) {\\n                url = _url;\\n            } catch {\\n                url = \\\"\\\";\\n            }\\n            return url;\\n        }\\n\\n        // unsupported key\\n        return \\\"\\\";\\n    }\\n\\n    function _isParentName(bytes calldata dnsEncodedName) internal view returns (bool, bytes32 ensNode) {\\n        ensNode = parentEnsNodes[dnsEncodedName];\\n        return (ensNode != bytes32(0), ensNode);\\n    }\\n\\n    function _parseKeyFromCalldata(bytes calldata resolverCalldata) internal pure returns (string calldata key) {\\n        // ENS resolvers expect that the `key` for text queries is passed in via calldata.\\n        //\\n        // Until this is implemented in Solidity, we have to hand-pick the string out\\n        // of the calldata ourself: https://github.com/ethereum/solidity/issues/13518\\n        //\\n        // Here's the cleaner version once the above is implemented:\\n        //    (, string calldata key) = abi.decode(resolverCalldata[4:], (bytes32, string calldata));\\n        //\\n        // Reminder: the text resolver signature is `text(bytes32 ensNode, string [calldata] key)`\\n        //\\n        // Offset math:\\n        //    - 4 bytes for the function selector for `text(bytes32,string)`\\n        //    - 32 bytes for the `ensNode` as bytes32\\n        //    - 32 bytes to encode the offset to start of data part of the dynamic string parameter\\n        //         (see https://docs.soliditylang.org/en/v0.8.20/abi-spec.html#use-of-dynamic-types)\\n        //    - 32 bytes for the string's length: uint256(len(bytes(key_as_utf8_string)))\\n        //    - Remainder is the UTF8 encoding of the key, right-padded to a multiple of 32 bytes\\n        uint256 keyLengthOffset = 4 + 32 + 32;\\n        uint256 keyOffset = keyLengthOffset + 32;\\n\\n        uint256 keyLength = abi.decode(resolverCalldata[keyLengthOffset:], (uint256));\\n\\n        key = string(resolverCalldata[keyOffset:keyOffset + keyLength]);\\n    }\\n\\n    function _nodeOwner(bytes32 node) internal view returns (address) {\\n        address owner = ens.owner(node);\\n        if (owner == address(nameWrapper)) {\\n            owner = nameWrapper.ownerOf(uint256(node));\\n        }\\n        return owner;\\n    }\\n}\\n\",\"keccak256\":\"0x9d2e9b9364a6b432e89a66dc4906d801daba068dbce312f28b433b753a10817b\",\"license\":\"MIT\"},\"contracts/ensWildcardResolvers/IPublicResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IABIResolver.sol\\\";\\nimport \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddrResolver.sol\\\";\\nimport \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddressResolver.sol\\\";\\nimport \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IContentHashResolver.sol\\\";\\nimport \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IDNSRecordResolver.sol\\\";\\nimport \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IDNSZoneResolver.sol\\\";\\nimport \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IInterfaceResolver.sol\\\";\\nimport \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/INameResolver.sol\\\";\\nimport \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IPubkeyResolver.sol\\\";\\nimport \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/ITextResolver.sol\\\";\\n\\ninterface IPublicResolver is\\n    IABIResolver,\\n    IAddrResolver,\\n    IAddressResolver,\\n    IContentHashResolver,\\n    IDNSRecordResolver,\\n    IDNSZoneResolver,\\n    IInterfaceResolver,\\n    INameResolver,\\n    IPubkeyResolver,\\n    ITextResolver\\n{\\n    function setABI(bytes32 node, uint256 contentType, bytes calldata data) external;\\n\\n    function setAddr(bytes32 node, address a) external;\\n\\n    function setAddr(bytes32 node, uint256 coinType, bytes memory a) external;\\n\\n    function setContenthash(bytes32 node, bytes calldata hash) external;\\n\\n    function setDNSRecords(bytes32 node, bytes calldata data) external;\\n\\n    function hasDNSRecords(bytes32 node, bytes32 name) external view returns (bool);\\n\\n    function setZonehash(bytes32 node, bytes calldata hash) external;\\n\\n    function setInterface(bytes32 node, bytes4 interfaceID, address implementer) external;\\n\\n    function setName(bytes32 node, string calldata newName) external;\\n\\n    function setPubkey(bytes32 node, bytes32 x, bytes32 y) external;\\n\\n    function setText(bytes32 node, string calldata key, string calldata value) external;\\n}\\n\",\"keccak256\":\"0x1fcd89d9694561e4cfd0daee11a84777e78e3d72308d296bfc20ec04a8dd4f1b\",\"license\":\"MIT\"},\"contracts/ensWildcardResolvers/PassthroughResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@ensdomains/ens-contracts/contracts/resolvers/ResolverBase.sol\\\";\\nimport \\\"./IPublicResolver.sol\\\";\\n\\n/**\\n * @dev PassthroughResolver is an ENS Resolver that forwards all calls to a\\n * fallback Resolver. A custom resolver may inherit this contract\\n * to selectively implement specific record types, deferring all others to the\\n * fallback Resolver (usually whatever public Resolver the ENS app set on behalf\\n * of the user when a name was registered).\\n */\\nabstract contract PassthroughResolver is ResolverBase, IPublicResolver {\\n    mapping(bytes32 => IPublicResolver) internal passthroughTargets;\\n\\n    function isAuthorised(bytes32) internal view virtual override returns (bool);\\n\\n    function supportsInterface(bytes4 interfaceID) public view virtual override returns (bool) {\\n        return\\n            interfaceID == type(IABIResolver).interfaceId ||\\n            interfaceID == type(IAddrResolver).interfaceId ||\\n            interfaceID == type(IAddressResolver).interfaceId ||\\n            interfaceID == type(IContentHashResolver).interfaceId ||\\n            interfaceID == type(IDNSRecordResolver).interfaceId ||\\n            interfaceID == type(IDNSZoneResolver).interfaceId ||\\n            interfaceID == type(IInterfaceResolver).interfaceId ||\\n            interfaceID == type(INameResolver).interfaceId ||\\n            interfaceID == type(IPubkeyResolver).interfaceId ||\\n            interfaceID == type(ITextResolver).interfaceId ||\\n            super.supportsInterface(interfaceID);\\n    }\\n\\n    function setABI(bytes32 node, uint256 contentType, bytes calldata data) external virtual authorised(node) {\\n        passthroughTargets[node].setABI(node, contentType, data);\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function ABI(bytes32 node, uint256 contentTypes) external view virtual override returns (uint256, bytes memory) {\\n        return passthroughTargets[node].ABI(node, contentTypes);\\n    }\\n\\n    function setAddr(bytes32 node, address a) external virtual authorised(node) {\\n        passthroughTargets[node].setAddr(node, a);\\n    }\\n\\n    function addr(bytes32 node) public view virtual override returns (address payable) {\\n        return passthroughTargets[node].addr(node);\\n    }\\n\\n    function setAddr(bytes32 node, uint256 coinType, bytes memory a) public virtual authorised(node) {\\n        passthroughTargets[node].setAddr(node, coinType, a);\\n    }\\n\\n    function addr(bytes32 node, uint256 coinType) public view virtual override returns (bytes memory) {\\n        return passthroughTargets[node].addr(node, coinType);\\n    }\\n\\n    function setContenthash(bytes32 node, bytes calldata hash) external virtual authorised(node) {\\n        passthroughTargets[node].setContenthash(node, hash);\\n    }\\n\\n    function contenthash(bytes32 node) external view virtual override returns (bytes memory) {\\n        return passthroughTargets[node].contenthash(node);\\n    }\\n\\n    function setDNSRecords(bytes32 node, bytes calldata data) external virtual authorised(node) {\\n        passthroughTargets[node].setDNSRecords(node, data);\\n    }\\n\\n    function dnsRecord(\\n        bytes32 node,\\n        bytes32 name,\\n        uint16 resource\\n    ) public view virtual override returns (bytes memory) {\\n        return passthroughTargets[node].dnsRecord(node, name, resource);\\n    }\\n\\n    function hasDNSRecords(bytes32 node, bytes32 name) public view virtual returns (bool) {\\n        return passthroughTargets[node].hasDNSRecords(node, name);\\n    }\\n\\n    function setZonehash(bytes32 node, bytes calldata hash) external virtual authorised(node) {\\n        passthroughTargets[node].setZonehash(node, hash);\\n    }\\n\\n    function zonehash(bytes32 node) external view virtual override returns (bytes memory) {\\n        return passthroughTargets[node].zonehash(node);\\n    }\\n\\n    function setInterface(bytes32 node, bytes4 interfaceID, address implementer) external virtual authorised(node) {\\n        passthroughTargets[node].setInterface(node, interfaceID, implementer);\\n    }\\n\\n    function interfaceImplementer(bytes32 node, bytes4 interfaceID) external view virtual override returns (address) {\\n        return passthroughTargets[node].interfaceImplementer(node, interfaceID);\\n    }\\n\\n    function setName(bytes32 node, string calldata newName) external virtual authorised(node) {\\n        passthroughTargets[node].setName(node, newName);\\n    }\\n\\n    function name(bytes32 node) external view virtual override returns (string memory) {\\n        return passthroughTargets[node].name(node);\\n    }\\n\\n    function setPubkey(bytes32 node, bytes32 x, bytes32 y) external virtual authorised(node) {\\n        passthroughTargets[node].setPubkey(node, x, y);\\n    }\\n\\n    function pubkey(bytes32 node) external view virtual override returns (bytes32 x, bytes32 y) {\\n        return passthroughTargets[node].pubkey(node);\\n    }\\n\\n    function setText(bytes32 node, string calldata key, string calldata value) external virtual authorised(node) {\\n        passthroughTargets[node].setText(node, key, value);\\n    }\\n\\n    function text(bytes32 node, string calldata key) public view virtual override returns (string memory) {\\n        return passthroughTargets[node].text(node, key);\\n    }\\n}\\n\",\"keccak256\":\"0x187576df3fb35f82d1443c48ce4d6ebc610510db8dd7385905efbd2e724f9c56\",\"license\":\"MIT\"},\"contracts/libraries/ENSByteUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line max-line-length\\n// Source: https://github.com/ensdomains/ens-contracts/blob/340a6d05cd00d078ae40edbc58c139eb7048189a/contracts/resolvers/profiles/AddrResolver.sol\\n\\npragma solidity ^0.8.4;\\n\\n/*\\n * @dev Converts addresses to and from their byte-string representations\\n */\\nlibrary ENSByteUtils {\\n    // solhint-disable\\n    function toAddress(bytes memory b) internal pure returns (address payable a) {\\n        require(b.length == 20);\\n        assembly {\\n            a := div(mload(add(b, 32)), exp(256, 12)) // cspell:disable-line\\n        }\\n    }\\n\\n    function toBytes(address a) internal pure returns (bytes memory b) {\\n        b = new bytes(20);\\n        assembly {\\n            mstore(add(b, 32), mul(a, exp(256, 12))) // cspell:disable-line\\n        }\\n    }\\n    // solhint-enable\\n}\\n\",\"keccak256\":\"0xfc78a02027a6d31984228748a2555d04ead844e7f883dd8b334330d0150d0940\",\"license\":\"MIT\"},\"contracts/libraries/ENSNamehash.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Source: https://github.com/JonahGroendal/ens-namehash/blob/master/contracts/ENSNamehash.sol\\n\\npragma solidity ^0.8.4;\\n\\n/*\\n * @dev Solidity implementation of the ENS namehash algorithm.\\n *\\n * Warning! Does not normalize or validate names before hashing.\\n */\\nlibrary ENSNamehash {\\n    function namehash(bytes memory domain) internal pure returns (bytes32) {\\n        return namehash(domain, 0);\\n    }\\n\\n    function namehash(bytes memory domain, uint i) internal pure returns (bytes32) {\\n        if (domain.length <= i) return 0x0000000000000000000000000000000000000000000000000000000000000000;\\n\\n        uint len = LabelLength(domain, i);\\n\\n        return keccak256(abi.encodePacked(namehash(domain, i + len + 1), keccak(domain, i, len)));\\n    }\\n\\n    function LabelLength(bytes memory domain, uint i) private pure returns (uint) {\\n        uint len;\\n        while (i + len != domain.length && domain[i + len] != 0x2e) {\\n            len++;\\n        }\\n        return len;\\n    }\\n\\n    function keccak(bytes memory data, uint offset, uint len) private pure returns (bytes32 ret) {\\n        require(offset + len <= data.length);\\n        assembly {\\n            ret := keccak256(add(add(data, 32), offset), len)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2e0ef9e175164347b4c80c0f6d2e03212cabbcae8f36e8ced03f66042aca011a\",\"license\":\"MIT\"},\"contracts/libraries/ENSParentName.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nlibrary ENSParentName {\\n    /**\\n     * @dev Finds the parent name of a given ENS name, or the empty string if there is no parent.\\n     *      Assumes the given name is already a well-formed ENS name, and does not check for invalid input.\\n     * @param name A DNS-encoded name, e.g. 0x03666f6f03626172047465737400 for the name `foo.bar.test`\\n     * @return child The UTF8-encoded child label, e.g. 0x666f6f for `foo`\\n     * @return parent The DNS-encoded parent, e.g. 03626172047465737400 for `bar.test`\\n     */\\n    function splitParentChildNames(\\n        bytes calldata name\\n    ) internal pure returns (bytes calldata child, bytes calldata parent) {\\n        uint8 labelLength = uint8(name[0]);\\n        return (name[1:labelLength + 1], name[labelLength + 1:]);\\n    }\\n}\\n\",\"keccak256\":\"0x8dc36dc3f1ff0ddc7a73a7f9c410999571fc9c4ea0157b294993f4f215ba2b5f\",\"license\":\"MIT\"},\"contracts/libraries/StringParsing.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nlibrary StringParsing {\\n    /**\\n     * @dev Parses a UTF8 string of digits representing an unsigned integer.\\n     */\\n    function parseUint256(bytes calldata b) internal pure returns (bool valid, uint256 parsed) {\\n        uint i;\\n        parsed = 0;\\n        for (i = 0; i < b.length; i++) {\\n            if (b[i] < bytes1(0x30) || b[i] > bytes1(0x39)) {\\n                return (false, 0);\\n            }\\n            uint c = uint(uint8(b[i])) - 48;\\n            parsed = parsed * 10 + c;\\n        }\\n        return (true, parsed);\\n    }\\n}\\n\",\"keccak256\":\"0x30416dd73951b1eef45e81e0221e9165e33d7e5b6145dee874b174cf44f37317\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162002f7e38038062002f7e833981016040819052620000349162000065565b6001600160a01b039182166080521660a052620000a4565b6001600160a01b03811681146200006257600080fd5b50565b600080604083850312156200007957600080fd5b825162000086816200004c565b602084015190925062000099816200004c565b809150509250929050565b60805160a051612e9f620000df6000396000818161056e01528181611e620152611eaf0152600081816103a80152611df30152612e9f6000f3fe608060405234801561001057600080fd5b50600436106102415760003560e01c8063623195b011610145578063bc1c58d1116100bd578063d5fa2b001161008c578063e59d895d11610071578063e59d895d1461065a578063ef47ee621461066d578063f1cb7e06146106c957600080fd5b8063d5fa2b0014610604578063d700ff331461061757600080fd5b8063bc1c58d1146105a3578063c74d8c05146105b6578063c8690233146105c9578063ce3decdc146105f157600080fd5b80639061b923116101145780639bce71d0116100f95780639bce71d014610535578063a8e5fbc014610569578063a8fa56821461059057600080fd5b80639061b923146104e95780639ba47309146104fc57600080fd5b8063623195b01461049d578063691f3431146104b057806377372213146104c35780638b95dd71146104d657600080fd5b80633603d758116101d85780634cbf6ba4116101a757806359d1d43c1161018c57806359d1d43c1461043c5780635c98042b1461045c5780635d1044a61461046f57600080fd5b80634cbf6ba4146103dd5780635048cea0146103f057600080fd5b80633603d7581461037d5780633b3b57de146103905780633f15457f146103a35780633f5bc277146103ca57600080fd5b80632203ab56116102145780632203ab56146102c157806329cd62ea146102e25780632d170539146102f5578063304e6ade1461036a57600080fd5b806301ffc9a7146102465780630af179d71461026e57806310f13a8c14610283578063124a319c14610296575b600080fd5b6102596102543660046124f4565b6106dc565b60405190151581526020015b60405180910390f35b61028161027c366004612551565b610707565b005b61028161029136600461259d565b610793565b6102a96102a4366004612617565b610825565b6040516001600160a01b039091168152602001610265565b6102d46102cf366004612643565b6108b6565b6040516102659291906126b5565b6102816102f03660046126ce565b610947565b60408051808201909152601481527f7465787428627974657333322c737472696e67290000000000000000000000006020909101526103517f59d1d43c37707a29830be065fcabd05d6e536466c5159d2e46cb27bda8e98d6581565b6040516001600160e01b03199091168152602001610265565b610281610378366004612551565b6109a6565b61028161038b3660046126fa565b6109fa565b6102a961039e3660046126fa565b610a9d565b6102a97f000000000000000000000000000000000000000000000000000000000000000081565b6102816103d836600461272b565b610b16565b6102596103eb366004612643565b610c6a565b60408051808201909152600d81526c6164647228627974657333322960981b6020909101526103517f3b3b57de213591bb50e06975ea011e4c8c4b3e6de4009450c1a9e55f66e4bfa481565b61044f61044a366004612551565b610cea565b6040516102659190612793565b61044f61046a3660046126fa565b610d79565b61025961047d3660046127a6565b600460209081526000928352604080842090915290825290205460ff1681565b6102816104ab3660046127d6565b610df9565b61044f6104be3660046126fa565b610e88565b6102816104d1366004612551565b610f07565b6102816104e43660046128ee565b610f5b565b61044f6104f736600461293e565b610faf565b61052761050a36600461299e565b805160208183018101805160038252928201919093012091525481565b604051908152602001610265565b6102a961054336600461299e565b80516020818301810180516002825292820191909301209152546001600160a01b031681565b6102a97f000000000000000000000000000000000000000000000000000000000000000081565b61044f61059e3660046129d3565b6111c5565b61044f6105b13660046126fa565b611255565b6102816105c4366004612a21565b611294565b6105dc6105d73660046126fa565b611303565b60408051928352602083019190915201610265565b6102816105ff366004612551565b611384565b6102816106123660046127a6565b6113d8565b6106416106253660046126fa565b60006020819052908152604090205467ffffffffffffffff1681565b60405167ffffffffffffffff9091168152602001610265565b610281610668366004612a58565b611462565b60408051808201909152601581527f6164647228627974657333322c75696e743235362900000000000000000000006020909101526103517ff1cb7e06eed69ff6b1133c27a055176e5b0f641e8f94df2da7711eae8558f7b181565b61044f6106d7366004612643565b6114cb565b60006001600160e01b03198216639061b92360e01b1480610701575061070182611551565b92915050565b8261071181611669565b61071a57600080fd5b60008481526001602052604090819020549051630af179d760e01b81526001600160a01b0390911690630af179d79061075b90879087908790600401612ab6565b600060405180830381600087803b15801561077557600080fd5b505af1158015610789573d6000803e3d6000fd5b5050505050505050565b8461079d81611669565b6107a657600080fd5b6000868152600160205260409081902054905163043c4ea360e21b81526001600160a01b03909116906310f13a8c906107eb9089908990899089908990600401612ad9565b600060405180830381600087803b15801561080557600080fd5b505af1158015610819573d6000803e3d6000fd5b50505050505050505050565b6000828152600160205260408082205490516304928c6760e21b8152600481018590526001600160e01b0319841660248201526001600160a01b039091169063124a319c906044015b602060405180830381865afa15801561088b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108af9190612b12565b9392505050565b600082815260016020526040808220549051631101d5ab60e11b815260048101859052602481018490526060916001600160a01b031690632203ab5690604401600060405180830381865afa158015610913573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261093b9190810190612b7f565b915091505b9250929050565b8261095181611669565b61095a57600080fd5b600084815260016020526040908190205490516314e6b17560e11b81526004810186905260248101859052604481018490526001600160a01b03909116906329cd62ea9060640161075b565b826109b081611669565b6109b957600080fd5b60008481526001602052604090819020549051631827356f60e11b81526001600160a01b039091169063304e6ade9061075b90879087908790600401612ab6565b80610a0481611669565b610a0d57600080fd5b6000828152602081905260408120805467ffffffffffffffff1691610a3183612bdc565b82546101009290920a67ffffffffffffffff818102199093169183160217909155600084815260208181526040918290205491519190921681528492507fc6621ccb8f3f5a04bb6502154b2caf6adf5983fe76dfef1cfc9c42e3579db444910160405180910390a25050565b600081815260016020526040808220549051631d9dabef60e11b8152600481018490526001600160a01b0390911690633b3b57de90602401602060405180830381865afa158015610af2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107019190612b12565b610b306001600160a01b0383166380ac58cd60e01b6116af565b610b4d57604051630a6f7ecd60e21b815260040160405180910390fd5b600080610b8f86868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506116cb92505050565b91509150610b9c81611669565b610bb95760405163fc28781360e01b815260040160405180910390fd5b83600283604051610bca9190612c03565b908152602001604051809103902060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555080600383604051610c0d9190612c03565b908152604080516020928190038301902092909255600092835260019052902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03939093169290921790915550505050565b60008281526001602052604080822054905163132fdae960e21b815260048101859052602481018490526001600160a01b0390911690634cbf6ba490604401602060405180830381865afa158015610cc6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108af9190612c1f565b60008381526001602052604090819020549051631674750f60e21b81526060916001600160a01b0316906359d1d43c90610d2c90879087908790600401612ab6565b600060405180830381865afa158015610d49573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d719190810190612c3c565b949350505050565b60008181526001602052604090819020549051635c98042b60e01b8152600481018390526060916001600160a01b031690635c98042b906024015b600060405180830381865afa158015610dd1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107019190810190612c85565b83610e0381611669565b610e0c57600080fd5b60008581526001602052604090819020549051630623195b60e41b81526001600160a01b039091169063623195b090610e4f908890889088908890600401612cba565b600060405180830381600087803b158015610e6957600080fd5b505af1158015610e7d573d6000803e3d6000fd5b505050505050505050565b6000818152600160205260409081902054905163691f343160e01b8152600481018390526060916001600160a01b03169063691f343190602401600060405180830381865afa158015610edf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107019190810190612c3c565b82610f1181611669565b610f1a57600080fd5b60008481526001602052604090819020549051637737221360e01b81526001600160a01b039091169063773722139061075b90879087908790600401612ab6565b82610f6581611669565b610f6e57600080fd5b60008481526001602052604090819020549051638b95dd7160e01b81526001600160a01b0390911690638b95dd719061075b90879087908790600401612ce4565b60606000610fc06004828587612d03565b610fc991612d2d565b60408051808201909152600d81526c6164647228627974657333322960981b6020909101529050636262541160e11b6001600160e01b031982160161104357600061101487876118d8565b604080516001600160a01b03831660208201529192500160405160208183030381529060405292505050610d71565b60408051808201909152601581527f6164647228627974657333322c75696e7432353629000000000000000000000060209091015263071a40fd60e11b6001600160e01b031982160161111357600061109f8460048188612d03565b8101906110ac9190612643565b915050603c81036111005760006110c388886118d8565b90506110d7816001600160a01b0316611a0a565b6040516020016110e79190612793565b6040516020818303038152906040529350505050610d71565b6060806040516020016110e79190612793565b60408051808201909152601481527f7465787428627974657333322c737472696e672900000000000000000000000060209091015263298b8af160e21b6001600160e01b03198216016111ac5736600061116d8686611a43565b91509150600061117f89898585611a9b565b9050806040516020016111929190612793565b604051602081830303815290604052945050505050610d71565b60405163dfbcb35160e01b815260040160405180910390fd5b6000838152600160205260409081902054905163547d2b4160e11b8152600481018590526024810184905261ffff831660448201526060916001600160a01b03169063a8fa568290606401600060405180830381865afa15801561122d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d719190810190612c85565b6000818152600160205260409081902054905163bc1c58d160e01b8152600481018390526060916001600160a01b03169063bc1c58d190602401610db4565b61129d83611dd0565b6001600160a01b0316336001600160a01b0316146112ce5760405163fc28781360e01b815260040160405180910390fd5b60009283526004602090815260408085206001600160a01b039490941685529290529120805460ff1916911515919091179055565b60008181526001602052604080822054905163c869023360e01b81526004810184905282916001600160a01b03169063c8690233906024016040805180830381865afa158015611357573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137b9190612d5d565b91509150915091565b8261138e81611669565b61139757600080fd5b6000848152600160205260409081902054905163338f7b3760e21b81526001600160a01b039091169063ce3decdc9061075b90879087908790600401612ab6565b816113e281611669565b6113eb57600080fd5b6000838152600160205260409081902054905162d5fa2b60e81b8152600481018590526001600160a01b0384811660248301529091169063d5fa2b0090604401600060405180830381600087803b15801561144557600080fd5b505af1158015611459573d6000803e3d6000fd5b50505050505050565b8261146c81611669565b61147557600080fd5b6000848152600160205260409081902054905163e59d895d60e01b8152600481018690526001600160e01b0319851660248201526001600160a01b0384811660448301529091169063e59d895d9060640161075b565b600082815260016020526040908190205490516378e5bf0360e11b815260048101849052602481018390526060916001600160a01b03169063f1cb7e0690604401600060405180830381865afa158015611529573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108af9190810190612c85565b60006001600160e01b03198216631101d5ab60e11b148061158257506001600160e01b03198216631d9dabef60e11b145b8061159d57506001600160e01b031982166378e5bf0360e11b145b806115b857506001600160e01b0319821663bc1c58d160e01b145b806115d357506001600160e01b0319821663547d2b4160e11b145b806115ee57506001600160e01b03198216635c98042b60e01b145b8061160957506001600160e01b031982166304928c6760e21b145b8061162457506001600160e01b0319821663691f343160e01b145b8061163f57506001600160e01b0319821663c869023360e01b145b8061165a57506001600160e01b03198216631674750f60e21b145b80610701575061070182611ee6565b600061167482611dd0565b6001600160a01b0316336001600160a01b03161480610701575050600090815260046020908152604080832033845290915290205460ff1690565b60006116ba83611f1b565b80156108af57506108af8383611f4e565b8051606090600090819084906116e2816002612d81565b67ffffffffffffffff8111156116fa576116fa612829565b6040519080825280601f01601f191660200182016040528015611724576020820181803683370190505b5094506000935080840361176957600060f81b8560008151811061174a5761174a612d94565b60200101906001600160f81b031916908160001a905350505050915091565b60001981015b82818151811061178157611781612d94565b01602001517fff0000000000000000000000000000000000000000000000000000000000000016601760f91b03611827578360f81b8682600101815181106117cb576117cb612d94565b60200101906001600160f81b031916908160001a905350846117f4846001840160ff8816611fec565b60408051602081019390935282015260600160405160208183030381529060405280519060200120945060009350611877565b60018401935082818151811061183f5761183f612d94565b602001015160f81c60f81b86826001018151811061185f5761185f612d94565b60200101906001600160f81b031916908160001a9053505b8015611886576000190161176f565b508361189783600060ff8716611fec565b6040805160208101939093528201526060016040516020818303038152906040528051906020012093508260f81b8560008151811061174a5761174a612d94565b60008060006118e78585612010565b915091508115611903576118fa81610a9d565b92505050610701565b3660003660006119138989612043565b935093509350935060006002838360405161192f929190612daa565b908152604051908190036020019020546001600160a01b031690508061195f576000975050505050505050610701565b60008061196c87876120b7565b91509150816119875760009950505050505050505050610701565b6040516331a9108f60e11b8152600481018290526000906001600160a01b03851690636352211e90602401602060405180830381865afa9250505080156119eb575060408051601f3d908101601f191682019092526119e891810190612b12565b60015b6119f7575060006119fa565b90505b9c9b505050505050505050505050565b6040805160148082528183019092526060916020820181803683375050506c010000000000000000000000009290920260208301525090565b366000604481611a54826020612d81565b90506000611a648684818a612d03565b810190611a7191906126fa565b9050868287611a808483612d81565b92611a8d93929190612d03565b945094505050509250929050565b6060600080611aaa8787612010565b915091508115611ac857611abf818686610cea565b92505050610d71565b366000366000611ad88b8b612043565b9350935093509350600060028383604051611af4929190612daa565b908152604051908190036020019020546001600160a01b0316905080611b325760405180602001604052806000815250975050505050505050610d71565b600080611b3f87876120b7565b9150915081611b6857604051806020016040528060008152509950505050505050505050610d71565b6040516331a9108f60e11b8152600481018290526001600160a01b03841690636352211e90602401602060405180830381865afa925050508015611bc9575060408051601f3d908101601f19168201909252611bc691810190612b12565b60015b611bed57604051806020016040528060008152509950505050505050505050610d71565b50611c666040518060400160405280600681526020017f61766174617200000000000000000000000000000000000000000000000000008152508d8d8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506121969050565b15611cb657611c7d836001600160a01b03166121ac565b611c86826121c2565b604051602001611c97929190612dba565b6040516020818303038152906040529950505050505050505050610d71565b611d14604051806040016040528060038152602001621d5c9b60ea1b8152508d8d8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506121969050565b15611daf5760405163c87b56dd60e01b8152600481018290526060906001600160a01b0385169063c87b56dd90602401600060405180830381865afa925050508015611d8257506040513d6000823e601f3d908101601f19168201604052611d7f9190810190612c3c565b60015b611d9b5750604080516020810190915260008152611d9e565b90505b9950610d7198505050505050505050565b50506040805160208101909152600081529c9b505050505050505050505050565b6040516302571be360e01b81526004810182905260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906302571be390602401602060405180830381865afa158015611e3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5e9190612b12565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031603610701576040516331a9108f60e11b8152600481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636352211e9060240161086e565b60006001600160e01b0319821663d700ff3360e01b148061070157506301ffc9a760e01b6001600160e01b0319831614610701565b6000611f2e826301ffc9a760e01b611f4e565b80156107015750611f47826001600160e01b0319611f4e565b1592915050565b604080516001600160e01b03198316602480830191909152825180830390910181526044909101909152602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166301ffc9a760e01b178152825160009392849283928392918391908a617530fa92503d91506000519050828015611fd5575060208210155b8015611fe15750600081115b979650505050505050565b8251600090611ffb8385612d81565b111561200657600080fd5b5091016020012090565b60008060038484604051612025929190612daa565b90815260405190819003602001902054801515925090509250929050565b366000366000808686600081811061205d5761205d612d94565b919091013560f81c91508790506001876120778483612e1f565b60ff169261208793929190612d03565b8888612094856001612e1f565b60ff169080926120a693929190612d03565b929a91995097509095509350505050565b600080805b8381101561218a57600360fc1b8585838181106120db576120db612d94565b9050013560f81c60f81b6001600160f81b03191610806121235750603960f81b85858381811061210d5761210d612d94565b9050013560f81c60f81b6001600160f81b031916115b15612135576000809250925050610940565b6000603086868481811061214b5761214b612d94565b61215c9392013560f81c9050612e38565b90508061216a84600a612e4b565b6121749190612d81565b925050808061218290612e62565b9150506120bc565b60019250509250929050565b8051602091820120825192909101919091201490565b60606107016001600160a01b0383166014612255565b606060006121cf836123f5565b600101905060008167ffffffffffffffff8111156121ef576121ef612829565b6040519080825280601f01601f191660200182016040528015612219576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461222357509392505050565b60606000612264836002612e4b565b61226f906002612d81565b67ffffffffffffffff81111561228757612287612829565b6040519080825280601f01601f1916602001820160405280156122b1576020820181803683370190505b509050600360fc1b816000815181106122cc576122cc612d94565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106122fb576122fb612d94565b60200101906001600160f81b031916908160001a905350600061231f846002612e4b565b61232a906001612d81565b90505b60018111156123a2576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061235e5761235e612d94565b1a60f81b82828151811061237457612374612d94565b60200101906001600160f81b031916908160001a90535060049490941c9361239b81612e7b565b905061232d565b5083156108af5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640160405180910390fd5b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000831061243e577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef8100000000831061246a576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061248857662386f26fc10000830492506010015b6305f5e10083106124a0576305f5e100830492506008015b61271083106124b457612710830492506004015b606483106124c6576064830492506002015b600a83106107015760010192915050565b80356001600160e01b0319811681146124ef57600080fd5b919050565b60006020828403121561250657600080fd5b6108af826124d7565b60008083601f84011261252157600080fd5b50813567ffffffffffffffff81111561253957600080fd5b60208301915083602082850101111561094057600080fd5b60008060006040848603121561256657600080fd5b83359250602084013567ffffffffffffffff81111561258457600080fd5b6125908682870161250f565b9497909650939450505050565b6000806000806000606086880312156125b557600080fd5b85359450602086013567ffffffffffffffff808211156125d457600080fd5b6125e089838a0161250f565b909650945060408801359150808211156125f957600080fd5b506126068882890161250f565b969995985093965092949392505050565b6000806040838503121561262a57600080fd5b8235915061263a602084016124d7565b90509250929050565b6000806040838503121561265657600080fd5b50508035926020909101359150565b60005b83811015612680578181015183820152602001612668565b50506000910152565b600081518084526126a1816020860160208601612665565b601f01601f19169290920160200192915050565b828152604060208201526000610d716040830184612689565b6000806000606084860312156126e357600080fd5b505081359360208301359350604090920135919050565b60006020828403121561270c57600080fd5b5035919050565b6001600160a01b038116811461272857600080fd5b50565b6000806000806060858703121561274157600080fd5b843567ffffffffffffffff81111561275857600080fd5b6127648782880161250f565b909550935050602085013561277881612713565b9150604085013561278881612713565b939692955090935050565b6020815260006108af6020830184612689565b600080604083850312156127b957600080fd5b8235915060208301356127cb81612713565b809150509250929050565b600080600080606085870312156127ec57600080fd5b8435935060208501359250604085013567ffffffffffffffff81111561281157600080fd5b61281d8782880161250f565b95989497509550505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561286857612868612829565b604052919050565b600067ffffffffffffffff82111561288a5761288a612829565b50601f01601f191660200190565b600082601f8301126128a957600080fd5b81356128bc6128b782612870565b61283f565b8181528460208386010111156128d157600080fd5b816020850160208301376000918101602001919091529392505050565b60008060006060848603121561290357600080fd5b8335925060208401359150604084013567ffffffffffffffff81111561292857600080fd5b61293486828701612898565b9150509250925092565b6000806000806040858703121561295457600080fd5b843567ffffffffffffffff8082111561296c57600080fd5b6129788883890161250f565b9096509450602087013591508082111561299157600080fd5b5061281d8782880161250f565b6000602082840312156129b057600080fd5b813567ffffffffffffffff8111156129c757600080fd5b610d7184828501612898565b6000806000606084860312156129e857600080fd5b8335925060208401359150604084013561ffff81168114612a0857600080fd5b809150509250925092565b801515811461272857600080fd5b600080600060608486031215612a3657600080fd5b833592506020840135612a4881612713565b91506040840135612a0881612a13565b600080600060608486031215612a6d57600080fd5b83359250612a7d602085016124d7565b91506040840135612a0881612713565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b838152604060208201526000612ad0604083018486612a8d565b95945050505050565b858152606060208201526000612af3606083018688612a8d565b8281036040840152612b06818587612a8d565b98975050505050505050565b600060208284031215612b2457600080fd5b81516108af81612713565b6000612b3d6128b784612870565b9050828152838383011115612b5157600080fd5b6108af836020830184612665565b600082601f830112612b7057600080fd5b6108af83835160208501612b2f565b60008060408385031215612b9257600080fd5b82519150602083015167ffffffffffffffff811115612bb057600080fd5b612bbc85828601612b5f565b9150509250929050565b634e487b7160e01b600052601160045260246000fd5b600067ffffffffffffffff808316818103612bf957612bf9612bc6565b6001019392505050565b60008251612c15818460208701612665565b9190910192915050565b600060208284031215612c3157600080fd5b81516108af81612a13565b600060208284031215612c4e57600080fd5b815167ffffffffffffffff811115612c6557600080fd5b8201601f81018413612c7657600080fd5b610d7184825160208401612b2f565b600060208284031215612c9757600080fd5b815167ffffffffffffffff811115612cae57600080fd5b610d7184828501612b5f565b848152836020820152606060408201526000612cda606083018486612a8d565b9695505050505050565b838152826020820152606060408201526000612ad06060830184612689565b60008085851115612d1357600080fd5b83861115612d2057600080fd5b5050820193919092039150565b6001600160e01b03198135818116916004851015612d555780818660040360031b1b83161692505b505092915050565b60008060408385031215612d7057600080fd5b505080516020909101519092909150565b8082018082111561070157610701612bc6565b634e487b7160e01b600052603260045260246000fd5b8183823760009101908152919050565b7f6569703135353a312f6572633732313a00000000000000000000000000000000815260008351612df2816010850160208801612665565b602f60f81b6010918401918201528351612e13816011840160208801612665565b01601101949350505050565b60ff818116838216019081111561070157610701612bc6565b8181038181111561070157610701612bc6565b808202811582820484141761070157610701612bc6565b600060018201612e7457612e74612bc6565b5060010190565b600081612e8a57612e8a612bc6565b50600019019056fea164736f6c6343000811000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102415760003560e01c8063623195b011610145578063bc1c58d1116100bd578063d5fa2b001161008c578063e59d895d11610071578063e59d895d1461065a578063ef47ee621461066d578063f1cb7e06146106c957600080fd5b8063d5fa2b0014610604578063d700ff331461061757600080fd5b8063bc1c58d1146105a3578063c74d8c05146105b6578063c8690233146105c9578063ce3decdc146105f157600080fd5b80639061b923116101145780639bce71d0116100f95780639bce71d014610535578063a8e5fbc014610569578063a8fa56821461059057600080fd5b80639061b923146104e95780639ba47309146104fc57600080fd5b8063623195b01461049d578063691f3431146104b057806377372213146104c35780638b95dd71146104d657600080fd5b80633603d758116101d85780634cbf6ba4116101a757806359d1d43c1161018c57806359d1d43c1461043c5780635c98042b1461045c5780635d1044a61461046f57600080fd5b80634cbf6ba4146103dd5780635048cea0146103f057600080fd5b80633603d7581461037d5780633b3b57de146103905780633f15457f146103a35780633f5bc277146103ca57600080fd5b80632203ab56116102145780632203ab56146102c157806329cd62ea146102e25780632d170539146102f5578063304e6ade1461036a57600080fd5b806301ffc9a7146102465780630af179d71461026e57806310f13a8c14610283578063124a319c14610296575b600080fd5b6102596102543660046124f4565b6106dc565b60405190151581526020015b60405180910390f35b61028161027c366004612551565b610707565b005b61028161029136600461259d565b610793565b6102a96102a4366004612617565b610825565b6040516001600160a01b039091168152602001610265565b6102d46102cf366004612643565b6108b6565b6040516102659291906126b5565b6102816102f03660046126ce565b610947565b60408051808201909152601481527f7465787428627974657333322c737472696e67290000000000000000000000006020909101526103517f59d1d43c37707a29830be065fcabd05d6e536466c5159d2e46cb27bda8e98d6581565b6040516001600160e01b03199091168152602001610265565b610281610378366004612551565b6109a6565b61028161038b3660046126fa565b6109fa565b6102a961039e3660046126fa565b610a9d565b6102a97f000000000000000000000000000000000000000000000000000000000000000081565b6102816103d836600461272b565b610b16565b6102596103eb366004612643565b610c6a565b60408051808201909152600d81526c6164647228627974657333322960981b6020909101526103517f3b3b57de213591bb50e06975ea011e4c8c4b3e6de4009450c1a9e55f66e4bfa481565b61044f61044a366004612551565b610cea565b6040516102659190612793565b61044f61046a3660046126fa565b610d79565b61025961047d3660046127a6565b600460209081526000928352604080842090915290825290205460ff1681565b6102816104ab3660046127d6565b610df9565b61044f6104be3660046126fa565b610e88565b6102816104d1366004612551565b610f07565b6102816104e43660046128ee565b610f5b565b61044f6104f736600461293e565b610faf565b61052761050a36600461299e565b805160208183018101805160038252928201919093012091525481565b604051908152602001610265565b6102a961054336600461299e565b80516020818301810180516002825292820191909301209152546001600160a01b031681565b6102a97f000000000000000000000000000000000000000000000000000000000000000081565b61044f61059e3660046129d3565b6111c5565b61044f6105b13660046126fa565b611255565b6102816105c4366004612a21565b611294565b6105dc6105d73660046126fa565b611303565b60408051928352602083019190915201610265565b6102816105ff366004612551565b611384565b6102816106123660046127a6565b6113d8565b6106416106253660046126fa565b60006020819052908152604090205467ffffffffffffffff1681565b60405167ffffffffffffffff9091168152602001610265565b610281610668366004612a58565b611462565b60408051808201909152601581527f6164647228627974657333322c75696e743235362900000000000000000000006020909101526103517ff1cb7e06eed69ff6b1133c27a055176e5b0f641e8f94df2da7711eae8558f7b181565b61044f6106d7366004612643565b6114cb565b60006001600160e01b03198216639061b92360e01b1480610701575061070182611551565b92915050565b8261071181611669565b61071a57600080fd5b60008481526001602052604090819020549051630af179d760e01b81526001600160a01b0390911690630af179d79061075b90879087908790600401612ab6565b600060405180830381600087803b15801561077557600080fd5b505af1158015610789573d6000803e3d6000fd5b5050505050505050565b8461079d81611669565b6107a657600080fd5b6000868152600160205260409081902054905163043c4ea360e21b81526001600160a01b03909116906310f13a8c906107eb9089908990899089908990600401612ad9565b600060405180830381600087803b15801561080557600080fd5b505af1158015610819573d6000803e3d6000fd5b50505050505050505050565b6000828152600160205260408082205490516304928c6760e21b8152600481018590526001600160e01b0319841660248201526001600160a01b039091169063124a319c906044015b602060405180830381865afa15801561088b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108af9190612b12565b9392505050565b600082815260016020526040808220549051631101d5ab60e11b815260048101859052602481018490526060916001600160a01b031690632203ab5690604401600060405180830381865afa158015610913573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261093b9190810190612b7f565b915091505b9250929050565b8261095181611669565b61095a57600080fd5b600084815260016020526040908190205490516314e6b17560e11b81526004810186905260248101859052604481018490526001600160a01b03909116906329cd62ea9060640161075b565b826109b081611669565b6109b957600080fd5b60008481526001602052604090819020549051631827356f60e11b81526001600160a01b039091169063304e6ade9061075b90879087908790600401612ab6565b80610a0481611669565b610a0d57600080fd5b6000828152602081905260408120805467ffffffffffffffff1691610a3183612bdc565b82546101009290920a67ffffffffffffffff818102199093169183160217909155600084815260208181526040918290205491519190921681528492507fc6621ccb8f3f5a04bb6502154b2caf6adf5983fe76dfef1cfc9c42e3579db444910160405180910390a25050565b600081815260016020526040808220549051631d9dabef60e11b8152600481018490526001600160a01b0390911690633b3b57de90602401602060405180830381865afa158015610af2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107019190612b12565b610b306001600160a01b0383166380ac58cd60e01b6116af565b610b4d57604051630a6f7ecd60e21b815260040160405180910390fd5b600080610b8f86868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506116cb92505050565b91509150610b9c81611669565b610bb95760405163fc28781360e01b815260040160405180910390fd5b83600283604051610bca9190612c03565b908152602001604051809103902060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555080600383604051610c0d9190612c03565b908152604080516020928190038301902092909255600092835260019052902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03939093169290921790915550505050565b60008281526001602052604080822054905163132fdae960e21b815260048101859052602481018490526001600160a01b0390911690634cbf6ba490604401602060405180830381865afa158015610cc6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108af9190612c1f565b60008381526001602052604090819020549051631674750f60e21b81526060916001600160a01b0316906359d1d43c90610d2c90879087908790600401612ab6565b600060405180830381865afa158015610d49573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d719190810190612c3c565b949350505050565b60008181526001602052604090819020549051635c98042b60e01b8152600481018390526060916001600160a01b031690635c98042b906024015b600060405180830381865afa158015610dd1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107019190810190612c85565b83610e0381611669565b610e0c57600080fd5b60008581526001602052604090819020549051630623195b60e41b81526001600160a01b039091169063623195b090610e4f908890889088908890600401612cba565b600060405180830381600087803b158015610e6957600080fd5b505af1158015610e7d573d6000803e3d6000fd5b505050505050505050565b6000818152600160205260409081902054905163691f343160e01b8152600481018390526060916001600160a01b03169063691f343190602401600060405180830381865afa158015610edf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107019190810190612c3c565b82610f1181611669565b610f1a57600080fd5b60008481526001602052604090819020549051637737221360e01b81526001600160a01b039091169063773722139061075b90879087908790600401612ab6565b82610f6581611669565b610f6e57600080fd5b60008481526001602052604090819020549051638b95dd7160e01b81526001600160a01b0390911690638b95dd719061075b90879087908790600401612ce4565b60606000610fc06004828587612d03565b610fc991612d2d565b60408051808201909152600d81526c6164647228627974657333322960981b6020909101529050636262541160e11b6001600160e01b031982160161104357600061101487876118d8565b604080516001600160a01b03831660208201529192500160405160208183030381529060405292505050610d71565b60408051808201909152601581527f6164647228627974657333322c75696e7432353629000000000000000000000060209091015263071a40fd60e11b6001600160e01b031982160161111357600061109f8460048188612d03565b8101906110ac9190612643565b915050603c81036111005760006110c388886118d8565b90506110d7816001600160a01b0316611a0a565b6040516020016110e79190612793565b6040516020818303038152906040529350505050610d71565b6060806040516020016110e79190612793565b60408051808201909152601481527f7465787428627974657333322c737472696e672900000000000000000000000060209091015263298b8af160e21b6001600160e01b03198216016111ac5736600061116d8686611a43565b91509150600061117f89898585611a9b565b9050806040516020016111929190612793565b604051602081830303815290604052945050505050610d71565b60405163dfbcb35160e01b815260040160405180910390fd5b6000838152600160205260409081902054905163547d2b4160e11b8152600481018590526024810184905261ffff831660448201526060916001600160a01b03169063a8fa568290606401600060405180830381865afa15801561122d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d719190810190612c85565b6000818152600160205260409081902054905163bc1c58d160e01b8152600481018390526060916001600160a01b03169063bc1c58d190602401610db4565b61129d83611dd0565b6001600160a01b0316336001600160a01b0316146112ce5760405163fc28781360e01b815260040160405180910390fd5b60009283526004602090815260408085206001600160a01b039490941685529290529120805460ff1916911515919091179055565b60008181526001602052604080822054905163c869023360e01b81526004810184905282916001600160a01b03169063c8690233906024016040805180830381865afa158015611357573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137b9190612d5d565b91509150915091565b8261138e81611669565b61139757600080fd5b6000848152600160205260409081902054905163338f7b3760e21b81526001600160a01b039091169063ce3decdc9061075b90879087908790600401612ab6565b816113e281611669565b6113eb57600080fd5b6000838152600160205260409081902054905162d5fa2b60e81b8152600481018590526001600160a01b0384811660248301529091169063d5fa2b0090604401600060405180830381600087803b15801561144557600080fd5b505af1158015611459573d6000803e3d6000fd5b50505050505050565b8261146c81611669565b61147557600080fd5b6000848152600160205260409081902054905163e59d895d60e01b8152600481018690526001600160e01b0319851660248201526001600160a01b0384811660448301529091169063e59d895d9060640161075b565b600082815260016020526040908190205490516378e5bf0360e11b815260048101849052602481018390526060916001600160a01b03169063f1cb7e0690604401600060405180830381865afa158015611529573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108af9190810190612c85565b60006001600160e01b03198216631101d5ab60e11b148061158257506001600160e01b03198216631d9dabef60e11b145b8061159d57506001600160e01b031982166378e5bf0360e11b145b806115b857506001600160e01b0319821663bc1c58d160e01b145b806115d357506001600160e01b0319821663547d2b4160e11b145b806115ee57506001600160e01b03198216635c98042b60e01b145b8061160957506001600160e01b031982166304928c6760e21b145b8061162457506001600160e01b0319821663691f343160e01b145b8061163f57506001600160e01b0319821663c869023360e01b145b8061165a57506001600160e01b03198216631674750f60e21b145b80610701575061070182611ee6565b600061167482611dd0565b6001600160a01b0316336001600160a01b03161480610701575050600090815260046020908152604080832033845290915290205460ff1690565b60006116ba83611f1b565b80156108af57506108af8383611f4e565b8051606090600090819084906116e2816002612d81565b67ffffffffffffffff8111156116fa576116fa612829565b6040519080825280601f01601f191660200182016040528015611724576020820181803683370190505b5094506000935080840361176957600060f81b8560008151811061174a5761174a612d94565b60200101906001600160f81b031916908160001a905350505050915091565b60001981015b82818151811061178157611781612d94565b01602001517fff0000000000000000000000000000000000000000000000000000000000000016601760f91b03611827578360f81b8682600101815181106117cb576117cb612d94565b60200101906001600160f81b031916908160001a905350846117f4846001840160ff8816611fec565b60408051602081019390935282015260600160405160208183030381529060405280519060200120945060009350611877565b60018401935082818151811061183f5761183f612d94565b602001015160f81c60f81b86826001018151811061185f5761185f612d94565b60200101906001600160f81b031916908160001a9053505b8015611886576000190161176f565b508361189783600060ff8716611fec565b6040805160208101939093528201526060016040516020818303038152906040528051906020012093508260f81b8560008151811061174a5761174a612d94565b60008060006118e78585612010565b915091508115611903576118fa81610a9d565b92505050610701565b3660003660006119138989612043565b935093509350935060006002838360405161192f929190612daa565b908152604051908190036020019020546001600160a01b031690508061195f576000975050505050505050610701565b60008061196c87876120b7565b91509150816119875760009950505050505050505050610701565b6040516331a9108f60e11b8152600481018290526000906001600160a01b03851690636352211e90602401602060405180830381865afa9250505080156119eb575060408051601f3d908101601f191682019092526119e891810190612b12565b60015b6119f7575060006119fa565b90505b9c9b505050505050505050505050565b6040805160148082528183019092526060916020820181803683375050506c010000000000000000000000009290920260208301525090565b366000604481611a54826020612d81565b90506000611a648684818a612d03565b810190611a7191906126fa565b9050868287611a808483612d81565b92611a8d93929190612d03565b945094505050509250929050565b6060600080611aaa8787612010565b915091508115611ac857611abf818686610cea565b92505050610d71565b366000366000611ad88b8b612043565b9350935093509350600060028383604051611af4929190612daa565b908152604051908190036020019020546001600160a01b0316905080611b325760405180602001604052806000815250975050505050505050610d71565b600080611b3f87876120b7565b9150915081611b6857604051806020016040528060008152509950505050505050505050610d71565b6040516331a9108f60e11b8152600481018290526001600160a01b03841690636352211e90602401602060405180830381865afa925050508015611bc9575060408051601f3d908101601f19168201909252611bc691810190612b12565b60015b611bed57604051806020016040528060008152509950505050505050505050610d71565b50611c666040518060400160405280600681526020017f61766174617200000000000000000000000000000000000000000000000000008152508d8d8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506121969050565b15611cb657611c7d836001600160a01b03166121ac565b611c86826121c2565b604051602001611c97929190612dba565b6040516020818303038152906040529950505050505050505050610d71565b611d14604051806040016040528060038152602001621d5c9b60ea1b8152508d8d8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506121969050565b15611daf5760405163c87b56dd60e01b8152600481018290526060906001600160a01b0385169063c87b56dd90602401600060405180830381865afa925050508015611d8257506040513d6000823e601f3d908101601f19168201604052611d7f9190810190612c3c565b60015b611d9b5750604080516020810190915260008152611d9e565b90505b9950610d7198505050505050505050565b50506040805160208101909152600081529c9b505050505050505050505050565b6040516302571be360e01b81526004810182905260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906302571be390602401602060405180830381865afa158015611e3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5e9190612b12565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031603610701576040516331a9108f60e11b8152600481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636352211e9060240161086e565b60006001600160e01b0319821663d700ff3360e01b148061070157506301ffc9a760e01b6001600160e01b0319831614610701565b6000611f2e826301ffc9a760e01b611f4e565b80156107015750611f47826001600160e01b0319611f4e565b1592915050565b604080516001600160e01b03198316602480830191909152825180830390910181526044909101909152602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166301ffc9a760e01b178152825160009392849283928392918391908a617530fa92503d91506000519050828015611fd5575060208210155b8015611fe15750600081115b979650505050505050565b8251600090611ffb8385612d81565b111561200657600080fd5b5091016020012090565b60008060038484604051612025929190612daa565b90815260405190819003602001902054801515925090509250929050565b366000366000808686600081811061205d5761205d612d94565b919091013560f81c91508790506001876120778483612e1f565b60ff169261208793929190612d03565b8888612094856001612e1f565b60ff169080926120a693929190612d03565b929a91995097509095509350505050565b600080805b8381101561218a57600360fc1b8585838181106120db576120db612d94565b9050013560f81c60f81b6001600160f81b03191610806121235750603960f81b85858381811061210d5761210d612d94565b9050013560f81c60f81b6001600160f81b031916115b15612135576000809250925050610940565b6000603086868481811061214b5761214b612d94565b61215c9392013560f81c9050612e38565b90508061216a84600a612e4b565b6121749190612d81565b925050808061218290612e62565b9150506120bc565b60019250509250929050565b8051602091820120825192909101919091201490565b60606107016001600160a01b0383166014612255565b606060006121cf836123f5565b600101905060008167ffffffffffffffff8111156121ef576121ef612829565b6040519080825280601f01601f191660200182016040528015612219576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461222357509392505050565b60606000612264836002612e4b565b61226f906002612d81565b67ffffffffffffffff81111561228757612287612829565b6040519080825280601f01601f1916602001820160405280156122b1576020820181803683370190505b509050600360fc1b816000815181106122cc576122cc612d94565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106122fb576122fb612d94565b60200101906001600160f81b031916908160001a905350600061231f846002612e4b565b61232a906001612d81565b90505b60018111156123a2576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061235e5761235e612d94565b1a60f81b82828151811061237457612374612d94565b60200101906001600160f81b031916908160001a90535060049490941c9361239b81612e7b565b905061232d565b5083156108af5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640160405180910390fd5b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000831061243e577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef8100000000831061246a576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061248857662386f26fc10000830492506010015b6305f5e10083106124a0576305f5e100830492506008015b61271083106124b457612710830492506004015b606483106124c6576064830492506002015b600a83106107015760010192915050565b80356001600160e01b0319811681146124ef57600080fd5b919050565b60006020828403121561250657600080fd5b6108af826124d7565b60008083601f84011261252157600080fd5b50813567ffffffffffffffff81111561253957600080fd5b60208301915083602082850101111561094057600080fd5b60008060006040848603121561256657600080fd5b83359250602084013567ffffffffffffffff81111561258457600080fd5b6125908682870161250f565b9497909650939450505050565b6000806000806000606086880312156125b557600080fd5b85359450602086013567ffffffffffffffff808211156125d457600080fd5b6125e089838a0161250f565b909650945060408801359150808211156125f957600080fd5b506126068882890161250f565b969995985093965092949392505050565b6000806040838503121561262a57600080fd5b8235915061263a602084016124d7565b90509250929050565b6000806040838503121561265657600080fd5b50508035926020909101359150565b60005b83811015612680578181015183820152602001612668565b50506000910152565b600081518084526126a1816020860160208601612665565b601f01601f19169290920160200192915050565b828152604060208201526000610d716040830184612689565b6000806000606084860312156126e357600080fd5b505081359360208301359350604090920135919050565b60006020828403121561270c57600080fd5b5035919050565b6001600160a01b038116811461272857600080fd5b50565b6000806000806060858703121561274157600080fd5b843567ffffffffffffffff81111561275857600080fd5b6127648782880161250f565b909550935050602085013561277881612713565b9150604085013561278881612713565b939692955090935050565b6020815260006108af6020830184612689565b600080604083850312156127b957600080fd5b8235915060208301356127cb81612713565b809150509250929050565b600080600080606085870312156127ec57600080fd5b8435935060208501359250604085013567ffffffffffffffff81111561281157600080fd5b61281d8782880161250f565b95989497509550505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561286857612868612829565b604052919050565b600067ffffffffffffffff82111561288a5761288a612829565b50601f01601f191660200190565b600082601f8301126128a957600080fd5b81356128bc6128b782612870565b61283f565b8181528460208386010111156128d157600080fd5b816020850160208301376000918101602001919091529392505050565b60008060006060848603121561290357600080fd5b8335925060208401359150604084013567ffffffffffffffff81111561292857600080fd5b61293486828701612898565b9150509250925092565b6000806000806040858703121561295457600080fd5b843567ffffffffffffffff8082111561296c57600080fd5b6129788883890161250f565b9096509450602087013591508082111561299157600080fd5b5061281d8782880161250f565b6000602082840312156129b057600080fd5b813567ffffffffffffffff8111156129c757600080fd5b610d7184828501612898565b6000806000606084860312156129e857600080fd5b8335925060208401359150604084013561ffff81168114612a0857600080fd5b809150509250925092565b801515811461272857600080fd5b600080600060608486031215612a3657600080fd5b833592506020840135612a4881612713565b91506040840135612a0881612a13565b600080600060608486031215612a6d57600080fd5b83359250612a7d602085016124d7565b91506040840135612a0881612713565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b838152604060208201526000612ad0604083018486612a8d565b95945050505050565b858152606060208201526000612af3606083018688612a8d565b8281036040840152612b06818587612a8d565b98975050505050505050565b600060208284031215612b2457600080fd5b81516108af81612713565b6000612b3d6128b784612870565b9050828152838383011115612b5157600080fd5b6108af836020830184612665565b600082601f830112612b7057600080fd5b6108af83835160208501612b2f565b60008060408385031215612b9257600080fd5b82519150602083015167ffffffffffffffff811115612bb057600080fd5b612bbc85828601612b5f565b9150509250929050565b634e487b7160e01b600052601160045260246000fd5b600067ffffffffffffffff808316818103612bf957612bf9612bc6565b6001019392505050565b60008251612c15818460208701612665565b9190910192915050565b600060208284031215612c3157600080fd5b81516108af81612a13565b600060208284031215612c4e57600080fd5b815167ffffffffffffffff811115612c6557600080fd5b8201601f81018413612c7657600080fd5b610d7184825160208401612b2f565b600060208284031215612c9757600080fd5b815167ffffffffffffffff811115612cae57600080fd5b610d7184828501612b5f565b848152836020820152606060408201526000612cda606083018486612a8d565b9695505050505050565b838152826020820152606060408201526000612ad06060830184612689565b60008085851115612d1357600080fd5b83861115612d2057600080fd5b5050820193919092039150565b6001600160e01b03198135818116916004851015612d555780818660040360031b1b83161692505b505092915050565b60008060408385031215612d7057600080fd5b505080516020909101519092909150565b8082018082111561070157610701612bc6565b634e487b7160e01b600052603260045260246000fd5b8183823760009101908152919050565b7f6569703135353a312f6572633732313a00000000000000000000000000000000815260008351612df2816010850160208801612665565b602f60f81b6010918401918201528351612e13816011840160208801612665565b01601101949350505050565b60ff818116838216019081111561070157610701612bc6565b8181038181111561070157610701612bc6565b808202811582820484141761070157610701612bc6565b600060018201612e7457612e74612bc6565b5060010190565b600081612e8a57612e8a612bc6565b50600019019056fea164736f6c6343000811000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "ABI(bytes32,uint256)": {
        "params": {
          "contentTypes": "A bitwise OR of the ABI formats accepted by the caller.",
          "node": "The ENS node to query"
        },
        "returns": {
          "_0": "contentType The content type of the return value",
          "_1": "data The ABI data"
        }
      },
      "addr(bytes32)": {
        "params": {
          "node": "The ENS node to query."
        },
        "returns": {
          "_0": "The associated address."
        }
      },
      "clearRecords(bytes32)": {
        "params": {
          "node": "The node to update."
        }
      },
      "contenthash(bytes32)": {
        "params": {
          "node": "The ENS node to query."
        },
        "returns": {
          "_0": "The associated contenthash."
        }
      },
      "dnsRecord(bytes32,bytes32,uint16)": {
        "params": {
          "name": "the keccak-256 hash of the fully-qualified name for which to fetch the record",
          "node": "the namehash of the node for which to fetch the record",
          "resource": "the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types"
        },
        "returns": {
          "_0": "the DNS record in wire format if present, otherwise empty"
        }
      },
      "interfaceImplementer(bytes32,bytes4)": {
        "params": {
          "interfaceID": "The EIP 165 interface ID to check for.",
          "node": "The ENS node to query."
        },
        "returns": {
          "_0": "The address that implements this interface, or 0 if the interface is unsupported."
        }
      },
      "name(bytes32)": {
        "params": {
          "node": "The ENS node to query."
        },
        "returns": {
          "_0": "The associated name."
        }
      },
      "pubkey(bytes32)": {
        "params": {
          "node": "The ENS node to query"
        },
        "returns": {
          "x": "The X coordinate of the curve point for the public key.",
          "y": "The Y coordinate of the curve point for the public key."
        }
      },
      "text(bytes32,string)": {
        "params": {
          "key": "The text data key to query.",
          "node": "The ENS node to query."
        },
        "returns": {
          "_0": "The associated text data."
        }
      },
      "zonehash(bytes32)": {
        "params": {
          "node": "The ENS node to query."
        },
        "returns": {
          "_0": "The associated contenthash."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "ABI(bytes32,uint256)": {
        "notice": "Returns the ABI associated with an ENS node. Defined in EIP205."
      },
      "addr(bytes32)": {
        "notice": "Returns the address associated with an ENS node."
      },
      "clearRecords(bytes32)": {
        "notice": "Increments the record version associated with an ENS node. May only be called by the owner of that node in the ENS registry."
      },
      "contenthash(bytes32)": {
        "notice": "Returns the contenthash associated with an ENS node."
      },
      "dnsRecord(bytes32,bytes32,uint16)": {
        "notice": "Obtain a DNS record."
      },
      "interfaceImplementer(bytes32,bytes4)": {
        "notice": "Returns the address of a contract that implements the specified interface for this name. If an implementer has not been set for this interfaceID and name, the resolver will query the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that contract implements EIP165 and returns `true` for the specified interfaceID, its address will be returned."
      },
      "name(bytes32)": {
        "notice": "Returns the name associated with an ENS node, for reverse records. Defined in EIP181."
      },
      "pubkey(bytes32)": {
        "notice": "Returns the SECP256k1 public key associated with an ENS node. Defined in EIP 619."
      },
      "text(bytes32,string)": {
        "notice": "Returns the text data associated with an ENS node and key."
      },
      "zonehash(bytes32)": {
        "notice": "zonehash obtains the hash for the zone."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 243,
        "contract": "contracts/ensWildcardResolvers/Erc721WildcardResolver.sol:Erc721WildcardResolver",
        "label": "recordVersions",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_uint64)"
      },
      {
        "astId": 9086,
        "contract": "contracts/ensWildcardResolvers/Erc721WildcardResolver.sol:Erc721WildcardResolver",
        "label": "passthroughTargets",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_contract(IPublicResolver)9072)"
      },
      {
        "astId": 8334,
        "contract": "contracts/ensWildcardResolvers/Erc721WildcardResolver.sol:Erc721WildcardResolver",
        "label": "tokens",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes_memory_ptr,t_contract(IERC721)4132)"
      },
      {
        "astId": 8338,
        "contract": "contracts/ensWildcardResolvers/Erc721WildcardResolver.sol:Erc721WildcardResolver",
        "label": "parentEnsNodes",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes_memory_ptr,t_bytes32)"
      },
      {
        "astId": 8344,
        "contract": "contracts/ensWildcardResolvers/Erc721WildcardResolver.sol:Erc721WildcardResolver",
        "label": "approvedDelegates",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IERC721)4132": {
        "encoding": "inplace",
        "label": "contract IERC721",
        "numberOfBytes": "20"
      },
      "t_contract(IPublicResolver)9072": {
        "encoding": "inplace",
        "label": "contract IPublicResolver",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_contract(IPublicResolver)9072)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => contract IPublicResolver)",
        "numberOfBytes": "32",
        "value": "t_contract(IPublicResolver)9072"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_bytes32,t_uint64)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_mapping(t_bytes_memory_ptr,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes_memory_ptr,t_contract(IERC721)4132)": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => contract IERC721)",
        "numberOfBytes": "32",
        "value": "t_contract(IERC721)4132"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}